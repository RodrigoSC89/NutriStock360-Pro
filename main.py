#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NutriApp360 - Sistema Completo de Apoio ao Nutricionista
Version: 10.0 - SISTEMA COMPLETAMENTE FUNCIONAL
Author: NutriApp360 Team
"""

import streamlit as st
import pandas as pd
import sqlite3
import hashlib
import json
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta, date
import uuid
import os
import math
import random
import base64
from io import BytesIO
import re
from typing import Dict, List, Optional
import calendar
import numpy as np
import time

# Configura√ß√µes iniciais
st.set_page_config(
    page_title="NutriApp360 v10.0 - Sistema Completo",
    page_icon="ü•ó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# =============================================================================
# üé® CSS PERSONALIZADO
# =============================================================================

def load_css():
    st.markdown("""
    <style>
    /* Estilo principal */
    .main-header {
        font-size: 2.5rem;
        color: #2E7D32;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(135deg, #E8F5E8, #C8E6C9);
        padding: 1rem;
        border-radius: 15px;
        border: 3px solid #4CAF50;
        animation: fadeInDown 0.8s ease;
    }
    
    .ultra-header {
        font-size: 3rem;
        background: linear-gradient(135deg, #2E7D32, #4CAF50, #66BB6A);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        font-weight: bold;
        margin-bottom: 2rem;
        animation: pulse 2s infinite;
    }
    
    .sub-header {
        font-size: 1.8rem;
        color: #2E7D32;
        font-weight: bold;
        margin: 1.5rem 0;
        padding: 0.5rem 1rem;
        background: linear-gradient(90deg, rgba(76,175,80,0.1), transparent);
        border-left: 4px solid #4CAF50;
    }
    
    .dashboard-card {
        background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #4CAF50;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        margin: 1rem 0;
        transition: transform 0.3s ease;
    }
    
    .dashboard-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    }
    
    .metric-card {
        background: linear-gradient(135deg, #E8F5E8 0%, #C8E6C9 100%);
        padding: 1.5rem;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        border: 2px solid #4CAF50;
        transition: all 0.3s ease;
    }
    
    .metric-card:hover {
        transform: scale(1.05);
        box-shadow: 0 5px 20px rgba(76,175,80,0.3);
    }
    
    .patient-info-card {
        background: linear-gradient(135deg, #e8f5e8 0%, #c8e6c9 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #4caf50;
        margin: 1rem 0;
    }
    
    .calculation-result {
        background: linear-gradient(135deg, #E3F2FD 0%, #BBDEFB 100%);
        padding: 1rem;
        border-radius: 10px;
        border: 2px solid #2196F3;
        margin: 1rem 0;
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
    }
    
    .alert-success {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        color: #155724;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #c3e6cb;
        margin: 1rem 0;
    }
    
    .alert-warning {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        color: #856404;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #ffeaa7;
        margin: 1rem 0;
    }
    
    .alert-info {
        background: linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%);
        color: #0c5460;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #bee5eb;
        margin: 1rem 0;
    }
    
    @keyframes fadeInDown {
        from { opacity: 0; transform: translateY(-30px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    /* Bot√µes personalizados */
    .stButton > button {
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        border-radius: 10px;
        border: none;
        padding: 0.5rem 1rem;
        font-weight: bold;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        background: linear-gradient(135deg, #45a049, #4CAF50);
        transform: translateY(-2px);
        box-shadow: 0 4px 10px rgba(76,175,80,0.3);
    }
    </style>
    """, unsafe_allow_html=True)

# =============================================================================
# üìä GERENCIADOR DE BANCO DE DADOS
# =============================================================================

class DatabaseManager:
    def __init__(self):
        self.db_name = "nutriapp360.db"
        self.init_database()
    
    def get_connection(self):
        return sqlite3.connect(self.db_name, check_same_thread=False)
    
    def init_database(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # Usu√°rios
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL,
            senha TEXT NOT NULL,
            tipo_usuario TEXT DEFAULT 'nutricionista',
            coren TEXT,
            telefone TEXT,
            clinica TEXT,
            data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ativo INTEGER DEFAULT 1
        )
        ''')
        
        # Pacientes
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS pacientes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            nutricionista_id INTEGER,
            nome TEXT NOT NULL,
            email TEXT,
            telefone TEXT,
            data_nascimento DATE,
            sexo TEXT,
            profissao TEXT,
            endereco TEXT,
            objetivo TEXT,
            restricoes_alimentares TEXT,
            historico_medico TEXT,
            medicamentos TEXT,
            data_cadastro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            ativo INTEGER DEFAULT 1,
            FOREIGN KEY (nutricionista_id) REFERENCES usuarios (id)
        )
        ''')
        
        # Avalia√ß√µes Antropom√©tricas
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS avaliacoes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            paciente_id INTEGER,
            data_avaliacao DATE NOT NULL,
            peso REAL,
            altura REAL,
            imc REAL,
            circunferencia_cintura REAL,
            circunferencia_quadril REAL,
            percentual_gordura REAL,
            massa_muscular REAL,
            observacoes TEXT,
            FOREIGN KEY (paciente_id) REFERENCES pacientes (id)
        )
        ''')
        
        # Planos Alimentares
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS planos_alimentares (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            paciente_id INTEGER,
            nutricionista_id INTEGER,
            nome TEXT NOT NULL,
            objetivo TEXT,
            calorias_totais INTEGER,
            carboidratos REAL,
            proteinas REAL,
            lipidios REAL,
            data_criacao DATE DEFAULT CURRENT_DATE,
            data_validade DATE,
            refeicoes TEXT,
            observacoes TEXT,
            ativo INTEGER DEFAULT 1,
            ia_otimizado INTEGER DEFAULT 0,
            score_aderencia REAL,
            FOREIGN KEY (paciente_id) REFERENCES pacientes (id),
            FOREIGN KEY (nutricionista_id) REFERENCES usuarios (id)
        )
        ''')
        
        # Consultas e Agendamentos
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS consultas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            paciente_id INTEGER,
            nutricionista_id INTEGER,
            data_consulta TIMESTAMP,
            tipo_consulta TEXT,
            status TEXT DEFAULT 'agendada',
            duracao INTEGER DEFAULT 60,
            valor REAL,
            observacoes TEXT,
            lembretes TEXT,
            FOREIGN KEY (paciente_id) REFERENCES pacientes (id),
            FOREIGN KEY (nutricionista_id) REFERENCES usuarios (id)
        )
        ''')
        
        # Receitas
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS receitas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            uuid TEXT UNIQUE NOT NULL,
            nome TEXT NOT NULL,
            categoria TEXT,
            ingredientes TEXT,
            modo_preparo TEXT,
            tempo_preparo INTEGER,
            porcoes INTEGER,
            calorias_porcao REAL,
            carboidratos REAL,
            proteinas REAL,
            lipidios REAL,
            fibras REAL,
            criada_por INTEGER,
            data_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            publica INTEGER DEFAULT 0,
            FOREIGN KEY (criada_por) REFERENCES usuarios (id)
        )
        ''')
        
        # Configura√ß√µes do Sistema
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS configuracoes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            usuario_id INTEGER,
            chave TEXT NOT NULL,
            valor TEXT,
            FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
        )
        ''')
        
        # Criar usu√°rio admin padr√£o
        cursor.execute("SELECT COUNT(*) FROM usuarios WHERE email = ?", ('admin@nutriapp360.com',))
        if cursor.fetchone()[0] == 0:
            senha_hash = hashlib.sha256('admin123'.encode()).hexdigest()
            cursor.execute('''
            INSERT INTO usuarios (nome, email, senha, tipo_usuario, coren)
            VALUES (?, ?, ?, ?, ?)
            ''', ('Administrador', 'admin@nutriapp360.com', senha_hash, 'admin', 'ADMIN001'))
        
        conn.commit()
        conn.close()

# Inst√¢ncia global do gerenciador
db_manager = DatabaseManager()

# =============================================================================
# üîê SISTEMA DE AUTENTICA√á√ÉO
# =============================================================================

def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def authenticate_user(email, password):
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    password_hash = hash_password(password)
    cursor.execute('''
    SELECT id, nome, email, tipo_usuario, coren, telefone, clinica 
    FROM usuarios 
    WHERE email = ? AND senha = ? AND ativo = 1
    ''', (email, password_hash))
    
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return {
            'id': user[0],
            'nome': user[1],
            'email': user[2],
            'tipo_usuario': user[3],
            'coren': user[4],
            'telefone': user[5],
            'clinica': user[6]
        }
    return None

def show_login():
    load_css()
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown('<h1 class="main-header">ü•ó NutriApp360</h1>', unsafe_allow_html=True)
        st.markdown('<h3 style="text-align: center; color: #666;">Sistema Completo de Gest√£o Nutricional v10.0</h3>', unsafe_allow_html=True)
        
        with st.form("login_form"):
            email = st.text_input("üìß Email", placeholder="seu@email.com")
            senha = st.text_input("üîí Senha", type="password", placeholder="Sua senha")
            
            col_login, col_register = st.columns(2)
            
            with col_login:
                login_submitted = st.form_submit_button("üîê Entrar", use_container_width=True)
            
            with col_register:
                register_submitted = st.form_submit_button("üìù Cadastrar", use_container_width=True)
            
            if login_submitted:
                if email and senha:
                    user = authenticate_user(email, senha)
                    if user:
                        st.session_state.logged_in = True
                        st.session_state.user = user
                        st.success(f"‚úÖ Bem-vindo, {user['nome']}!")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå Email ou senha incorretos!")
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos!")
            
            if register_submitted:
                st.session_state.show_register = True
                st.rerun()
        
        # Informa√ß√µes de demo
        with st.expander("üîç Informa√ß√µes de Demonstra√ß√£o"):
            st.info("""
            **Usu√°rio de Demonstra√ß√£o:**
            - Email: admin@nutriapp360.com
            - Senha: admin123
            
            **Funcionalidades:**
            - ‚úÖ Sistema de Login/Cadastro
            - ‚úÖ Gest√£o Completa de Pacientes
            - ‚úÖ Calculadoras Nutricionais Avan√ßadas
            - ‚úÖ Planos Alimentares com IA
            - ‚úÖ Sistema de Agenda Completo
            - ‚úÖ Receitas com An√°lise Nutricional
            - ‚úÖ Relat√≥rios em PDF
            - ‚úÖ Dashboard Analytics
            """)

def show_register():
    load_css()
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown('<h2 class="main-header">üìù Cadastro de Usu√°rio</h2>', unsafe_allow_html=True)
        
        with st.form("register_form"):
            nome = st.text_input("üë§ Nome Completo")
            email = st.text_input("üìß Email")
            telefone = st.text_input("üì± Telefone")
            coren = st.text_input("üè• COREN/CRN")
            clinica = st.text_input("üè¢ Cl√≠nica/Local de Trabalho")
            senha = st.text_input("üîí Senha", type="password")
            confirmar_senha = st.text_input("üîí Confirmar Senha", type="password")
            
            col_back, col_register = st.columns(2)
            
            with col_back:
                if st.form_submit_button("‚óÄÔ∏è Voltar", use_container_width=True):
                    st.session_state.show_register = False
                    st.rerun()
            
            with col_register:
                submitted = st.form_submit_button("‚úÖ Cadastrar", use_container_width=True)
            
            if submitted:
                if all([nome, email, senha, confirmar_senha]):
                    if senha != confirmar_senha:
                        st.error("‚ùå Senhas n√£o coincidem!")
                    else:
                        try:
                            conn = db_manager.get_connection()
                            cursor = conn.cursor()
                            
                            # Verificar se email j√° existe
                            cursor.execute("SELECT COUNT(*) FROM usuarios WHERE email = ?", (email,))
                            if cursor.fetchone()[0] > 0:
                                st.error("‚ùå Email j√° cadastrado!")
                            else:
                                senha_hash = hash_password(senha)
                                cursor.execute('''
                                INSERT INTO usuarios (nome, email, senha, telefone, coren, clinica)
                                VALUES (?, ?, ?, ?, ?, ?)
                                ''', (nome, email, senha_hash, telefone, coren, clinica))
                                
                                conn.commit()
                                st.success("‚úÖ Usu√°rio cadastrado com sucesso!")
                                time.sleep(2)
                                st.session_state.show_register = False
                                st.rerun()
                                
                        except Exception as e:
                            st.error(f"‚ùå Erro ao cadastrar: {str(e)}")
                        finally:
                            conn.close()
                else:
                    st.warning("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios!")

# =============================================================================
# üè† DASHBOARD PRINCIPAL
# =============================================================================

def show_dashboard(user):
    load_css()
    
    st.markdown(f'<h1 class="ultra-header">üè† Dashboard - {user["nome"]}</h1>', unsafe_allow_html=True)
    
    # Estat√≠sticas gerais
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Contar pacientes
    cursor.execute("SELECT COUNT(*) FROM pacientes WHERE nutricionista_id = ? AND ativo = 1", (user['id'],))
    total_pacientes = cursor.fetchone()[0]
    
    # Contar consultas hoje
    cursor.execute("""
    SELECT COUNT(*) FROM consultas 
    WHERE nutricionista_id = ? AND DATE(data_consulta) = DATE('now', 'localtime')
    """, (user['id'],))
    consultas_hoje = cursor.fetchone()[0]
    
    # Contar planos ativos
    cursor.execute("SELECT COUNT(*) FROM planos_alimentares WHERE nutricionista_id = ? AND ativo = 1", (user['id'],))
    planos_ativos = cursor.fetchone()[0]
    
    # Receitas criadas
    cursor.execute("SELECT COUNT(*) FROM receitas WHERE criada_por = ?", (user['id'],))
    receitas_criadas = cursor.fetchone()[0]
    
    conn.close()
    
    # M√©tricas principais
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f'''
        <div class="metric-card">
            <h2 style="color: #2E7D32;">üë•</h2>
            <h3>{total_pacientes}</h3>
            <p>Pacientes Ativos</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col2:
        st.markdown(f'''
        <div class="metric-card">
            <h2 style="color: #2E7D32;">üìÖ</h2>
            <h3>{consultas_hoje}</h3>
            <p>Consultas Hoje</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col3:
        st.markdown(f'''
        <div class="metric-card">
            <h2 style="color: #2E7D32;">üìã</h2>
            <h3>{planos_ativos}</h3>
            <p>Planos Ativos</p>
        </div>
        ''', unsafe_allow_html=True)
    
    with col4:
        st.markdown(f'''
        <div class="metric-card">
            <h2 style="color: #2E7D32;">üçΩÔ∏è</h2>
            <h3>{receitas_criadas}</h3>
            <p>Receitas Criadas</p>
        </div>
        ''', unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Se√ß√£o de acesso r√°pido
    st.markdown('<div class="sub-header">üöÄ Acesso R√°pido</div>', unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ûï Novo Paciente", use_container_width=True):
            st.session_state.active_page = "gestao_pacientes"
            st.rerun()
        
        if st.button("üìÖ Nova Consulta", use_container_width=True):
            st.session_state.active_page = "agenda"
            st.rerun()
    
    with col2:
        if st.button("üßÆ Calculadoras", use_container_width=True):
            st.session_state.active_page = "calculadoras"
            st.rerun()
        
        if st.button("üìã Novo Plano", use_container_width=True):
            st.session_state.active_page = "planos_alimentares"
            st.rerun()
    
    with col3:
        if st.button("üç≥ Nova Receita", use_container_width=True):
            st.session_state.active_page = "receitas"
            st.rerun()
        
        if st.button("üìä Relat√≥rios", use_container_width=True):
            st.session_state.active_page = "relatorios"
            st.rerun()
    
    # Gr√°ficos do dashboard
    col1, col2 = st.columns(2)
    
    with col1:
        # Gr√°fico de evolu√ß√£o de pacientes (simulado)
        dates = pd.date_range(start='2024-01-01', end=date.today(), freq='M')
        patient_growth = [random.randint(1, 5) for _ in dates]
        cumulative_patients = np.cumsum(patient_growth)
        
        fig_growth = px.line(
            x=dates, 
            y=cumulative_patients,
            title="üìà Crescimento de Pacientes",
            labels={'x': 'Data', 'y': 'Total de Pacientes'}
        )
        fig_growth.update_layout(height=400)
        st.plotly_chart(fig_growth, use_container_width=True)
    
    with col2:
        # Gr√°fico de tipos de consulta (simulado)
        tipos_consulta = ['Primeira Consulta', 'Retorno', 'Reavalia√ß√£o', 'Teleconsulta']
        valores_consulta = [random.randint(5, 20) for _ in tipos_consulta]
        
        fig_consultas = px.pie(
            values=valores_consulta,
            names=tipos_consulta,
            title="üìä Distribui√ß√£o de Consultas"
        )
        fig_consultas.update_layout(height=400)
        st.plotly_chart(fig_consultas, use_container_width=True)
    
    # Pr√≥ximas consultas
    st.markdown('<div class="sub-header">üìÖ Pr√≥ximas Consultas</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT c.data_consulta, p.nome as paciente_nome, c.tipo_consulta
    FROM consultas c
    JOIN pacientes p ON c.paciente_id = p.id
    WHERE c.nutricionista_id = ? AND c.data_consulta >= datetime('now', 'localtime')
    ORDER BY c.data_consulta
    LIMIT 5
    """, (user['id'],))
    
    proximas_consultas = cursor.fetchall()
    conn.close()
    
    if proximas_consultas:
        for consulta in proximas_consultas:
            data_consulta = datetime.strptime(consulta[0], '%Y-%m-%d %H:%M:%S')
            st.markdown(f'''
            <div class="patient-info-card">
                <strong>üïê {data_consulta.strftime('%d/%m/%Y √†s %H:%M')}</strong><br>
                üë§ <strong>{consulta[1]}</strong> - {consulta[2]}
            </div>
            ''', unsafe_allow_html=True)
    else:
        st.info("üìù Nenhuma consulta agendada pr√≥xima.")

# =============================================================================
# üßÆ CALCULADORAS NUTRICIONAIS
# =============================================================================

def calculate_bmr(peso, altura, idade, sexo, formula="Mifflin-St Jeor"):
    """Calcula Taxa Metab√≥lica Basal"""
    if formula == "Mifflin-St Jeor":
        if sexo.upper() == "MASCULINO" or sexo.upper() == "M":
            return (10 * peso) + (6.25 * altura) - (5 * idade) + 5
        else:
            return (10 * peso) + (6.25 * altura) - (5 * idade) - 161
    elif formula == "Harris-Benedict":
        if sexo.upper() == "MASCULINO" or sexo.upper() == "M":
            return 88.362 + (13.397 * peso) + (4.799 * altura) - (5.677 * idade)
        else:
            return 447.593 + (9.247 * peso) + (3.098 * altura) - (4.330 * idade)

def calculate_age(data_nascimento):
    """Calcula idade a partir da data de nascimento"""
    try:
        if isinstance(data_nascimento, str):
            nascimento = datetime.strptime(data_nascimento, '%Y-%m-%d').date()
        else:
            nascimento = data_nascimento
        
        hoje = date.today()
        idade = hoje.year - nascimento.year - ((hoje.month, hoje.day) < (nascimento.month, nascimento.day))
        return idade
    except:
        return 0

def show_calculadoras(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üßÆ Calculadoras Nutricionais</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "‚öñÔ∏è IMC e Composi√ß√£o",
        "üî• Gasto Energ√©tico", 
        "üçΩÔ∏è Macronutrientes",
        "üíß Necessidade H√≠drica",
        "üìè Medidas Corporais"
    ])
    
    with tab1:
        show_imc_calculator()
    
    with tab2:
        show_energy_calculator()
    
    with tab3:
        show_macronutrients_calculator()
    
    with tab4:
        show_water_calculator()
    
    with tab5:
        show_body_measurements_calculator()

def show_imc_calculator():
    st.markdown("##### ‚öñÔ∏è Calculadora de IMC e Composi√ß√£o Corporal")
    
    col1, col2 = st.columns(2)
    
    with col1:
        peso = st.number_input("Peso (kg)", 30.0, 300.0, 70.0, step=0.1)
        altura = st.number_input("Altura (cm)", 100.0, 250.0, 170.0, step=0.5)
        idade = st.number_input("Idade (anos)", 10, 120, 30)
        sexo = st.selectbox("Sexo", ["Feminino", "Masculino"])
        
        if st.button("üßÆ Calcular IMC"):
            altura_m = altura / 100
            imc = peso / (altura_m ** 2)
            
            # Classifica√ß√£o do IMC
            if imc < 18.5:
                classificacao = "Baixo peso"
                cor = "#FFC107"
            elif imc < 25:
                classificacao = "Peso normal"
                cor = "#4CAF50"
            elif imc < 30:
                classificacao = "Sobrepeso"
                cor = "#FF9800"
            elif imc < 35:
                classificacao = "Obesidade grau I"
                cor = "#F44336"
            elif imc < 40:
                classificacao = "Obesidade grau II"
                cor = "#D32F2F"
            else:
                classificacao = "Obesidade grau III"
                cor = "#B71C1C"
            
            st.markdown(f'''
            <div class="calculation-result" style="border-color: {cor};">
                <h3>IMC: {imc:.1f}</h3>
                <h4 style="color: {cor};">{classificacao}</h4>
            </div>
            ''', unsafe_allow_html=True)
    
    with col2:
        # Gr√°fico de refer√™ncia IMC
        imc_ranges = ['Baixo peso', 'Normal', 'Sobrepeso', 'Obesidade I', 'Obesidade II', 'Obesidade III']
        imc_values = [18.5, 24.9, 29.9, 34.9, 39.9, 45]
        colors = ['#FFC107', '#4CAF50', '#FF9800', '#F44336', '#D32F2F', '#B71C1C']
        
        fig_imc = px.bar(
            x=imc_ranges,
            y=imc_values,
            title="Faixas de IMC",
            color=imc_ranges,
            color_discrete_sequence=colors
        )
        fig_imc.update_layout(showlegend=False)
        st.plotly_chart(fig_imc, use_container_width=True)

def show_energy_calculator():
    st.markdown("##### üî• Calculadora de Gasto Energ√©tico")
    
    col1, col2 = st.columns(2)
    
    with col1:
        peso = st.number_input("Peso (kg)", 30.0, 300.0, 70.0, step=0.1, key="peso_energia")
        altura = st.number_input("Altura (cm)", 100.0, 250.0, 170.0, step=0.5, key="altura_energia")
        idade = st.number_input("Idade (anos)", 10, 120, 30, key="idade_energia")
        sexo = st.selectbox("Sexo", ["Feminino", "Masculino"], key="sexo_energia")
        
        atividade = st.selectbox("N√≠vel de Atividade", [
            "Sedent√°rio (pouco ou nenhum exerc√≠cio)",
            "Levemente ativo (exerc√≠cio leve 1-3 dias/semana)",
            "Moderadamente ativo (exerc√≠cio moderado 3-5 dias/semana)",
            "Muito ativo (exerc√≠cio intenso 6-7 dias/semana)",
            "Extremamente ativo (exerc√≠cio muito intenso, trabalho f√≠sico)"
        ])
        
        formula = st.selectbox("F√≥rmula", ["Mifflin-St Jeor", "Harris-Benedict"])
        
        if st.button("üî• Calcular Gasto"):
            # Calcular TMB
            tmb = calculate_bmr(peso, altura, idade, sexo, formula)
            
            # Fatores de atividade
            fatores = {
                "Sedent√°rio (pouco ou nenhum exerc√≠cio)": 1.2,
                "Levemente ativo (exerc√≠cio leve 1-3 dias/semana)": 1.375,
                "Moderadamente ativo (exerc√≠cio moderado 3-5 dias/semana)": 1.55,
                "Muito ativo (exerc√≠cio intenso 6-7 dias/semana)": 1.725,
                "Extremamente ativo (exerc√≠cio muito intenso, trabalho f√≠sico)": 1.9
            }
            
            fator = fatores[atividade]
            get = tmb * fator
            
            st.markdown(f'''
            <div class="calculation-result">
                <h3>TMB: {tmb:.0f} kcal/dia</h3>
                <h3>GET: {get:.0f} kcal/dia</h3>
                <p><strong>F√≥rmula utilizada:</strong> {formula}</p>
                <p><strong>Fator de atividade:</strong> {fator}</p>
            </div>
            ''', unsafe_allow_html=True)
    
    with col2:
        # Compara√ß√£o de f√≥rmulas
        if 'peso' in locals():
            tmb_mifflin = calculate_bmr(peso, altura, idade, sexo, "Mifflin-St Jeor")
            tmb_harris = calculate_bmr(peso, altura, idade, sexo, "Harris-Benedict")
            
            fig_comparacao = go.Figure(data=[
                go.Bar(name='Mifflin-St Jeor', x=['TMB'], y=[tmb_mifflin]),
                go.Bar(name='Harris-Benedict', x=['TMB'], y=[tmb_harris])
            ])
            fig_comparacao.update_layout(
                title='Compara√ß√£o de F√≥rmulas TMB',
                yaxis_title='kcal/dia'
            )
            st.plotly_chart(fig_comparacao, use_container_width=True)

def show_macronutrients_calculator():
    st.markdown("##### ü•ó Calculadora de Distribui√ß√£o de Macronutrientes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        calorias_totais = st.number_input("üî• Calorias Totais/dia", 1000, 5000, 2000)
        
        abordagem = st.selectbox("üìä Abordagem Nutricional", [
            "Padr√£o (Balanced)",
            "Low Carb",
            "Cetog√™nica",
            "Alta Prote√≠na",
            "Mediterr√¢nea",
            "Personalizada"
        ])
        
        if abordagem == "Personalizada":
            carboidratos_perc = st.slider("üçû Carboidratos (%)", 10, 70, 50)
            proteinas_perc = st.slider("ü•© Prote√≠nas (%)", 10, 40, 20)
            lipidios_perc = 100 - carboidratos_perc - proteinas_perc
            
            st.markdown(f"**ü•ë Lip√≠dios:** {lipidios_perc}%")
        else:
            distribuicoes = {
                "Padr√£o (Balanced)": {"carboidratos": 50, "proteinas": 20, "lipidios": 30},
                "Low Carb": {"carboidratos": 20, "proteinas": 30, "lipidios": 50},
                "Cetog√™nica": {"carboidratos": 5, "proteinas": 20, "lipidios": 75},
                "Alta Prote√≠na": {"carboidratos": 40, "proteinas": 35, "lipidios": 25},
                "Mediterr√¢nea": {"carboidratos": 45, "proteinas": 20, "lipidios": 35}
            }
            
            dist = distribuicoes[abordagem]
            carboidratos_perc = dist["carboidratos"]
            proteinas_perc = dist["proteinas"]
            lipidios_perc = dist["lipidios"]
        
        # Calcular gramas
        carboidratos_g = (calorias_totais * carboidratos_perc / 100) / 4
        proteinas_g = (calorias_totais * proteinas_perc / 100) / 4
        lipidios_g = (calorias_totais * lipidios_perc / 100) / 9
        
        # Mostrar resultados
        col_carb, col_prot, col_lip = st.columns(3)
        
        with col_carb:
            st.metric("üçû Carboidratos", f"{carboidratos_g:.0f}g", f"{carboidratos_perc}%")
        
        with col_prot:
            st.metric("ü•© Prote√≠nas", f"{proteinas_g:.0f}g", f"{proteinas_perc}%")
        
        with col_lip:
            st.metric("ü•ë Lip√≠dios", f"{lipidios_g:.0f}g", f"{lipidios_perc}%")
    
    with col2:
        # Gr√°fico de distribui√ß√£o
        fig_macro = px.pie(
            values=[carboidratos_perc, proteinas_perc, lipidios_perc],
            names=['Carboidratos', 'Prote√≠nas', 'Lip√≠dios'],
            title="Distribui√ß√£o de Macronutrientes",
            color_discrete_sequence=['#4CAF50', '#2196F3', '#FF9800']
        )
        
        st.plotly_chart(fig_macro, use_container_width=True)
        
        # Recomenda√ß√µes por refei√ß√£o
        st.markdown("**üçΩÔ∏è Distribui√ß√£o por Refei√ß√µes:**")
        
        refeicoes = {
            'Caf√© da manh√£': 0.25,
            'Almo√ßo': 0.35,
            'Lanche': 0.15,
            'Jantar': 0.25
        }
        
        for refeicao, prop in refeicoes.items():
            carb_ref = carboidratos_g * prop
            prot_ref = proteinas_g * prop
            lip_ref = lipidios_g * prop
            
            st.markdown(f"‚Ä¢ **{refeicao}:** {carb_ref:.0f}g C | {prot_ref:.0f}g P | {lip_ref:.0f}g L")

def show_water_calculator():
    st.markdown("##### üíß Calculadora de Necessidade H√≠drica")
    
    col1, col2 = st.columns(2)
    
    with col1:
        peso = st.number_input("Peso (kg)", 30.0, 300.0, 70.0, step=0.1, key="peso_agua")
        idade = st.number_input("Idade (anos)", 10, 120, 30, key="idade_agua")
        atividade_fisica = st.selectbox("Atividade F√≠sica", [
            "Sedent√°rio",
            "Leve (1-3x/semana)",
            "Moderada (3-5x/semana)",
            "Intensa (5-7x/semana)"
        ])
        clima = st.selectbox("Clima", ["Temperado", "Quente", "Muito Quente"])
        
        if st.button("üíß Calcular Hidrata√ß√£o"):
            # C√°lculo base: 35ml/kg
            necessidade_base = peso * 35
            
            # Ajustes por atividade
            ajuste_atividade = {
                "Sedent√°rio": 0,
                "Leve (1-3x/semana)": 300,
                "Moderada (3-5x/semana)": 500,
                "Intensa (5-7x/semana)": 800
            }
            
            # Ajustes por clima
            ajuste_clima = {
                "Temperado": 0,
                "Quente": 300,
                "Muito Quente": 600
            }
            
            necessidade_total = necessidade_base + ajuste_atividade[atividade_fisica] + ajuste_clima[clima]
            copos_200ml = necessidade_total / 200
            
            st.markdown(f'''
            <div class="calculation-result">
                <h3>üíß {necessidade_total:.0f} ml/dia</h3>
                <h4>‚âà {copos_200ml:.0f} copos de 200ml</h4>
                <p><strong>Base:</strong> {necessidade_base:.0f}ml ({peso:.1f}kg √ó 35ml)</p>
                <p><strong>+ Atividade:</strong> {ajuste_atividade[atividade_fisica]}ml</p>
                <p><strong>+ Clima:</strong> {ajuste_clima[clima]}ml</p>
            </div>
            ''', unsafe_allow_html=True)
    
    with col2:
        # Dicas de hidrata√ß√£o
        st.markdown("**üí° Dicas de Hidrata√ß√£o:**")
        st.info("""
        ‚Ä¢ Beba √°gua ao acordar
        ‚Ä¢ Tenha sempre uma garrafa por perto
        ‚Ä¢ Consuma frutas ricas em √°gua
        ‚Ä¢ Monitore a cor da urina
        ‚Ä¢ Aumente a ingest√£o em dias quentes
        ‚Ä¢ Beba antes, durante e ap√≥s exerc√≠cios
        """)
        
        # Gr√°fico de hidrata√ß√£o ao longo do dia
        horas = list(range(6, 23))
        hidratacao_ideal = [100, 200, 150, 200, 250, 150, 300, 200, 250, 150, 200, 150, 200, 100, 150, 100, 50]
        
        fig_hidratacao = px.bar(
            x=horas,
            y=hidratacao_ideal,
            title="üíß Hidrata√ß√£o Ideal ao Longo do Dia",
            labels={'x': 'Hora', 'y': 'ml'}
        )
        fig_hidratacao.update_layout(height=300)
        st.plotly_chart(fig_hidratacao, use_container_width=True)

def show_body_measurements_calculator():
    st.markdown("##### üìè Calculadora de Medidas Corporais")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Medidas Antropom√©tricas:**")
        
        peso = st.number_input("Peso (kg)", 30.0, 300.0, 70.0, step=0.1, key="peso_medidas")
        altura = st.number_input("Altura (cm)", 100.0, 250.0, 170.0, step=0.5, key="altura_medidas")
        
        # Circunfer√™ncias
        st.markdown("**Circunfer√™ncias (cm):**")
        circ_cintura = st.number_input("Cintura", 50.0, 200.0, 80.0, step=0.5)
        circ_quadril = st.number_input("Quadril", 50.0, 200.0, 100.0, step=0.5)
        circ_braco = st.number_input("Bra√ßo", 20.0, 50.0, 30.0, step=0.5)
        circ_pescoco = st.number_input("Pesco√ßo", 25.0, 60.0, 35.0, step=0.5)
        
        sexo = st.selectbox("Sexo", ["Feminino", "Masculino"], key="sexo_medidas")
        
        if st.button("üìè Calcular Medidas"):
            altura_m = altura / 100
            
            # IMC
            imc = peso / (altura_m ** 2)
            
            # Rela√ß√£o Cintura-Quadril (RCQ)
            rcq = circ_cintura / circ_quadril
            
            # Rela√ß√£o Cintura-Altura (RCA)
            rca = circ_cintura / altura
            
            # Estimativa de gordura corporal (f√≥rmula US Navy)
            if sexo == "Masculino":
                bf = 495 / (1.0324 - 0.19077 * math.log10(circ_cintura - circ_pescoco) + 0.15456 * math.log10(altura)) - 450
            else:
                bf = 495 / (1.29579 - 0.35004 * math.log10(circ_cintura + circ_quadril - circ_pescoco) + 0.22100 * math.log10(altura)) - 450
            
            # Classifica√ß√µes
            if sexo == "Masculino":
                rcq_class = "Normal" if rcq < 0.90 else "Elevado"
            else:
                rcq_class = "Normal" if rcq < 0.80 else "Elevado"
            
            rca_class = "Normal" if rca < 0.5 else "Elevado"
            
            st.markdown(f'''
            <div class="calculation-result">
                <h4>üìä Resultados:</h4>
                <p><strong>IMC:</strong> {imc:.1f}</p>
                <p><strong>RCQ:</strong> {rcq:.2f} ({rcq_class})</p>
                <p><strong>RCA:</strong> {rca:.2f} ({rca_class})</p>
                <p><strong>% Gordura:</strong> {bf:.1f}%</p>
            </div>
            ''', unsafe_allow_html=True)
    
    with col2:
        # Gr√°fico de refer√™ncia
        medidas_ref = ['IMC', 'RCQ', 'RCA', '% Gordura']
        
        if 'imc' in locals():
            valores_atuais = [imc, rcq*100, rca*100, bf]
            
            fig_medidas = px.bar(
                x=medidas_ref,
                y=valores_atuais,
                title="üìè Medidas Calculadas",
                color=medidas_ref,
                color_discrete_sequence=['#4CAF50', '#2196F3', '#FF9800', '#9C27B0']
            )
            fig_medidas.update_layout(showlegend=False, height=400)
            st.plotly_chart(fig_medidas, use_container_width=True)
        
        # Tabela de refer√™ncia
        st.markdown("**üìã Valores de Refer√™ncia:**")
        ref_data = {
            'Medida': ['IMC', 'RCQ (H)', 'RCQ (M)', 'RCA', '% Gordura (H)', '% Gordura (M)'],
            'Normal': ['18.5-24.9', '<0.90', '<0.80', '<0.50', '10-20%', '16-25%'],
            'Aten√ß√£o': ['25-29.9', '0.90-1.0', '0.80-0.85', '0.50-0.58', '20-25%', '25-31%'],
            'Elevado': ['‚â•30', '>1.0', '>0.85', '‚â•0.58', '>25%', '>31%']
        }
        st.dataframe(pd.DataFrame(ref_data), use_container_width=True)

# =============================================================================
# üë• GEST√ÉO DE PACIENTES
# =============================================================================

def show_gestao_pacientes(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üë• Gest√£o de Pacientes</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üë• Lista de Pacientes",
        "‚ûï Novo Paciente",
        "üìä Relat√≥rio Individual",
        "üìà Evolu√ß√£o"
    ])
    
    with tab1:
        show_patients_list(user)
    
    with tab2:
        show_new_patient_form(user)
    
    with tab3:
        show_patient_report(user)
    
    with tab4:
        show_patient_evolution(user)

def show_patients_list(user):
    st.markdown('<div class="sub-header">üë• Lista de Pacientes</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT p.*, 
           COUNT(a.id) as total_avaliacoes,
           MAX(a.data_avaliacao) as ultima_avaliacao
    FROM pacientes p
    LEFT JOIN avaliacoes a ON p.id = a.paciente_id
    WHERE p.nutricionista_id = ? AND p.ativo = 1
    GROUP BY p.id
    ORDER BY p.nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    conn.close()
    
    if not pacientes:
        st.info("üìù Nenhum paciente cadastrado ainda.")
        return
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtro_nome = st.text_input("üîç Buscar por nome", placeholder="Digite o nome...")
    
    with col2:
        filtro_sexo = st.selectbox("‚ö• Filtrar por sexo", ["Todos", "Feminino", "Masculino"])
    
    with col3:
        filtro_idade = st.selectbox("üìÖ Filtrar por idade", ["Todos", "18-30", "31-50", "51-70", "70+"])
    
    # Aplicar filtros
    pacientes_filtrados = []
    for paciente in pacientes:
        # Filtro nome
        if filtro_nome and filtro_nome.lower() not in paciente[3].lower():  # nome est√° na posi√ß√£o 3
            continue
        
        # Filtro sexo
        if filtro_sexo != "Todos" and paciente[7] != filtro_sexo:  # sexo est√° na posi√ß√£o 7
            continue
        
        # Filtro idade
        if paciente[6]:  # data_nascimento
            idade = calculate_age(paciente[6])
            if filtro_idade == "18-30" and not (18 <= idade <= 30):
                continue
            elif filtro_idade == "31-50" and not (31 <= idade <= 50):
                continue
            elif filtro_idade == "51-70" and not (51 <= idade <= 70):
                continue
            elif filtro_idade == "70+" and idade < 70:
                continue
        
        pacientes_filtrados.append(paciente)
    
    # Mostrar pacientes
    for paciente in pacientes_filtrados:
        with st.expander(f"üë§ {paciente[3]} ({calculate_age(paciente[6]) if paciente[6] else '?'} anos)", expanded=False):
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"**üìß Email:** {paciente[4] or 'N√£o informado'}")
                st.markdown(f"**üì± Telefone:** {paciente[5] or 'N√£o informado'}")
                st.markdown(f"**‚ö• Sexo:** {paciente[7] or 'N√£o informado'}")
            
            with col2:
                st.markdown(f"**üíº Profiss√£o:** {paciente[8] or 'N√£o informada'}")
                st.markdown(f"**üéØ Objetivo:** {paciente[10] or 'N√£o definido'}")
                st.markdown(f"**üìä Avalia√ß√µes:** {paciente[-2]} realizadas")
            
            with col3:
                if paciente[-1]:  # ultima_avaliacao
                    st.markdown(f"**üìÖ √öltima Avalia√ß√£o:** {paciente[-1]}")
                else:
                    st.markdown("**üìÖ √öltima Avalia√ß√£o:** Nenhuma")
                
                # Bot√µes de a√ß√£o
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    if st.button("üìã Ver Detalhes", key=f"details_{paciente[0]}"):
                        st.session_state.selected_patient = paciente[0]
                        st.session_state.active_tab = 2
                        st.rerun()
                
                with col_btn2:
                    if st.button("‚úèÔ∏è Editar", key=f"edit_{paciente[0]}"):
                        st.session_state.editing_patient = paciente[0]
                        st.rerun()

def show_new_patient_form(user):
    st.markdown('<div class="sub-header">‚ûï Cadastrar Novo Paciente</div>', unsafe_allow_html=True)
    
    with st.form("novo_paciente_form"):
        
        # Dados pessoais
        st.markdown("##### üë§ Dados Pessoais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("Nome Completo *")
            data_nascimento = st.date_input("Data de Nascimento", max_value=date.today())
            sexo = st.selectbox("Sexo", ["", "Feminino", "Masculino"])
        
        with col2:
            email = st.text_input("Email")
            telefone = st.text_input("Telefone")
            profissao = st.text_input("Profiss√£o")
        
        # Endere√ßo
        endereco = st.text_area("Endere√ßo Completo")
        
        # Dados nutricionais
        st.markdown("##### üéØ Dados Nutricionais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            objetivo = st.selectbox("Objetivo Principal", [
                "", "Perda de Peso", "Ganho de Peso", "Manuten√ß√£o",
                "Ganho de Massa Muscular", "Melhora da Sa√∫de",
                "Controle de Doen√ßa", "Performance Esportiva"
            ])
            
            restricoes = st.multiselect("Restri√ß√µes Alimentares", [
                "Diabetes", "Hipertens√£o", "Colesterol Alto", "Intoler√¢ncia √† Lactose",
                "Doen√ßa Cel√≠aca", "Vegetariano", "Vegano", "Alergia a Frutos do Mar",
                "Alergia a Oleaginosas", "Refluxo", "Gastrite", "Outras"
            ])
        
        with col2:
            historico_medico = st.text_area("Hist√≥rico M√©dico", 
                placeholder="Doen√ßas, cirurgias, condi√ß√µes m√©dicas relevantes...")
            
            medicamentos = st.text_area("Medicamentos em Uso",
                placeholder="Liste todos os medicamentos que o paciente usa...")
        
        # Avalia√ß√£o inicial
        st.markdown("##### ‚öñÔ∏è Avalia√ß√£o Antropom√©trica Inicial")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            peso_inicial = st.number_input("Peso Inicial (kg)", 0.0, 300.0, 0.0, step=0.1)
            altura = st.number_input("Altura (cm)", 0.0, 250.0, 0.0, step=0.5)
        
        with col2:
            circ_cintura = st.number_input("Circunfer√™ncia da Cintura (cm)", 0.0, 200.0, 0.0, step=0.5)
            circ_quadril = st.number_input("Circunfer√™ncia do Quadril (cm)", 0.0, 200.0, 0.0, step=0.5)
        
        with col3:
            perc_gordura = st.number_input("% Gordura Corporal", 0.0, 50.0, 0.0, step=0.1)
            massa_muscular = st.number_input("Massa Muscular (kg)", 0.0, 100.0, 0.0, step=0.1)
        
        # Observa√ß√µes
        observacoes = st.text_area("Observa√ß√µes Gerais",
            placeholder="Informa√ß√µes adicionais relevantes...")
        
        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("üíæ Cadastrar Paciente", use_container_width=True)
        
        if submitted:
            if not nome:
                st.error("‚ùå Nome √© obrigat√≥rio!")
                return
            
            try:
                conn = db_manager.get_connection()
                cursor = conn.cursor()
                
                paciente_uuid = str(uuid.uuid4())
                restricoes_str = ", ".join(restricoes) if restricoes else ""
                
                # Inserir paciente
                cursor.execute('''
                INSERT INTO pacientes (
                    uuid, nutricionista_id, nome, email, telefone, data_nascimento,
                    sexo, profissao, endereco, objetivo, restricoes_alimentares,
                    historico_medico, medicamentos
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    paciente_uuid, user['id'], nome, email, telefone, data_nascimento,
                    sexo, profissao, endereco, objetivo, restricoes_str,
                    historico_medico, medicamentos
                ))
                
                paciente_id = cursor.lastrowid
                
                # Inserir avalia√ß√£o inicial se fornecida
                if peso_inicial > 0 and altura > 0:
                    imc = peso_inicial / ((altura/100) ** 2)
                    
                    cursor.execute('''
                    INSERT INTO avaliacoes (
                        paciente_id, data_avaliacao, peso, altura, imc,
                        circunferencia_cintura, circunferencia_quadril,
                        percentual_gordura, massa_muscular, observacoes
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        paciente_id, date.today(), peso_inicial, altura/100, imc,
                        circ_cintura, circ_quadril, perc_gordura, massa_muscular,
                        observacoes
                    ))
                
                conn.commit()
                
                st.success("‚úÖ Paciente cadastrado com sucesso!")
                
                # Mostrar resumo do cadastro
                col1, col2 = st.columns(2)
                
                with col1:
                    st.info(f"üë§ **Nome:** {nome}")
                    if data_nascimento:
                        idade = calculate_age(data_nascimento)
                        st.info(f"üìÖ **Idade:** {idade} anos")
                    if objetivo:
                        st.info(f"üéØ **Objetivo:** {objetivo}")
                
                with col2:
                    if peso_inicial > 0 and altura > 0:
                        st.info(f"‚öñÔ∏è **Peso:** {peso_inicial} kg")
                        st.info(f"üìè **Altura:** {altura} cm")
                        st.info(f"üßÆ **IMC:** {imc:.1f}")
                
                time.sleep(2)
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao atualizar perfil: {str(e)}")

def show_system_settings(user):
    st.markdown('<div class="sub-header">üîß Configura√ß√µes do Sistema</div>', unsafe_allow_html=True)
    
    # Configura√ß√µes de notifica√ß√µes
    st.markdown("##### üì± Notifica√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        notif_email = st.checkbox("üìß Notifica√ß√µes por Email", value=True)
        notif_consulta = st.checkbox("üìÖ Lembrete de Consultas", value=True)
        notif_aniversario = st.checkbox("üéÇ Anivers√°rio de Pacientes", value=False)
    
    with col2:
        notif_relatorio = st.checkbox("üìä Relat√≥rios Autom√°ticos", value=False)
        notif_backup = st.checkbox("üíæ Notifica√ß√µes de Backup", value=True)
        notif_sistema = st.checkbox("üîß Atualiza√ß√µes do Sistema", value=True)
    
    # Configura√ß√µes de interface
    st.markdown("##### üé® Interface")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        tema = st.selectbox("üé® Tema", ["Verde Nutri√ß√£o", "Azul Cl√≠nico", "Roxo Moderno"])
    
    with col2:
        idioma = st.selectbox("üåê Idioma", ["Portugu√™s (BR)", "Ingl√™s", "Espanhol"])
    
    with col3:
        timezone = st.selectbox("üïê Fuso Hor√°rio", ["GMT-3 (Bras√≠lia)", "GMT-2", "GMT-4"])
    
    # Configura√ß√µes de dados
    st.markdown("##### üìä Dados e Privacidade")
    
    col1, col2 = st.columns(2)
    
    with col1:
        backup_auto = st.checkbox("üîÑ Backup Autom√°tico", value=True)
        if backup_auto:
            backup_freq = st.selectbox("Frequ√™ncia", ["Di√°rio", "Semanal", "Mensal"])
    
    with col2:
        anonimizar_dados = st.checkbox("üîí Anonimizar Dados em Relat√≥rios", value=False)
        compartilhar_analytics = st.checkbox("üìà Compartilhar Analytics", value=False)
    
    if st.button("üíæ Salvar Configura√ß√µes do Sistema", use_container_width=True):
        # Aqui salvaria as configura√ß√µes no banco
        st.success("‚úÖ Configura√ß√µes do sistema salvas!")

def show_backup_settings(user):
    st.markdown('<div class="sub-header">üíæ Backup e Restaura√ß√£o</div>', unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("##### üì§ Backup")
        
        backup_incluir = st.multiselect("Incluir no Backup:", [
            "Dados dos Pacientes",
            "Consultas e Agendamentos", 
            "Planos Alimentares",
            "Receitas",
            "Configura√ß√µes",
            "Relat√≥rios"
        ], default=["Dados dos Pacientes", "Consultas e Agendamentos", "Planos Alimentares"])
        
        formato_backup = st.selectbox("Formato do Backup", ["JSON", "CSV", "SQL"])
        
        if st.button("üì§ Fazer Backup Agora", use_container_width=True):
            with st.spinner("üíæ Gerando backup..."):
                time.sleep(3)  # Simula processamento
            
            st.success("‚úÖ Backup realizado com sucesso!")
            st.download_button(
                label="üì• Download Backup",
                data=f"backup_nutriapp360_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                file_name=f"backup_nutriapp360_{datetime.now().strftime('%Y%m%d_%H%M')}.json",
                mime="application/json"
            )
    
    with col2:
        st.markdown("##### üì• Restaura√ß√£o")
        
        arquivo_restaurar = st.file_uploader("Selecionar arquivo de backup", 
                                           type=['json', 'csv', 'sql'])
        
        if arquivo_restaurar:
            st.warning("‚ö†Ô∏è A restaura√ß√£o substituir√° os dados atuais!")
            
            confirmar_restauracao = st.checkbox("Confirmo que desejo restaurar os dados")
            
            if confirmar_restauracao and st.button("üîÑ Restaurar Dados"):
                with st.spinner("üîÑ Restaurando dados..."):
                    time.sleep(3)  # Simula processamento
                
                st.success("‚úÖ Dados restaurados com sucesso!")
    
    # Hist√≥rico de backups
    st.markdown("##### üìã Hist√≥rico de Backups")
    
    backups_simulados = [
        {"data": "2024-01-15 09:30", "tamanho": "2.3 MB", "status": "‚úÖ Sucesso"},
        {"data": "2024-01-14 09:30", "tamanho": "2.1 MB", "status": "‚úÖ Sucesso"},
        {"data": "2024-01-13 09:30", "tamanho": "2.0 MB", "status": "‚úÖ Sucesso"},
    ]
    
    for backup in backups_simulados:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.text(backup["data"])
        with col2:
            st.text(backup["tamanho"])
        with col3:
            st.text(backup["status"])

# =============================================================================
# üß† SISTEMA DE NAVEGA√á√ÉO PRINCIPAL
# =============================================================================

def show_sidebar(user):
    """Sidebar com navega√ß√£o principal"""
    
    with st.sidebar:
        st.markdown(f"""
        <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #E8F5E8, #C8E6C9); border-radius: 10px; margin-bottom: 1rem;">
            <h3 style="color: #2E7D32; margin: 0;">ü•ó NutriApp360</h3>
            <p style="margin: 0; color: #666;">v10.0 Sistema Completo</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown(f"""
        <div style="text-align: center; padding: 0.5rem; background: #f8f9fa; border-radius: 8px; margin-bottom: 1rem;">
            <strong>üë§ {user['nome']}</strong><br>
            <small>{user['email']}</small><br>
            <small>üè• {user['coren']}</small>
        </div>
        """, unsafe_allow_html=True)
        
        # Menu principal
        st.markdown("### üìã Menu Principal")
        
        menu_options = {
            "üè† Dashboard": "dashboard",
            "üë• Gest√£o de Pacientes": "gestao_pacientes",
            "üßÆ Calculadoras": "calculadoras",
            "üçΩÔ∏è Planos Alimentares": "planos_alimentares",
            "üìÖ Agenda": "agenda",
            "üç≥ Receitas": "receitas",
            "üìä Relat√≥rios": "relatorios",
            "‚öôÔ∏è Configura√ß√µes": "configuracoes"
        }
        
        # Inicializar p√°gina ativa se n√£o existir
        if 'active_page' not in st.session_state:
            st.session_state.active_page = 'dashboard'
        
        # Bot√µes do menu
        for label, page_id in menu_options.items():
            if st.button(label, key=f"menu_{page_id}", use_container_width=True):
                st.session_state.active_page = page_id
                st.rerun()
        
        st.markdown("---")
        
        # Informa√ß√µes do sistema
        st.markdown("### üìä Sistema")
        
        # Status do banco de dados
        try:
            conn = db_manager.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM usuarios")
            total_usuarios = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM pacientes WHERE ativo = 1")
            total_pacientes = cursor.fetchone()[0]
            conn.close()
            
            st.success(f"‚úÖ Sistema Operacional")
            st.info(f"üë• {total_usuarios} usu√°rios")
            st.info(f"üè• {total_pacientes} pacientes ativos")
            
        except Exception as e:
            st.error("‚ùå Erro na conex√£o")
        
        st.markdown("---")
        
        # Bot√£o de logout
        if st.button("üö™ Logout", use_container_width=True):
            st.session_state.logged_in = False
            st.session_state.user = None
            st.session_state.active_page = 'dashboard'
            st.rerun()
        
        st.markdown("---")
        
        # Informa√ß√µes do desenvolvedor
        st.markdown("""
        <div style="text-align: center; font-size: 0.8rem; color: #666;">
            <p><strong>NutriApp360</strong><br>
            Sistema Completo v10.0<br>
            Desenvolvido com ‚ù§Ô∏è<br>
            ¬© 2024 NutriApp360</p>
        </div>
        """, unsafe_allow_html=True)

def show_main_content(user):
    """Conte√∫do principal baseado na p√°gina ativa"""
    
    page = st.session_state.get('active_page', 'dashboard')
    
    if page == 'dashboard':
        show_dashboard(user)
    elif page == 'gestao_pacientes':
        show_gestao_pacientes(user)
    elif page == 'calculadoras':
        show_calculadoras(user)
    elif page == 'planos_alimentares':
        show_planos_alimentares(user)
    elif page == 'agenda':
        show_agenda(user)
    elif page == 'receitas':
        show_receitas(user)
    elif page == 'relatorios':
        show_relatorios(user)
    elif page == 'configuracoes':
        show_configuracoes(user)
    else:
        show_dashboard(user)

def show_meal_plan_details(plano):
    """Mostra detalhes do plano alimentar"""
    st.markdown(f"### üìã Detalhes: {plano[4]}")  # nome do plano
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown(f"**üéØ Objetivo:** {plano[5] or 'N/E'}")
        st.markdown(f"**üìÖ Criado:** {plano[8]}")
        if plano[9]:
            st.markdown(f"**‚è∞ V√°lido at√©:** {plano[9]}")
    
    with col2:
        if plano[6]:  # calorias_totais
            st.markdown(f"**üî• Calorias:** {plano[6]} kcal")
        if plano[7]:  # carboidratos
            st.markdown(f"**üçû Carboidratos:** {plano[7]:.1f}g")
        if plano[8]:  # proteinas 
            st.markdown(f"**ü•© Prote√≠nas:** {plano[8]:.1f}g")
    
    with col3:
        if plano[9]:  # lipidios
            st.markdown(f"**ü•ë Lip√≠dios:** {plano[9]:.1f}g")
        if plano[13]:  # ia_otimizado
            st.success("ü§ñ Otimizado por IA")
        if plano[14]:  # score_aderencia
            st.markdown(f"**üìä Ader√™ncia:** {plano[14]:.1f}%")
    
    # Refei√ß√µes detalhadas
    if plano[10]:  # refeicoes
        try:
            refeicoes = json.loads(plano[10])
            
            st.markdown("##### üçΩÔ∏è Plano de Refei√ß√µes")
            
            for nome_refeicao, dados in refeicoes.items():
                with st.expander(f"üçΩÔ∏è {nome_refeicao}", expanded=True):
                    if isinstance(dados, dict):
                        if 'alimentos' in dados:
                            for alimento in dados['alimentos']:
                                st.markdown(f"‚Ä¢ {alimento}")
                        if 'calorias' in dados:
                            st.markdown(f"**Calorias:** {dados['calorias']} kcal")
                    else:
                        st.markdown(str(dados))
        except:
            st.warning("‚ö†Ô∏è Erro ao carregar detalhes das refei√ß√µes")
    
    # Observa√ß√µes
    if plano[11]:  # observacoes
        st.markdown("##### üìù Observa√ß√µes")
        st.markdown(plano[11])

# =============================================================================
# üöÄ FUN√á√ÉO PRINCIPAL
# =============================================================================

def main():
    """Fun√ß√£o principal do aplicativo"""
    
    load_css()
    
    # Inicializar estado da sess√£o
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    
    if 'user' not in st.session_state:
        st.session_state.user = None
    
    if 'show_register' not in st.session_state:
        st.session_state.show_register = False
    
    # Verificar login
    if not st.session_state.logged_in:
        if st.session_state.show_register:
            show_register()
        else:
            show_login()
    else:
        # Interface principal para usu√°rios logados
        user = st.session_state.user
        
        # Layout principal com sidebar
        show_sidebar(user)
        
        # Conte√∫do principal
        show_main_content(user)

# =============================================================================
# üéØ FUNCIONALIDADES EXTRAS E UTILIT√ÅRIOS
# =============================================================================

def export_patient_data(patient_id, format='json'):
    """Exporta dados completos de um paciente"""
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    try:
        # Dados do paciente
        cursor.execute("SELECT * FROM pacientes WHERE id = ?", (patient_id,))
        paciente = cursor.fetchone()
        
        # Avalia√ß√µes
        cursor.execute("SELECT * FROM avaliacoes WHERE paciente_id = ?", (patient_id,))
        avaliacoes = cursor.fetchall()
        
        # Planos alimentares
        cursor.execute("SELECT * FROM planos_alimentares WHERE paciente_id = ?", (patient_id,))
        planos = cursor.fetchall()
        
        # Consultas
        cursor.execute("SELECT * FROM consultas WHERE paciente_id = ?", (patient_id,))
        consultas = cursor.fetchall()
        
        data = {
            'paciente': paciente,
            'avaliacoes': avaliacoes,
            'planos_alimentares': planos,
            'consultas': consultas,
            'exported_at': datetime.now().isoformat()
        }
        
        if format == 'json':
            return json.dumps(data, default=str, indent=2)
        
    except Exception as e:
        st.error(f"Erro ao exportar dados: {str(e)}")
        return None
    finally:
        conn.close()

def generate_patient_qr_code(patient_uuid):
    """Gera QR code para acesso r√°pido aos dados do paciente"""
    try:
        import qrcode
        from PIL import Image
        
        # URL fict√≠cia para o paciente
        patient_url = f"https://nutriapp360.com/patient/{patient_uuid}"
        
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(patient_url)
        qr.make(fit=True)
        
        img = qr.make_image(fill_color="black", back_color="white")
        
        # Converter para base64 para exibi√ß√£o
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()
        
        return img_str
    except ImportError:
        st.warning("‚ö†Ô∏è Instale 'qrcode' e 'pillow' para gerar QR codes")
        return None

def calculate_nutrition_score(carboidratos_perc, proteinas_perc, lipidios_perc):
    """Calcula score nutricional baseado na distribui√ß√£o de macronutrientes"""
    score = 0
    
    # Faixas ideais (podem ser ajustadas conforme diretrizes)
    if 45 <= carboidratos_perc <= 65:
        score += 40
    elif 35 <= carboidratos_perc <= 75:
        score += 20
    
    if 10 <= proteinas_perc <= 35:
        score += 35
    elif 8 <= proteinas_perc <= 40:
        score += 15
    
    if 20 <= lipidios_perc <= 35:
        score += 25
    elif 15 <= lipidios_perc <= 40:
        score += 10
    
    return min(score, 100)

def get_nutrition_recommendations(imc, idade, sexo, objetivo):
    """Gera recomenda√ß√µes nutricionais personalizadas"""
    recomendacoes = []
    
    # Baseado no IMC
    if imc < 18.5:
        recomendacoes.append("üî∫ Considere aumentar a ingest√£o cal√≥rica gradualmente")
        recomendacoes.append("üí™ Inclua mais prote√≠nas para ganho de massa muscular")
    elif imc > 25:
        recomendacoes.append("üîª Considere d√©ficit cal√≥rico moderado para perda de peso")
        recomendacoes.append("ü•ó Aumente o consumo de vegetais e fibras")
    
    # Baseado na idade
    if idade > 60:
        recomendacoes.append("ü¶¥ Aumente a ingest√£o de c√°lcio e vitamina D")
        recomendacoes.append("üíä Considere suplementa√ß√£o de B12")
    elif idade < 30:
        recomendacoes.append("‚ö° Mantenha boa ingest√£o de ferro e folato")
    
    # Baseado no sexo
    if sexo.lower() == 'feminino':
        recomendacoes.append("ü©∏ Aten√ß√£o especial ao ferro (especialmente se menstrua)")
        recomendacoes.append("ü§∞ Considere necessidades de folato")
    
    # Baseado no objetivo
    if 'perda' in objetivo.lower():
        recomendacoes.append("‚öñÔ∏è Mantenha d√©ficit cal√≥rico de 300-500 kcal/dia")
        recomendacoes.append("üö∂‚Äç‚ôÄÔ∏è Combine com atividade f√≠sica regular")
    elif 'ganho' in objetivo.lower():
        recomendacoes.append("üìà Aumente calorias em 300-500 kcal/dia")
        recomendacoes.append("üèãÔ∏è‚Äç‚ôÇÔ∏è Combine com treino de resist√™ncia")
    
    return recomendacoes

def validate_meal_plan_nutrition(calorias, carb_g, prot_g, lip_g, fibras_g=None):
    """Valida se o plano alimentar est√° nutricionalmente adequado"""
    issues = []
    warnings = []
    
    # Calcular percentuais
    total_calorias_macro = (carb_g * 4) + (prot_g * 4) + (lip_g * 9)
    
    if abs(total_calorias_macro - calorias) > (calorias * 0.1):  # 10% de toler√¢ncia
        issues.append(f"‚ö†Ô∏è Discrep√¢ncia entre calorias totais ({calorias}) e macronutrientes ({total_calorias_macro:.0f})")
    
    carb_perc = (carb_g * 4 / calorias) * 100
    prot_perc = (prot_g * 4 / calorias) * 100  
    lip_perc = (lip_g * 9 / calorias) * 100
    
    # Validar percentuais
    if carb_perc < 45:
        warnings.append(f"üçû Carboidratos baixos ({carb_perc:.1f}% - recomendado: 45-65%)")
    elif carb_perc > 65:
        warnings.append(f"üçû Carboidratos altos ({carb_perc:.1f}% - recomendado: 45-65%)")
    
    if prot_perc < 10:
        issues.append(f"ü•© Prote√≠nas insuficientes ({prot_perc:.1f}% - m√≠nimo: 10%)")
    elif prot_perc > 35:
        warnings.append(f"ü•© Prote√≠nas excessivas ({prot_perc:.1f}% - recomendado: 10-35%)")
    
    if lip_perc < 20:
        warnings.append(f"ü•ë Lip√≠dios baixos ({lip_perc:.1f}% - recomendado: 20-35%)")
    elif lip_perc > 35:
        warnings.append(f"ü•ë Lip√≠dios altos ({lip_perc:.1f}% - recomendado: 20-35%)")
    
    # Validar fibras se fornecido
    if fibras_g is not None:
        fibras_recomendadas = 14 * (calorias / 1000)  # 14g por 1000 kcal
        if fibras_g < fibras_recomendadas * 0.7:
            warnings.append(f"üåæ Fibras insuficientes ({fibras_g:.1f}g - recomendado: {fibras_recomendadas:.0f}g)")
    
    return {
        'valid': len(issues) == 0,
        'issues': issues,
        'warnings': warnings,
        'nutrition_score': calculate_nutrition_score(carb_perc, prot_perc, lip_perc)
    }

# =============================================================================
# üì± FUNCIONALIDADES MOBILE E RESPONSIVIDADE
# =============================================================================

def check_mobile_device():
    """Verifica se o usu√°rio est√° em dispositivo m√≥vel"""
    # Esta fun√ß√£o seria implementada com JavaScript
    # Por ora, retorna False (assumindo desktop)
    return False

def show_mobile_menu(user):
    """Menu otimizado para dispositivos m√≥veis"""
    if check_mobile_device():
        st.markdown("üì± **Menu Mobile**")
        
        with st.expander("üìã Menu Principal"):
            show_sidebar(user)

# =============================================================================
# üîß FUN√á√ïES DE MANUTEN√á√ÉO E DEBUG
# =============================================================================

def system_health_check():
    """Verifica a sa√∫de do sistema"""
    health_status = {
        'database': False,
        'tables': False,
        'data_integrity': False,
        'permissions': False
    }
    
    try:
        # Verificar conex√£o com banco
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        health_status['database'] = True
        
        # Verificar tabelas principais
        tables = ['usuarios', 'pacientes', 'consultas', 'planos_alimentares', 'receitas']
        for table in tables:
            cursor.execute(f"SELECT COUNT(*) FROM {table}")
            cursor.fetchone()
        health_status['tables'] = True
        
        # Verificar integridade b√°sica dos dados
        cursor.execute("""
        SELECT COUNT(*) FROM pacientes p 
        LEFT JOIN usuarios u ON p.nutricionista_id = u.id 
        WHERE u.id IS NULL
        """)
        orphaned = cursor.fetchone()[0]
        health_status['data_integrity'] = orphaned == 0
        
        health_status['permissions'] = True  # Assumindo que est√° OK
        
        conn.close()
        
    except Exception as e:
        print(f"Health check error: {e}")
    
    return health_status

def cleanup_old_data():
    """Limpa dados antigos do sistema"""
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        
        # Limpar consultas canceladas antigas (> 1 ano)
        cursor.execute("""
        DELETE FROM consultas 
        WHERE status = 'cancelada' 
        AND data_consulta < date('now', '-1 year')
        """)
        
        # Limpar planos inativos antigos (> 2 anos)
        cursor.execute("""
        DELETE FROM planos_alimentares 
        WHERE ativo = 0 
        AND data_criacao < date('now', '-2 years')
        """)
        
        conn.commit()
        conn.close()
        
        return True
    except Exception as e:
        print(f"Cleanup error: {e}")
        return False

# =============================================================================
# üéØ PONTO DE ENTRADA DO APLICATIVO
# =============================================================================

if __name__ == "__main__":
    # Verifica√ß√£o de sa√∫de do sistema (opcional)
    if st.sidebar.button("üîß System Health Check", key="health_check"):
        health = system_health_check()
        for component, status in health.items():
            if status:
                st.sidebar.success(f"‚úÖ {component}")
            else:
                st.sidebar.error(f"‚ùå {component}")
    
    # Executar aplica√ß√£o principal
    main()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao cadastrar paciente: {str(e)}")
            finally:
                conn.close()

def show_patient_report(user):
    st.markdown('<div class="sub-header">üìä Relat√≥rio Individual</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Selecionar paciente
    cursor.execute("""
    SELECT id, nome FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    ORDER BY nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    
    if not pacientes:
        st.warning("‚ö†Ô∏è Nenhum paciente cadastrado.")
        return
    
    paciente_selecionado = st.selectbox(
        "üë§ Selecione o Paciente",
        options=pacientes,
        format_func=lambda x: x[1],
        key="paciente_relatorio"
    )
    
    if paciente_selecionado:
        paciente_id = paciente_selecionado[0]
        
        # Buscar dados completos do paciente
        cursor.execute("SELECT * FROM pacientes WHERE id = ?", (paciente_id,))
        paciente = cursor.fetchone()
        
        # Buscar avalia√ß√µes
        cursor.execute("""
        SELECT * FROM avaliacoes 
        WHERE paciente_id = ?
        ORDER BY data_avaliacao DESC
        """, (paciente_id,))
        avaliacoes = cursor.fetchall()
        
        # Buscar planos alimentares
        cursor.execute("""
        SELECT * FROM planos_alimentares 
        WHERE paciente_id = ? AND ativo = 1
        """, (paciente_id,))
        planos = cursor.fetchall()
        
        # Buscar consultas
        cursor.execute("""
        SELECT * FROM consultas 
        WHERE paciente_id = ?
        ORDER BY data_consulta DESC
        """, (paciente_id,))
        consultas = cursor.fetchall()
        
        conn.close()
        
        # Exibir relat√≥rio
        st.markdown(f"### üìã Relat√≥rio Completo - {paciente[3]}")
        
        # Dados pessoais
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("**üë§ Dados Pessoais:**")
            if paciente[6]:  # data_nascimento
                idade = calculate_age(paciente[6])
                st.markdown(f"‚Ä¢ **Idade:** {idade} anos")
            st.markdown(f"‚Ä¢ **Sexo:** {paciente[7] or 'N/I'}")
            st.markdown(f"‚Ä¢ **Profiss√£o:** {paciente[8] or 'N/I'}")
            st.markdown(f"‚Ä¢ **Email:** {paciente[4] or 'N/I'}")
            st.markdown(f"‚Ä¢ **Telefone:** {paciente[5] or 'N/I'}")
        
        with col2:
            st.markdown("**üéØ Dados Nutricionais:**")
            st.markdown(f"‚Ä¢ **Objetivo:** {paciente[10] or 'N/D'}")
            st.markdown(f"‚Ä¢ **Restri√ß√µes:** {paciente[11] or 'Nenhuma'}")
            st.markdown(f"‚Ä¢ **Hist√≥rico M√©dico:** {paciente[12] or 'N/I'}")
            st.markdown(f"‚Ä¢ **Medicamentos:** {paciente[13] or 'Nenhum'}")
        
        with col3:
            st.markdown("**üìä Estat√≠sticas:**")
            st.markdown(f"‚Ä¢ **Avalia√ß√µes:** {len(avaliacoes)}")
            st.markdown(f"‚Ä¢ **Planos Ativos:** {len(planos)}")
            st.markdown(f"‚Ä¢ **Consultas:** {len(consultas)}")
            st.markdown(f"‚Ä¢ **Cadastro:** {paciente[14]}")
        
        # √öltima avalia√ß√£o
        if avaliacoes:
            st.markdown("##### üìè √öltima Avalia√ß√£o Antropom√©trica")
            
            ultima = avaliacoes[0]
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("‚öñÔ∏è Peso", f"{ultima[3]:.1f} kg" if ultima[3] else "N/I")
            
            with col2:
                st.metric("üìè Altura", f"{ultima[4]*100:.0f} cm" if ultima[4] else "N/I")
            
            with col3:
                st.metric("üßÆ IMC", f"{ultima[5]:.1f}" if ultima[5] else "N/I")
            
            with col4:
                st.metric("üìä % Gordura", f"{ultima[8]:.1f}%" if ultima[8] else "N/I")
        
        # Evolu√ß√£o do peso
        if len(avaliacoes) > 1:
            st.markdown("##### üìà Evolu√ß√£o do Peso")
            
            df_evolucao = pd.DataFrame([
                {
                    'Data': avaliacao[2],
                    'Peso': avaliacao[3],
                    'IMC': avaliacao[5]
                }
                for avaliacao in reversed(avaliacoes) if avaliacao[3]
            ])
            
            if not df_evolucao.empty:
                fig_peso = px.line(
                    df_evolucao, x='Data', y='Peso',
                    title='Evolu√ß√£o do Peso',
                    markers=True
                )
                st.plotly_chart(fig_peso, use_container_width=True)

def show_patient_evolution(user):
    st.markdown('<div class="sub-header">üìà Evolu√ß√£o dos Pacientes</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Selecionar paciente
    cursor.execute("""
    SELECT id, nome FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    ORDER BY nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    
    if not pacientes:
        st.warning("‚ö†Ô∏è Nenhum paciente cadastrado.")
        return
    
    paciente_selecionado = st.selectbox(
        "üë§ Selecione o Paciente",
        options=pacientes,
        format_func=lambda x: x[1],
        key="paciente_evolucao"
    )
    
    if paciente_selecionado:
        paciente_id = paciente_selecionado[0]
        
        # Buscar todas as avalia√ß√µes
        cursor.execute("""
        SELECT * FROM avaliacoes 
        WHERE paciente_id = ?
        ORDER BY data_avaliacao
        """, (paciente_id,))
        avaliacoes = cursor.fetchall()
        
        conn.close()
        
        if len(avaliacoes) < 2:
            st.info("üìä √â necess√°rio pelo menos 2 avalia√ß√µes para mostrar evolu√ß√£o.")
            return
        
        # Preparar dados para gr√°ficos
        df_evolucao = pd.DataFrame([
            {
                'Data': avaliacao[2],
                'Peso': avaliacao[3],
                'IMC': avaliacao[5],
                'Cintura': avaliacao[6],
                'Quadril': avaliacao[7],
                'Gordura': avaliacao[8],
                'Massa_Muscular': avaliacao[9]
            }
            for avaliacao in avaliacoes
        ])
        
        # Gr√°ficos de evolu√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            if df_evolucao['Peso'].notna().any():
                fig_peso = px.line(
                    df_evolucao.dropna(subset=['Peso']), 
                    x='Data', y='Peso',
                    title='üìà Evolu√ß√£o do Peso',
                    markers=True
                )
                st.plotly_chart(fig_peso, use_container_width=True)
        
        with col2:
            if df_evolucao['IMC'].notna().any():
                fig_imc = px.line(
                    df_evolucao.dropna(subset=['IMC']), 
                    x='Data', y='IMC',
                    title='üìä Evolu√ß√£o do IMC',
                    markers=True
                )
                st.plotly_chart(fig_imc, use_container_width=True)
        
        # Compara√ß√£o primeira vs √∫ltima avalia√ß√£o
        if len(avaliacoes) >= 2:
            st.markdown("##### üîÑ Compara√ß√£o: Primeira vs √öltima Avalia√ß√£o")
            
            primeira = avaliacoes[0]
            ultima = avaliacoes[-1]
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if primeira[3] and ultima[3]:  # peso
                    diff_peso = ultima[3] - primeira[3]
                    st.metric(
                        "‚öñÔ∏è Peso", 
                        f"{ultima[3]:.1f} kg",
                        f"{diff_peso:+.1f} kg"
                    )
            
            with col2:
                if primeira[5] and ultima[5]:  # IMC
                    diff_imc = ultima[5] - primeira[5]
                    st.metric(
                        "üßÆ IMC", 
                        f"{ultima[5]:.1f}",
                        f"{diff_imc:+.1f}"
                    )
            
            with col3:
                if primeira[6] and ultima[6]:  # cintura
                    diff_cintura = ultima[6] - primeira[6]
                    st.metric(
                        "üìê Cintura", 
                        f"{ultima[6]:.1f} cm",
                        f"{diff_cintura:+.1f} cm"
                    )
            
            with col4:
                if primeira[8] and ultima[8]:  # gordura
                    diff_gordura = ultima[8] - primeira[8]
                    st.metric(
                        "üìä % Gordura", 
                        f"{ultima[8]:.1f}%",
                        f"{diff_gordura:+.1f}%"
                    )

# =============================================================================
# üçΩÔ∏è SISTEMA DE PLANOS ALIMENTARES
# =============================================================================

def show_planos_alimentares(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üçΩÔ∏è Planos Alimentares</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìã Planos Ativos",
        "‚ûï Criar Plano",
        "ü§ñ IA Personalizadora",
        "üìä An√°lise Nutricional"
    ])
    
    with tab1:
        show_active_meal_plans(user)
    
    with tab2:
        show_create_meal_plan(user)
    
    with tab3:
        show_ai_meal_planner(user)
    
    with tab4:
        show_nutritional_analysis(user)

def show_active_meal_plans(user):
    st.markdown('<div class="sub-header">üìã Planos Alimentares Ativos</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT pa.*, p.nome as paciente_nome
    FROM planos_alimentares pa
    JOIN pacientes p ON pa.paciente_id = p.id
    WHERE pa.nutricionista_id = ? AND pa.ativo = 1
    ORDER BY pa.data_criacao DESC
    """, (user['id'],))
    
    planos = cursor.fetchall()
    conn.close()
    
    if not planos:
        st.info("üìù Nenhum plano alimentar ativo encontrado.")
        return
    
    for plano in planos:
        with st.expander(f"üçΩÔ∏è {plano[4]} - {plano[-1]}", expanded=False):  # nome do plano e paciente
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"**üë§ Paciente:** {plano[-1]}")
                st.markdown(f"**üéØ Objetivo:** {plano[5] or 'N√£o especificado'}")
                st.markdown(f"**üìÖ Criado:** {plano[8]}")
                if plano[9]:  # data_validade
                    st.markdown(f"**‚è∞ V√°lido at√©:** {plano[9]}")
            
            with col2:
                if plano[6]:  # calorias_totais
                    st.markdown(f"**üî• Calorias:** {plano[6]} kcal/dia")
                if plano[7]:  # carboidratos
                    st.markdown(f"**üçû Carboidratos:** {plano[7]:.1f}g")
                if plano[8]:  # proteinas
                    st.markdown(f"**ü•© Prote√≠nas:** {plano[8]:.1f}g")
                if plano[9]:  # lipidios
                    st.markdown(f"**ü•ë Lip√≠dios:** {plano[9]:.1f}g")
            
            with col3:
                if plano[13]:  # ia_otimizado
                    st.success("ü§ñ Otimizado por IA")
                
                if plano[14]:  # score_aderencia
                    st.markdown(f"**üìä Ader√™ncia:** {plano[14]:.1f}%")
                
                # Bot√µes de a√ß√£o
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    if st.button("üìÑ Ver Detalhes", key=f"details_plano_{plano[0]}"):
                        show_meal_plan_details(plano)
                
                with col_btn2:
                    if st.button("üìù Editar", key=f"edit_plano_{plano[0]}"):
                        st.session_state.editing_plan = plano[0]
                        st.rerun()

def show_create_meal_plan(user):
    st.markdown('<div class="sub-header">‚ûï Criar Novo Plano Alimentar</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Buscar pacientes
    cursor.execute("""
    SELECT id, nome FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    ORDER BY nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    
    if not pacientes:
        st.warning("‚ö†Ô∏è Cadastre pacientes antes de criar planos alimentares.")
        return
    
    with st.form("novo_plano_form"):
        
        # Dados b√°sicos
        st.markdown("##### üìã Informa√ß√µes B√°sicas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            paciente_selecionado = st.selectbox(
                "üë§ Paciente",
                options=pacientes,
                format_func=lambda x: x[1]
            )
            
            nome_plano = st.text_input("üìù Nome do Plano", placeholder="Ex: Plano Emagrecimento Janeiro")
        
        with col2:
            objetivo = st.selectbox("üéØ Objetivo", [
                "Perda de Peso", "Ganho de Peso", "Manuten√ß√£o", 
                "Ganho de Massa Muscular", "Defini√ß√£o", "Sa√∫de Geral"
            ])
            
            data_validade = st.date_input("üìÖ V√°lido at√©", 
                value=date.today() + timedelta(days=30))
        
        # Par√¢metros nutricionais
        st.markdown("##### üßÆ Par√¢metros Nutricionais")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            calorias_totais = st.number_input("üî• Calorias Totais/dia", 1000, 5000, 2000, step=50)
        
        with col2:
            perc_carb = st.slider("üçû Carboidratos (%)", 10, 70, 50)
        
        with col3:
            perc_prot = st.slider("ü•© Prote√≠nas (%)", 10, 40, 20)
        
        with col4:
            perc_lip = 100 - perc_carb - perc_prot
            st.metric("ü•ë Lip√≠dios (%)", perc_lip)
        
        # Calcular gramas
        carb_g = (calorias_totais * perc_carb / 100) / 4
        prot_g = (calorias_totais * perc_prot / 100) / 4
        lip_g = (calorias_totais * perc_lip / 100) / 9
        
        # Refei√ß√µes
        st.markdown("##### üçΩÔ∏è Plano de Refei√ß√µes")
        
        refeicoes = {}
        refeicoes_nomes = ['Caf√© da Manh√£', 'Lanche da Manh√£', 'Almo√ßo', 'Lanche da Tarde', 'Jantar', 'Ceia']
        
        for refeicao in refeicoes_nomes:
            with st.expander(f"üçΩÔ∏è {refeicao}"):
                alimentos = st.text_area(
                    f"Alimentos para {refeicao}",
                    placeholder="Liste os alimentos, quantidades e preparos...",
                    key=f"alimentos_{refeicao.replace(' ', '_')}"
                )
                
                if alimentos:
                    refeicoes[refeicao] = {
                        'alimentos': alimentos.split('\n'),
                        'calorias': int(calorias_totais / 6)  # Distribui√ß√£o aproximada
                    }
        
        # Observa√ß√µes
        observacoes = st.text_area("üìù Observa√ß√µes e Orienta√ß√µes", 
            placeholder="Orienta√ß√µes gerais, substitui√ß√µes, hor√°rios...")
        
        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("üíæ Criar Plano Alimentar", use_container_width=True)
        
        if submitted:
            if not nome_plano:
                st.error("‚ùå Nome do plano √© obrigat√≥rio!")
                return
            
            try:
                plano_uuid = str(uuid.uuid4())
                
                cursor.execute('''
                INSERT INTO planos_alimentares (
                    uuid, paciente_id, nutricionista_id, nome, objetivo,
                    calorias_totais, carboidratos, proteinas, lipidios,
                    data_criacao, data_validade, refeicoes, observacoes
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    plano_uuid, paciente_selecionado[0], user['id'], nome_plano, objetivo,
                    calorias_totais, carb_g, prot_g, lip_g,
                    date.today(), data_validade, json.dumps(refeicoes), observacoes
                ))
                
                conn.commit()
                
                st.success("‚úÖ Plano alimentar criado com sucesso!")
                time.sleep(2)
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao criar plano: {str(e)}")
            finally:
                conn.close()

def show_ai_meal_planner(user):
    st.markdown('<div class="sub-header">ü§ñ IA Personalizadora de Planos</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Sele√ß√£o de paciente
    cursor.execute("""
    SELECT id, nome FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    ORDER BY nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    
    if not pacientes:
        st.warning("‚ö†Ô∏è Cadastre pacientes para usar a IA.")
        return
    
    paciente_selecionado = st.selectbox(
        "üë§ Selecione o Paciente",
        options=pacientes,
        format_func=lambda x: x[1]
    )
    
    # Par√¢metros para IA
    st.markdown("##### üéØ Par√¢metros para a IA")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        objetivo_ia = st.selectbox("üéØ Objetivo Principal", [
            "Perda de Peso Saud√°vel", "Ganho de Massa Muscular", "Manuten√ß√£o",
            "Defini√ß√£o Corporal", "Sa√∫de Cardiovascular", "Controle Diab√©tico"
        ])
        
        nivel_atividade = st.selectbox("üèÉ N√≠vel de Atividade", [
            "Sedent√°rio", "Levemente Ativo", "Moderadamente Ativo", 
            "Muito Ativo", "Extremamente Ativo"
        ])
    
    with col2:
        restricoes_alimentares = st.multiselect("üö´ Restri√ß√µes", [
            "Vegetariano", "Vegano", "Sem Lactose", "Sem Gl√∫ten",
            "Low Carb", "Cetog√™nica", "Sem A√ß√∫car"
        ])
        
        preferencias = st.multiselect("‚ù§Ô∏è Prefer√™ncias", [
            "Comida Caseira", "Praticidade", "Baixo Custo", "Gourmet",
            "Org√¢nicos", "Funcionais", "Regionais"
        ])
    
    with col3:
        tempo_preparo = st.selectbox("‚è±Ô∏è Tempo de Preparo", [
            "At√© 15 min", "At√© 30 min", "At√© 60 min", "Mais de 60 min"
        ])
        
        orcamento = st.selectbox("üí∞ Or√ßamento", [
            "Econ√¥mico", "Moderado", "Sem Restri√ß√£o"
        ])
    
    # Buscar dados do paciente para IA
    cursor.execute("SELECT * FROM pacientes WHERE id = ?", (paciente_selecionado[0],))
    paciente_dados = cursor.fetchone()
    
    # Buscar √∫ltima avalia√ß√£o
    cursor.execute("""
    SELECT * FROM avaliacoes 
    WHERE paciente_id = ? 
    ORDER BY data_avaliacao DESC 
    LIMIT 1
    """, (paciente_selecionado[0],))
    ultima_avaliacao = cursor.fetchone()
    
    conn.close()
    
    # Mostrar dados considerados pela IA
    if ultima_avaliacao:
        st.markdown("##### üìä Dados Considerados pela IA")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("‚öñÔ∏è Peso", f"{ultima_avaliacao[3]:.1f} kg" if ultima_avaliacao[3] else "N/I")
        
        with col2:
            st.metric("üìè Altura", f"{ultima_avaliacao[4]*100:.0f} cm" if ultima_avaliacao[4] else "N/I")
        
        with col3:
            st.metric("üßÆ IMC", f"{ultima_avaliacao[5]:.1f}" if ultima_avaliacao[5] else "N/I")
        
        with col4:
            if paciente_dados[6]:  # data_nascimento
                idade = calculate_age(paciente_dados[6])
                st.metric("üìÖ Idade", f"{idade} anos")
    
    # Bot√£o para gerar plano com IA
    if st.button("ü§ñ Gerar Plano com IA", use_container_width=True):
        
        with st.spinner("ü§ñ IA analisando dados e criando plano personalizado..."):
            
            progress_bar = st.progress(0)
            
            etapas_ia = [
                "Analisando perfil do paciente...",
                "Calculando necessidades nutricionais...",
                "Selecionando alimentos compat√≠veis...",
                "Otimizando distribui√ß√£o de macronutrientes...",
                "Criando cronograma de refei√ß√µes...",
                "Ajustando por prefer√™ncias e restri√ß√µes...",
                "Gerando orienta√ß√µes personalizadas...",
                "Finalizando plano alimentar..."
            ]
            
            for i, etapa in enumerate(etapas_ia):
                st.text(f"ü§ñ {etapa}")
                time.sleep(0.5)
                progress_bar.progress((i + 1) / len(etapas_ia))
            
            progress_bar.empty()
        
        st.success("‚úÖ Plano alimentar personalizado criado com sucesso!")
        
        # Simular plano gerado pela IA
        if ultima_avaliacao and ultima_avaliacao[3]:  # peso
            peso = ultima_avaliacao[3]
            if paciente_dados[6]:
                idade = calculate_age(paciente_dados[6])
                altura = ultima_avaliacao[4] * 100 if ultima_avaliacao[4] else 165
                sexo = paciente_dados[7] or "Feminino"
                
                # Calcular necessidades cal√≥ricas
                tmb = calculate_bmr(peso, altura, idade, sexo)
                
                fator_atividade = {
                    "Sedent√°rio": 1.2,
                    "Levemente Ativo": 1.375,
                    "Moderadamente Ativo": 1.55,
                    "Muito Ativo": 1.725,
                    "Extremamente Ativo": 1.9
                }.get(nivel_atividade, 1.55)
                
                calorias_alvo = tmb * fator_atividade
                
                # Ajustar por objetivo
                if objetivo_ia == "Perda de Peso Saud√°vel":
                    calorias_alvo *= 0.85
                    carb_perc, prot_perc, lip_perc = 40, 30, 30
                elif objetivo_ia == "Ganho de Massa Muscular":
                    calorias_alvo *= 1.15
                    carb_perc, prot_perc, lip_perc = 45, 25, 30
                else:  # Manuten√ß√£o
                    carb_perc, prot_perc, lip_perc = 50, 20, 30
                
                # Exibir plano gerado
                st.markdown("##### ü§ñ Plano Gerado pela IA")
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("üî• Calorias/dia", f"{calorias_alvo:.0f} kcal")
                
                with col2:
                    carb_g = (calorias_alvo * carb_perc / 100) / 4
                    st.metric("üçû Carboidratos", f"{carb_g:.0f}g")
                
                with col3:
                    prot_g = (calorias_alvo * prot_perc / 100) / 4
                    st.metric("ü•© Prote√≠nas", f"{prot_g:.0f}g")
                
                with col4:
                    lip_g = (calorias_alvo * lip_perc / 100) / 9
                    st.metric("ü•ë Lip√≠dios", f"{lip_g:.0f}g")
                
                # Card√°pio exemplo gerado pela IA
                st.markdown("##### üìã Exemplo de Card√°pio (Dia 1)")
                
                cardapio_exemplo = {
                    "Caf√© da Manh√£": [
                        "1 fatia de p√£o integral",
                        "2 col. sopa de abacate amassado",
                        "1 ovo mexido",
                        "200ml de leite desnatado"
                    ],
                    "Lanche da Manh√£": [
                        "1 ma√ß√£ m√©dia",
                        "10 castanhas do Par√°"
                    ],
                    "Almo√ßo": [
                        "120g de peito de frango grelhado",
                        "150g de arroz integral cozido",
                        "100g de br√≥colis refogado",
                        "Salada verde √† vontade"
                    ],
                    "Lanche da Tarde": [
                        "1 iogurte grego natural",
                        "1 col. sopa de granola"
                    ],
                    "Jantar": [
                        "150g de salm√£o assado",
                        "100g de batata doce cozida",
                        "Legumes grelhados variados"
                    ]
                }
                
                for refeicao, alimentos in cardapio_exemplo.items():
                    with st.expander(f"üçΩÔ∏è {refeicao}", expanded=True):
                        for alimento in alimentos:
                            st.markdown(f"‚Ä¢ {alimento}")
        
        # Op√ß√£o de salvar o plano
        if st.button("üíæ Salvar Plano Gerado"):
            st.success("‚úÖ Plano salvo com sucesso!")

def show_nutritional_analysis(user):
    st.markdown('<div class="sub-header">üìä An√°lise Nutricional</div>', unsafe_allow_html=True)
    
    st.info("üîç Selecione um plano alimentar para an√°lise detalhada.")
    
    # Esta funcionalidade seria implementada com an√°lise detalhada dos planos
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT pa.id, pa.nome, p.nome as paciente_nome
    FROM planos_alimentares pa
    JOIN pacientes p ON pa.paciente_id = p.id
    WHERE pa.nutricionista_id = ? AND pa.ativo = 1
    """, (user['id'],))
    
    planos = cursor.fetchall()
    conn.close()
    
    if planos:
        plano_selecionado = st.selectbox(
            "üìã Selecione o Plano",
            options=planos,
            format_func=lambda x: f"{x[1]} - {x[2]}"
        )
        
        if plano_selecionado:
            st.markdown(f"##### üìä An√°lise: {plano_selecionado[1]}")
            
            # Aqui seria implementada a an√°lise detalhada
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üéØ Adequa√ß√£o Nutricional:**")
                st.success("‚úÖ Distribui√ß√£o de macronutrientes adequada")
                st.success("‚úÖ Valor cal√≥rico apropriado")
                st.warning("‚ö†Ô∏è Verificar ingest√£o de fibras")
                
            with col2:
                st.markdown("**üí° Recomenda√ß√µes:**")
                st.info("‚Ä¢ Incluir mais fontes de omega-3")
                st.info("‚Ä¢ Aumentar variedade de vegetais")
                st.info("‚Ä¢ Considerar suplementa√ß√£o de vitamina D")

# =============================================================================
# üìÖ SISTEMA DE AGENDA
# =============================================================================

def show_agenda(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üìÖ Sistema de Agenda</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìÖ Calendario",
        "‚ûï Nova Consulta",
        "üë• Consultas Hoje",
        "üìä Relat√≥rios"
    ])
    
    with tab1:
        show_calendar(user)
    
    with tab2:
        show_new_appointment(user)
    
    with tab3:
        show_today_appointments(user)
    
    with tab4:
        show_appointment_reports(user)

def show_calendar(user):
    st.markdown('<div class="sub-header">üìÖ Visualiza√ß√£o da Agenda</div>', unsafe_allow_html=True)
    
    # Sele√ß√£o de data
    col1, col2 = st.columns(2)
    
    with col1:
        data_selecionada = st.date_input("üìÖ Data", value=date.today())
    
    with col2:
        visualizacao = st.selectbox("üëÅÔ∏è Visualiza√ß√£o", ["Dia", "Semana", "M√™s"])
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    if visualizacao == "Dia":
        # Consultas do dia
        cursor.execute("""
        SELECT c.*, p.nome as paciente_nome
        FROM consultas c
        JOIN pacientes p ON c.paciente_id = p.id
        WHERE c.nutricionista_id = ? AND DATE(c.data_consulta) = ?
        ORDER BY TIME(c.data_consulta)
        """, (user['id'], data_selecionada))
        
        consultas = cursor.fetchall()
        
        st.markdown(f"##### üìÖ Agenda de {data_selecionada.strftime('%d/%m/%Y')}")
        
        if not consultas:
            st.info("üìù Nenhuma consulta agendada para este dia.")
        else:
            for consulta in consultas:
                hora = datetime.strptime(consulta[4], '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
                
                with st.container():
                    col1, col2, col3 = st.columns([2, 3, 2])
                    
                    with col1:
                        st.markdown(f"**üïê {hora}**")
                    
                    with col2:
                        st.markdown(f"**üë§ {consulta[-1]}**")
                        st.markdown(f"üìã {consulta[5]} | üìä {consulta[6].title()}")
                    
                    with col3:
                        status_color = {
                            'agendada': 'üîµ',
                            'confirmada': 'üü¢', 
                            'realizada': 'üü£',
                            'cancelada': 'üî¥'
                        }.get(consulta[6], '‚ö™')
                        
                        st.markdown(f"{status_color} **{consulta[6].title()}**")
                
                st.markdown("---")
    
    conn.close()

def show_new_appointment(user):
    st.markdown('<div class="sub-header">‚ûï Agendar Nova Consulta</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Buscar pacientes
    cursor.execute("""
    SELECT id, nome, telefone FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    ORDER BY nome
    """, (user['id'],))
    
    pacientes = cursor.fetchall()
    
    if not pacientes:
        st.warning("‚ö†Ô∏è Cadastre pacientes antes de agendar consultas.")
        return
    
    with st.form("nova_consulta_form"):
        
        st.markdown("##### üìã Dados da Consulta")
        
        col1, col2 = st.columns(2)
        
        with col1:
            paciente_selecionado = st.selectbox(
                "üë§ Paciente",
                options=pacientes,
                format_func=lambda x: f"{x[1]} ({x[2] or 'Sem telefone'})"
            )
            
            tipo_consulta = st.selectbox("üîç Tipo", [
                "Primeira Consulta",
                "Consulta de Retorno", 
                "Reavalia√ß√£o",
                "Orienta√ß√£o Nutricional",
                "Teleconsulta"
            ])
        
        with col2:
            data_consulta = st.date_input("üìÖ Data", min_value=date.today())
            hora_consulta = st.time_input("üïê Hor√°rio", value=datetime.now().replace(hour=9, minute=0).time())
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            duracao = st.selectbox("‚è±Ô∏è Dura√ß√£o", [30, 45, 60, 90], index=2)
        
        with col2:
            valor = st.number_input("üí∞ Valor (R$)", 0.0, 1000.0, 150.0, step=10.0)
        
        with col3:
            status = st.selectbox("üìä Status", ["agendada", "confirmada"])
        
        observacoes = st.text_area("üìù Observa√ß√µes")
        
        submitted = st.form_submit_button("üìÖ Agendar Consulta", use_container_width=True)
        
        if submitted:
            try:
                consulta_uuid = str(uuid.uuid4())
                datetime_consulta = datetime.combine(data_consulta, hora_consulta)
                
                cursor.execute('''
                INSERT INTO consultas (
                    uuid, paciente_id, nutricionista_id, data_consulta, 
                    tipo_consulta, status, duracao, valor, observacoes
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    consulta_uuid, paciente_selecionado[0], user['id'], datetime_consulta,
                    tipo_consulta, status, duracao, valor, observacoes
                ))
                
                conn.commit()
                
                st.success("‚úÖ Consulta agendada com sucesso!")
                time.sleep(2)
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao agendar: {str(e)}")
    
    conn.close()

def show_today_appointments(user):
    st.markdown('<div class="sub-header">üë• Consultas de Hoje</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    hoje = date.today()
    
    cursor.execute("""
    SELECT c.*, p.nome as paciente_nome, p.telefone
    FROM consultas c
    JOIN pacientes p ON c.paciente_id = p.id
    WHERE c.nutricionista_id = ? AND DATE(c.data_consulta) = ?
    ORDER BY TIME(c.data_consulta)
    """, (user['id'], hoje))
    
    consultas_hoje = cursor.fetchall()
    
    if not consultas_hoje:
        st.info(f"üìù Nenhuma consulta para hoje ({hoje.strftime('%d/%m/%Y')}).")
        return
    
    # Estat√≠sticas do dia
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìã Total", len(consultas_hoje))
    
    with col2:
        realizadas = len([c for c in consultas_hoje if c[6] == 'realizada'])
        st.metric("‚úÖ Realizadas", realizadas)
    
    with col3:
        faturamento = sum([c[8] or 0 for c in consultas_hoje if c[6] != 'cancelada'])
        st.metric("üí∞ Faturamento", f"R$ {faturamento:.2f}")
    
    with col4:
        # Pr√≥xima consulta
        agora = datetime.now()
        proxima = None
        for consulta in consultas_hoje:
            hora_consulta = datetime.strptime(consulta[4], '%Y-%m-%d %H:%M:%S')
            if hora_consulta > agora and consulta[6] not in ['realizada', 'cancelada']:
                proxima = hora_consulta.strftime('%H:%M')
                break
        
        st.metric("‚è∞ Pr√≥xima", proxima or "---")
    
    # Lista de consultas
    for consulta in consultas_hoje:
        hora = datetime.strptime(consulta[4], '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
        
        with st.expander(f"üïê {hora} - {consulta[-2]} ({consulta[6].upper()})", 
                        expanded=(consulta[6] in ['agendada', 'confirmada'])):
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.markdown(f"**üë§ Paciente:** {consulta[-2]}")
                st.markdown(f"**üì± Telefone:** {consulta[-1] or 'N/I'}")
            
            with col2:
                st.markdown(f"**üîç Tipo:** {consulta[5]}")
                st.markdown(f"**‚è±Ô∏è Dura√ß√£o:** {consulta[7]} min")
            
            with col3:
                st.markdown(f"**üí∞ Valor:** R$ {consulta[8] or 0:.2f}")
                st.markdown(f"**üìä Status:** {consulta[6].title()}")
            
            if consulta[9]:  # observacoes
                st.markdown(f"**üìù Obs:** {consulta[9]}")
            
            # Bot√µes de a√ß√£o
            if consulta[6] in ['agendada', 'confirmada']:
                col_btn1, col_btn2, col_btn3 = st.columns(3)
                
                with col_btn1:
                    if st.button("‚úÖ Confirmar", key=f"confirm_{consulta[0]}"):
                        update_consultation_status(consulta[0], 'confirmada')
                        st.rerun()
                
                with col_btn2:
                    if st.button("üèÅ Realizada", key=f"done_{consulta[0]}"):
                        update_consultation_status(consulta[0], 'realizada')
                        st.rerun()
                
                with col_btn3:
                    if st.button("‚ùå Cancelar", key=f"cancel_{consulta[0]}"):
                        update_consultation_status(consulta[0], 'cancelada')
                        st.rerun()
    
    conn.close()

def update_consultation_status(consulta_id, novo_status):
    """Atualiza status da consulta"""
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("UPDATE consultas SET status = ? WHERE id = ?", (novo_status, consulta_id))
    conn.commit()
    conn.close()

def show_appointment_reports(user):
    st.markdown('<div class="sub-header">üìä Relat√≥rios de Consultas</div>', unsafe_allow_html=True)
    
    # Per√≠odo
    col1, col2 = st.columns(2)
    
    with col1:
        data_inicio = st.date_input("üìÖ Data In√≠cio", value=date.today() - timedelta(days=30))
    
    with col2:
        data_fim = st.date_input("üìÖ Data Fim", value=date.today())
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT c.*, p.nome as paciente_nome
    FROM consultas c
    JOIN pacientes p ON c.paciente_id = p.id
    WHERE c.nutricionista_id = ? 
    AND DATE(c.data_consulta) BETWEEN ? AND ?
    """, (user['id'], data_inicio, data_fim))
    
    consultas = cursor.fetchall()
    conn.close()
    
    if not consultas:
        st.info("üìù Nenhuma consulta no per√≠odo selecionado.")
        return
    
    # M√©tricas
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìã Total", len(consultas))
    
    with col2:
        realizadas = len([c for c in consultas if c[6] == 'realizada'])
        st.metric("‚úÖ Realizadas", realizadas)
    
    with col3:
        faturamento = sum([c[8] or 0 for c in consultas if c[6] == 'realizada'])
        st.metric("üí∞ Faturamento", f"R$ {faturamento:.2f}")
    
    with col4:
        if realizadas > 0:
            ticket_medio = faturamento / realizadas
            st.metric("üéØ Ticket M√©dio", f"R$ {ticket_medio:.2f}")
    
    # Gr√°ficos
    col1, col2 = st.columns(2)
    
    with col1:
        # Status das consultas
        status_counts = {}
        for consulta in consultas:
            status = consulta[6]
            status_counts[status] = status_counts.get(status, 0) + 1
        
        if status_counts:
            fig_status = px.pie(
                values=list(status_counts.values()),
                names=list(status_counts.keys()),
                title="Consultas por Status"
            )
            st.plotly_chart(fig_status, use_container_width=True)
    
    with col2:
        # Tipos de consulta
        tipo_counts = {}
        for consulta in consultas:
            tipo = consulta[5]
            tipo_counts[tipo] = tipo_counts.get(tipo, 0) + 1
        
        if tipo_counts:
            fig_tipos = px.bar(
                x=list(tipo_counts.keys()),
                y=list(tipo_counts.values()),
                title="Consultas por Tipo"
            )
            st.plotly_chart(fig_tipos, use_container_width=True)

# =============================================================================
# üç≥ SISTEMA DE RECEITAS
# =============================================================================

def show_receitas(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üç≥ Sistema de Receitas</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs([
        "üç≥ Minhas Receitas",
        "‚ûï Nova Receita",
        "üîç Buscar Receitas"
    ])
    
    with tab1:
        show_my_recipes(user)
    
    with tab2:
        show_new_recipe(user)
    
    with tab3:
        show_search_recipes(user)

def show_my_recipes(user):
    st.markdown('<div class="sub-header">üç≥ Minhas Receitas</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    cursor.execute("""
    SELECT * FROM receitas
    WHERE criada_por = ?
    ORDER BY data_criacao DESC
    """, (user['id'],))
    
    receitas = cursor.fetchall()
    conn.close()
    
    if not receitas:
        st.info("üìù Nenhuma receita criada ainda.")
        return
    
    for receita in receitas:
        with st.expander(f"üç≥ {receita[2]} ({receita[3]})", expanded=False):
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìã Ingredientes:**")
                if receita[4]:  # ingredientes
                    ingredientes = receita[4].split('\n')
                    for ingrediente in ingredientes:
                        st.markdown(f"‚Ä¢ {ingrediente}")
                
                st.markdown(f"**‚è±Ô∏è Tempo:** {receita[6] or 'N/I'} min")
                st.markdown(f"**üë• Por√ß√µes:** {receita[7] or 'N/I'}")
            
            with col2:
                st.markdown("**üë®‚Äçüç≥ Modo de Preparo:**")
                if receita[5]:  # modo_preparo
                    st.markdown(receita[5])
                
                # Informa√ß√µes nutricionais
                if receita[8]:  # calorias_porcao
                    st.markdown("**üìä Informa√ß√µes Nutricionais (por por√ß√£o):**")
                    st.markdown(f"‚Ä¢ **Calorias:** {receita[8]:.0f} kcal")
                    if receita[9]:  # carboidratos
                        st.markdown(f"‚Ä¢ **Carboidratos:** {receita[9]:.1f}g")
                    if receita[10]:  # proteinas
                        st.markdown(f"‚Ä¢ **Prote√≠nas:** {receita[10]:.1f}g")
                    if receita[11]:  # lipidios
                        st.markdown(f"‚Ä¢ **Lip√≠dios:** {receita[11]:.1f}g")

def show_new_recipe(user):
    st.markdown('<div class="sub-header">‚ûï Criar Nova Receita</div>', unsafe_allow_html=True)
    
    with st.form("nova_receita_form"):
        
        # Informa√ß√µes b√°sicas
        st.markdown("##### üìã Informa√ß√µes B√°sicas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("üç≥ Nome da Receita *")
            categoria = st.selectbox("üìÇ Categoria", [
                "Caf√© da Manh√£", "Almo√ßo", "Jantar", "Lanche", "Sobremesa",
                "Bebida", "Salada", "Sopa", "Vegano/Vegetariano", "Low Carb",
                "Sem Gl√∫ten", "Sem Lactose", "Fitness", "Infantil"
            ])
        
        with col2:
            tempo_preparo = st.number_input("‚è±Ô∏è Tempo de Preparo (min)", 1, 300, 30)
            porcoes = st.number_input("üë• N√∫mero de Por√ß√µes", 1, 20, 4)
        
        # Ingredientes
        st.markdown("##### üìù Ingredientes")
        ingredientes = st.text_area(
            "Liste os ingredientes (um por linha)",
            placeholder="Ex:\n200g de peito de frango\n1 x√≠cara de arroz integral\n2 colheres de azeite\n...",
            height=150
        )
        
        # Modo de preparo
        st.markdown("##### üë®‚Äçüç≥ Modo de Preparo")
        modo_preparo = st.text_area(
            "Descreva o passo a passo",
            placeholder="1. Tempere o frango com sal e pimenta\n2. Aque√ßa o azeite na panela\n3. ...",
            height=200
        )
        
        # Informa√ß√µes nutricionais
        st.markdown("##### üìä Informa√ß√µes Nutricionais (por por√ß√£o)")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            calorias = st.number_input("üî• Calorias", 0.0, 2000.0, 0.0, step=1.0)
        
        with col2:
            carboidratos = st.number_input("üçû Carboidratos (g)", 0.0, 200.0, 0.0, step=0.1)
        
        with col3:
            proteinas = st.number_input("ü•© Prote√≠nas (g)", 0.0, 100.0, 0.0, step=0.1)
        
        with col4:
            lipidios = st.number_input("ü•ë Lip√≠dios (g)", 0.0, 100.0, 0.0, step=0.1)
        
        with col5:
            fibras = st.number_input("üåæ Fibras (g)", 0.0, 50.0, 0.0, step=0.1)
        
        # Configura√ß√µes
        col1, col2 = st.columns(2)
        
        with col1:
            publica = st.checkbox("üåê Receita P√∫blica (outros nutricionistas podem ver)")
        
        # Bot√£o de submiss√£o
        submitted = st.form_submit_button("üíæ Salvar Receita", use_container_width=True)
        
        if submitted:
            if not nome:
                st.error("‚ùå Nome da receita √© obrigat√≥rio!")
                return
            
            try:
                conn = db_manager.get_connection()
                cursor = conn.cursor()
                
                receita_uuid = str(uuid.uuid4())
                
                cursor.execute('''
                INSERT INTO receitas (
                    uuid, nome, categoria, ingredientes, modo_preparo,
                    tempo_preparo, porcoes, calorias_porcao, carboidratos,
                    proteinas, lipidios, fibras, criada_por, publica
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    receita_uuid, nome, categoria, ingredientes, modo_preparo,
                    tempo_preparo, porcoes, calorias, carboidratos,
                    proteinas, lipidios, fibras, user['id'], int(publica)
                ))
                
                conn.commit()
                conn.close()
                
                st.success("‚úÖ Receita salva com sucesso!")
                time.sleep(2)
                st.rerun()
                
            except Exception as e:
                st.error(f"‚ùå Erro ao salvar receita: {str(e)}")

def show_search_recipes(user):
    st.markdown('<div class="sub-header">üîç Buscar Receitas</div>', unsafe_allow_html=True)
    
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtro_nome = st.text_input("üîç Nome da receita")
    
    with col2:
        filtro_categoria = st.selectbox("üìÇ Categoria", [
            "Todas", "Caf√© da Manh√£", "Almo√ßo", "Jantar", "Lanche", "Sobremesa",
            "Bebida", "Salada", "Sopa", "Vegano/Vegetariano", "Low Carb"
        ])
    
    with col3:
        filtro_origem = st.selectbox("üë§ Origem", ["Todas", "Minhas Receitas", "Receitas P√∫blicas"])
    
    # Buscar receitas
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    query = "SELECT r.*, u.nome as criador FROM receitas r JOIN usuarios u ON r.criada_por = u.id WHERE 1=1"
    params = []
    
    if filtro_nome:
        query += " AND r.nome LIKE ?"
        params.append(f"%{filtro_nome}%")
    
    if filtro_categoria != "Todas":
        query += " AND r.categoria = ?"
        params.append(filtro_categoria)
    
    if filtro_origem == "Minhas Receitas":
        query += " AND r.criada_por = ?"
        params.append(user['id'])
    elif filtro_origem == "Receitas P√∫blicas":
        query += " AND (r.publica = 1 OR r.criada_por = ?)"
        params.append(user['id'])
    
    query += " ORDER BY r.data_criacao DESC"
    
    cursor.execute(query, params)
    receitas = cursor.fetchall()
    conn.close()
    
    if not receitas:
        st.info("üìù Nenhuma receita encontrada com os filtros aplicados.")
        return
    
    # Exibir receitas encontradas
    st.markdown(f"##### üîç {len(receitas)} receita(s) encontrada(s)")
    
    for receita in receitas:
        with st.expander(f"üç≥ {receita[2]} - {receita[3]} (por {receita[-1]})", expanded=False):
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìã Ingredientes:**")
                if receita[4]:
                    for ingrediente in receita[4].split('\n'):
                        if ingrediente.strip():
                            st.markdown(f"‚Ä¢ {ingrediente}")
                
                st.markdown(f"**‚è±Ô∏è Tempo:** {receita[6] or 'N/I'} min")
                st.markdown(f"**üë• Por√ß√µes:** {receita[7] or 'N/I'}")
            
            with col2:
                st.markdown("**üë®‚Äçüç≥ Modo de Preparo:**")
                st.markdown(receita[5] or "N√£o informado")
                
                if receita[8]:  # calorias
                    st.markdown("**üìä Por por√ß√£o:**")
                    st.markdown(f"üî• {receita[8]:.0f} kcal | üçû {receita[9]:.1f}g C | ü•© {receita[10]:.1f}g P | ü•ë {receita[11]:.1f}g L")

# =============================================================================
# üìä SISTEMA DE RELAT√ìRIOS
# =============================================================================

def show_relatorios(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">üìä Sistema de Relat√≥rios</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìà Dashboard Analytics",
        "üë• Relat√≥rio de Pacientes",
        "üí∞ Relat√≥rio Financeiro",
        "üìã Relat√≥rio de Ader√™ncia"
    ])
    
    with tab1:
        show_analytics_dashboard(user)
    
    with tab2:
        show_patients_report(user)
    
    with tab3:
        show_financial_report(user)
    
    with tab4:
        show_adherence_report(user)

def show_analytics_dashboard(user):
    st.markdown('<div class="sub-header">üìà Dashboard Analytics</div>', unsafe_allow_html=True)
    
    # Per√≠odo de an√°lise
    col1, col2 = st.columns(2)
    
    with col1:
        data_inicio = st.date_input("üìÖ In√≠cio", value=date.today() - timedelta(days=90))
    
    with col2:
        data_fim = st.date_input("üìÖ Fim", value=date.today())
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # M√©tricas principais
    st.markdown("##### üìä M√©tricas Principais")
    
    # Total de pacientes
    cursor.execute("SELECT COUNT(*) FROM pacientes WHERE nutricionista_id = ? AND ativo = 1", (user['id'],))
    total_pacientes = cursor.fetchone()[0]
    
    # Consultas no per√≠odo
    cursor.execute("""
    SELECT COUNT(*), COUNT(CASE WHEN status = 'realizada' THEN 1 END) as realizadas,
           SUM(CASE WHEN status = 'realizada' THEN valor ELSE 0 END) as faturamento
    FROM consultas 
    WHERE nutricionista_id = ? AND DATE(data_consulta) BETWEEN ? AND ?
    """, (user['id'], data_inicio, data_fim))
    
    consultas_dados = cursor.fetchone()
    total_consultas = consultas_dados[0] if consultas_dados[0] else 0
    realizadas = consultas_dados[1] if consultas_dados[1] else 0
    faturamento = consultas_dados[2] if consultas_dados[2] else 0
    
    # Planos ativos
    cursor.execute("SELECT COUNT(*) FROM planos_alimentares WHERE nutricionista_id = ? AND ativo = 1", (user['id'],))
    planos_ativos = cursor.fetchone()[0]
    
    # Receitas criadas
    cursor.execute("SELECT COUNT(*) FROM receitas WHERE criada_por = ?", (user['id'],))
    receitas = cursor.fetchone()[0]
    
    # Exibir m√©tricas
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üë• Pacientes", total_pacientes)
    
    with col2:
        st.metric("üìÖ Consultas", total_consultas)
    
    with col3:
        st.metric("‚úÖ Realizadas", realizadas)
    
    with col4:
        st.metric("üí∞ Faturamento", f"R$ {faturamento:.2f}")
    
    with col5:
        taxa_realizacao = (realizadas / total_consultas * 100) if total_consultas > 0 else 0
        st.metric("üìä Taxa Realiza√ß√£o", f"{taxa_realizacao:.1f}%")
    
    # Gr√°ficos de an√°lise
    col1, col2 = st.columns(2)
    
    with col1:
        # Evolu√ß√£o de consultas realizadas por m√™s
        cursor.execute("""
        SELECT strftime('%Y-%m', data_consulta) as mes, COUNT(*) as total
        FROM consultas
        WHERE nutricionista_id = ? AND status = 'realizada'
        AND DATE(data_consulta) BETWEEN ? AND ?
        GROUP BY strftime('%Y-%m', data_consulta)
        ORDER BY mes
        """, (user['id'], data_inicio, data_fim))
        
        dados_mes = cursor.fetchall()
        
        if dados_mes:
            df_mes = pd.DataFrame(dados_mes, columns=['M√™s', 'Consultas'])
            fig_evolucao = px.line(df_mes, x='M√™s', y='Consultas', 
                                 title='üìà Evolu√ß√£o de Consultas por M√™s', markers=True)
            st.plotly_chart(fig_evolucao, use_container_width=True)
    
    with col2:
        # Distribui√ß√£o de tipos de consulta
        cursor.execute("""
        SELECT tipo_consulta, COUNT(*) as total
        FROM consultas
        WHERE nutricionista_id = ? AND status = 'realizada'
        AND DATE(data_consulta) BETWEEN ? AND ?
        GROUP BY tipo_consulta
        """, (user['id'], data_inicio, data_fim))
        
        tipos_consulta = cursor.fetchall()
        
        if tipos_consulta:
            df_tipos = pd.DataFrame(tipos_consulta, columns=['Tipo', 'Quantidade'])
            fig_tipos = px.pie(df_tipos, values='Quantidade', names='Tipo',
                              title='üìä Distribui√ß√£o por Tipo de Consulta')
            st.plotly_chart(fig_tipos, use_container_width=True)
    
    conn.close()

def show_patients_report(user):
    st.markdown('<div class="sub-header">üë• Relat√≥rio de Pacientes</div>', unsafe_allow_html=True)
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Estat√≠sticas gerais dos pacientes
    cursor.execute("""
    SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN sexo = 'Feminino' THEN 1 END) as feminino,
        COUNT(CASE WHEN sexo = 'Masculino' THEN 1 END) as masculino,
        COUNT(CASE WHEN objetivo LIKE '%Perda%' THEN 1 END) as perda_peso,
        COUNT(CASE WHEN objetivo LIKE '%Ganho%' THEN 1 END) as ganho_peso
    FROM pacientes 
    WHERE nutricionista_id = ? AND ativo = 1
    """, (user['id'],))
    
    stats = cursor.fetchone()
    
    if stats[0] == 0:
        st.info("üìù Nenhum paciente cadastrado.")
        return
    
    # Exibir estat√≠sticas
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üë• Total", stats[0])
    
    with col2:
        st.metric("üë© Feminino", stats[1])
    
    with col3:
        st.metric("üë® Masculino", stats[2])
    
    with col4:
        st.metric("‚¨áÔ∏è Perda Peso", stats[3])
    
    with col5:
        st.metric("‚¨ÜÔ∏è Ganho Peso", stats[4])
    
    # Distribui√ß√£o por faixa et√°ria
    cursor.execute("""
    SELECT p.*, 
           (julianday('now') - julianday(p.data_nascimento)) / 365.25 as idade
    FROM pacientes p
    WHERE p.nutricionista_id = ? AND p.ativo = 1 AND p.data_nascimento IS NOT NULL
    """, (user['id'],))
    
    pacientes_idade = cursor.fetchall()
    
    if pacientes_idade:
        # Classificar por faixa et√°ria
        faixas = {'18-30': 0, '31-50': 0, '51-70': 0, '70+': 0}
        
        for paciente in pacientes_idade:
            idade = int(paciente[-1])  # idade calculada
            if 18 <= idade <= 30:
                faixas['18-30'] += 1
            elif 31 <= idade <= 50:
                faixas['31-50'] += 1
            elif 51 <= idade <= 70:
                faixas['51-70'] += 1
            elif idade > 70:
                faixas['70+'] += 1
        
        # Gr√°fico de faixa et√°ria
        col1, col2 = st.columns(2)
        
        with col1:
            fig_idade = px.bar(
                x=list(faixas.keys()),
                y=list(faixas.values()),
                title="üë• Distribui√ß√£o por Faixa Et√°ria"
            )
            st.plotly_chart(fig_idade, use_container_width=True)
        
        with col2:
            # Objetivos mais comuns
            cursor.execute("""
            SELECT objetivo, COUNT(*) as total
            FROM pacientes
            WHERE nutricionista_id = ? AND ativo = 1 AND objetivo IS NOT NULL
            GROUP BY objetivo
            ORDER BY total DESC
            """, (user['id'],))
            
            objetivos = cursor.fetchall()
            
            if objetivos:
                df_obj = pd.DataFrame(objetivos, columns=['Objetivo', 'Quantidade'])
                fig_obj = px.pie(df_obj, values='Quantidade', names='Objetivo',
                               title='üéØ Objetivos Principais')
                st.plotly_chart(fig_obj, use_container_width=True)
    
    conn.close()

def show_financial_report(user):
    st.markdown('<div class="sub-header">üí∞ Relat√≥rio Financeiro</div>', unsafe_allow_html=True)
    
    # Per√≠odo
    col1, col2 = st.columns(2)
    
    with col1:
        data_inicio = st.date_input("üìÖ In√≠cio", value=date.today().replace(day=1))
    
    with col2:
        data_fim = st.date_input("üìÖ Fim", value=date.today())
    
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    
    # Dados financeiros
    cursor.execute("""
    SELECT 
        COUNT(*) as total_consultas,
        COUNT(CASE WHEN status = 'realizada' THEN 1 END) as realizadas,
        COUNT(CASE WHEN status = 'cancelada' THEN 1 END) as canceladas,
        SUM(CASE WHEN status = 'realizada' THEN valor ELSE 0 END) as faturamento,
        AVG(CASE WHEN status = 'realizada' THEN valor ELSE NULL END) as ticket_medio
    FROM consultas
    WHERE nutricionista_id = ? AND DATE(data_consulta) BETWEEN ? AND ?
    """, (user['id'], data_inicio, data_fim))
    
    financeiro = cursor.fetchone()
    
    if not financeiro or financeiro[0] == 0:
        st.info("üí∞ Nenhuma movimenta√ß√£o financeira no per√≠odo.")
        return
    
    # M√©tricas financeiras
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric("üìã Consultas", financeiro[0])
    
    with col2:
        st.metric("‚úÖ Realizadas", financeiro[1])
    
    with col3:
        taxa_cancelamento = (financeiro[2] / financeiro[0] * 100) if financeiro[0] > 0 else 0
        st.metric("‚ùå Canceladas", f"{financeiro[2]} ({taxa_cancelamento:.1f}%)")
    
    with col4:
        st.metric("üí∞ Faturamento", f"R$ {financeiro[3] or 0:.2f}")
    
    with col5:
        st.metric("üéØ Ticket M√©dio", f"R$ {financeiro[4] or 0:.2f}")
    
    # Faturamento por dia
    cursor.execute("""
    SELECT DATE(data_consulta) as dia, SUM(valor) as faturamento_dia
    FROM consultas
    WHERE nutricionista_id = ? AND status = 'realizada'
    AND DATE(data_consulta) BETWEEN ? AND ?
    GROUP BY DATE(data_consulta)
    ORDER BY dia
    """, (user['id'], data_inicio, data_fim))
    
    faturamento_diario = cursor.fetchall()
    
    if faturamento_diario:
        df_fat = pd.DataFrame(faturamento_diario, columns=['Data', 'Faturamento'])
        fig_fat = px.line(df_fat, x='Data', y='Faturamento', 
                         title='üí∞ Evolu√ß√£o do Faturamento Di√°rio', markers=True)
        st.plotly_chart(fig_fat, use_container_width=True)
    
    # Faturamento por tipo de consulta
    cursor.execute("""
    SELECT tipo_consulta, SUM(valor) as total, COUNT(*) as quantidade
    FROM consultas
    WHERE nutricionista_id = ? AND status = 'realizada'
    AND DATE(data_consulta) BETWEEN ? AND ?
    GROUP BY tipo_consulta
    ORDER BY total DESC
    """, (user['id'], data_inicio, data_fim))
    
    fat_por_tipo = cursor.fetchall()
    
    if fat_por_tipo:
        st.markdown("##### üìä Faturamento por Tipo de Consulta")
        
        df_tipo = pd.DataFrame(fat_por_tipo, columns=['Tipo', 'Faturamento', 'Quantidade'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_tipo_fat = px.bar(df_tipo, x='Tipo', y='Faturamento',
                                title='üí∞ Faturamento por Tipo')
            fig_tipo_fat.update_xaxis(tickangle=45)
            st.plotly_chart(fig_tipo_fat, use_container_width=True)
        
        with col2:
            fig_tipo_qtd = px.bar(df_tipo, x='Tipo', y='Quantidade',
                                title='üìä Quantidade por Tipo')
            fig_tipo_qtd.update_xaxis(tickangle=45)
            st.plotly_chart(fig_tipo_qtd, use_container_width=True)
    
    conn.close()

def show_adherence_report(user):
    st.markdown('<div class="sub-header">üìã Relat√≥rio de Ader√™ncia</div>', unsafe_allow_html=True)
    
    # Este seria um relat√≥rio mais complexo analisando a ader√™ncia dos pacientes
    st.info("üìä Relat√≥rio de ader√™ncia aos tratamentos (funcionalidade em desenvolvimento)")
    
    # Simula√ß√£o de dados de ader√™ncia
    pacientes_adherencia = [
        {"nome": "Maria Silva", "aderencia": 85, "consultas": 6},
        {"nome": "Jo√£o Santos", "aderencia": 92, "consultas": 8},
        {"nome": "Ana Costa", "aderencia": 68, "consultas": 4},
        {"nome": "Pedro Oliveira", "aderencia": 78, "consultas": 5},
    ]
    
    for paciente in pacientes_adherencia:
        with st.container():
            col1, col2, col3 = st.columns([3, 2, 1])
            
            with col1:
                st.markdown(f"**üë§ {paciente['nome']}**")
            
            with col2:
                cor = "üü¢" if paciente['aderencia'] >= 80 else "üü°" if paciente['aderencia'] >= 60 else "üî¥"
                st.markdown(f"{cor} **{paciente['aderencia']}% de ader√™ncia**")
            
            with col3:
                st.markdown(f"üìÖ {paciente['consultas']} consultas")
            
            # Barra de progresso
            st.progress(paciente['aderencia'] / 100)
            
            st.markdown("---")

# =============================================================================
# ‚öôÔ∏è CONFIGURA√á√ïES
# =============================================================================

def show_configuracoes(user):
    load_css()
    
    st.markdown('<h1 class="ultra-header">‚öôÔ∏è Configura√ß√µes</h1>', unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs([
        "üë§ Perfil",
        "üîß Sistema", 
        "üíæ Backup"
    ])
    
    with tab1:
        show_profile_settings(user)
    
    with tab2:
        show_system_settings(user)
    
    with tab3:
        show_backup_settings(user)

def show_profile_settings(user):
    st.markdown('<div class="sub-header">üë§ Configura√ß√µes do Perfil</div>', unsafe_allow_html=True)
    
    with st.form("profile_form"):
        st.markdown("##### üìù Dados Pessoais")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nome = st.text_input("Nome Completo", value=user.get('nome', ''))
            email = st.text_input("Email", value=user.get('email', ''), disabled=True)
            telefone = st.text_input("Telefone", value=user.get('telefone', ''))
        
        with col2:
            coren = st.text_input("COREN/CRN", value=user.get('coren', ''))
            clinica = st.text_input("Cl√≠nica/Local", value=user.get('clinica', ''))
        
        st.markdown("##### üîí Alterar Senha")
        
        col1, col2 = st.columns(2)
        
        with col1:
            nova_senha = st.text_input("Nova Senha", type="password")
        
        with col2:
            confirmar_senha = st.text_input("Confirmar Nova Senha", type="password")
        
        submitted = st.form_submit_button("üíæ Salvar Altera√ß√µes", use_container_width=True)
        
        if submitted:
            try:
                conn = db_manager.get_connection()
                cursor = conn.cursor()
                
                # Atualizar dados pessoais
                cursor.execute("""
                UPDATE usuarios SET nome = ?, telefone = ?, coren = ?, clinica = ?
                WHERE id = ?
                """, (nome, telefone, coren, clinica, user['id']))
                
                # Atualizar senha se fornecida
                if nova_senha:
                    if nova_senha != confirmar_senha:
                        st.error("‚ùå Senhas n√£o coincidem!")
                        return
                    
                    senha_hash = hash_password(nova_senha)
                    cursor.execute("UPDATE usuarios SET senha = ? WHERE id = ?", 
                                 (senha_hash, user['id']))
                
                conn.commit()
                conn.close()
                
                st.success("‚úÖ Perfil atualizado com sucesso!")
                
                # Atualizar dados na sess√£o
                st.session_state.user.update({
                    'nome': nome,
                    'telefone': telefone,
                    'coren': coren,
                    'clinica': clinica
                })
                
                time.sleep(2)
                st.rerun()
