#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NutriStock 360 - Sistema Completo de Gest√£o Nutricional
Version: 2.0 - Sistema Profissional COMPLETO com IA e LLM
Author: NutriStock Team

üéØ VERS√ÉO 2.0 - TODAS AS FUNCIONALIDADES IMPLEMENTADAS:
- Dashboard Interativo com m√©tricas reais
- Gest√£o Completa de Pacientes (CRUD completo)
- Chat IA/LLM persistente e avan√ßado
- Sistema de Agendamentos funcional
- Cria√ß√£o de Planos Alimentares
- Gera√ß√£o de Relat√≥rios em PDF
- Calculadoras Nutricionais avan√ßadas
- Tratamento de erros robusto
- Sistema multi-usu√°rio
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import sqlite3
import hashlib
import json
import random
from io import BytesIO
import base64

# ============================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA
# ============================================================================

st.set_page_config(
    page_title="NutriStock 360 - Sistema de Gest√£o Nutricional",
    page_icon="üçΩÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ============================================================================
# ESTILOS CSS MELHORADOS
# ============================================================================

st.markdown("""
<style>
    /* Estilos Globais */
    .main {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
    }
    
    /* Header Principal */
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    
    /* Cards de M√©tricas */
    .metric-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.08);
        border-left: 5px solid #667eea;
        transition: transform 0.2s;
    }
    
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.12);
    }
    
    /* Cards de Pacientes */
    .patient-card {
        background: white;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        margin-bottom: 1rem;
        border-left: 4px solid #4CAF50;
        transition: all 0.3s;
    }
    
    .patient-card:hover {
        box-shadow: 0 4px 20px rgba(0,0,0,0.12);
        transform: translateX(5px);
    }
    
    /* Chat IA */
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
        animation: fadeIn 0.3s;
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .user-message {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        margin-left: 20%;
    }
    
    .ai-message {
        background: #f8f9fa;
        color: #333;
        margin-right: 20%;
        border-left: 4px solid #667eea;
    }
    
    /* Bot√µes */
    .stButton>button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.75rem 2rem;
        font-weight: bold;
        transition: all 0.3s;
    }
    
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
    
    /* Alert Boxes */
    .success-box {
        background: linear-gradient(135deg, #4CAF5020 0%, #81C78420 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #4CAF50;
        margin: 1rem 0;
    }
    
    .warning-box {
        background: linear-gradient(135deg, #FF980020 0%, #FFC10720 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #FF9800;
        margin: 1rem 0;
    }
    
    .error-box {
        background: linear-gradient(135deg, #F4433620 0%, #E91E6320 100%);
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #F44336;
        margin: 1rem 0;
    }
    
    .info-box {
        background: linear-gradient(135deg, #667eea20 0%, #764ba220 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border-left: 4px solid #667eea;
        margin: 1rem 0;
    }
    
    /* Tabs personalizados */
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: white;
        border-radius: 10px 10px 0 0;
        padding: 1rem 2rem;
        font-weight: bold;
    }
    
    /* Progress bar */
    .stProgress > div > div > div {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Spinner */
    .stSpinner > div {
        border-top-color: #667eea !important;
    }
</style>
""", unsafe_allow_html=True)

# ============================================================================
# BANCO DE DADOS MELHORADO
# ============================================================================

def init_database():
    """Inicializa o banco de dados SQLite com todas as tabelas"""
    conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
    cursor = conn.cursor()
    
    # Tabela de Usu√°rios
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            full_name TEXT NOT NULL,
            email TEXT,
            role TEXT DEFAULT 'nutritionist',
            crn TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_login TIMESTAMP
        )
    ''')
    
    # Tabela de Pacientes (completa)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS patients (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            full_name TEXT NOT NULL,
            email TEXT,
            phone TEXT,
            birth_date DATE,
            gender TEXT,
            weight REAL,
            height REAL,
            target_weight REAL,
            goal TEXT,
            medical_conditions TEXT,
            allergies TEXT,
            notes TEXT,
            progress INTEGER DEFAULT 0,
            active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_visit DATE,
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # Tabela de Consultas
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS appointments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            user_id INTEGER,
            date DATE NOT NULL,
            time TEXT NOT NULL,
            type TEXT,
            status TEXT DEFAULT 'pending',
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES patients (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # Tabela de Conversas IA
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS llm_conversations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            patient_id INTEGER,
            conversation_type TEXT,
            user_message TEXT,
            llm_response TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (id),
            FOREIGN KEY (patient_id) REFERENCES patients (id)
        )
    ''')
    
    # Tabela de Planos Alimentares
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS meal_plans (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            user_id INTEGER,
            title TEXT NOT NULL,
            description TEXT,
            calories INTEGER,
            proteins REAL,
            carbs REAL,
            fats REAL,
            meals_data TEXT,
            active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES patients (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # Tabela de Avalia√ß√µes (novo)
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS evaluations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            user_id INTEGER,
            date DATE NOT NULL,
            weight REAL,
            body_fat REAL,
            muscle_mass REAL,
            imc REAL,
            waist REAL,
            hip REAL,
            notes TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES patients (id),
            FOREIGN KEY (user_id) REFERENCES users (id)
        )
    ''')
    
    # Criar usu√°rio padr√£o se n√£o existir
    cursor.execute("SELECT * FROM users WHERE username = 'admin'")
    if not cursor.fetchone():
        password_hash = hashlib.sha256('admin123'.encode()).hexdigest()
        cursor.execute('''
            INSERT INTO users (username, password, full_name, email, role, crn)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', ('admin', password_hash, 'Dr. Jo√£o Nutricionista', 'joao@nutristock.com', 'nutritionist', 'CRN 12345'))
        
        # Adicionar alguns pacientes de exemplo
        sample_patients = [
            ('Ana Silva Santos', 'ana.silva@email.com', '(11) 98765-4321', '1992-05-15', 'Feminino', 68.5, 1.65, 62.0, 'Perder peso', 'Nenhuma', 'Lactose', 'Paciente motivada', 65),
            ('Carlos Eduardo Oliveira', 'carlos.edu@email.com', '(11) 97654-3210', '1988-08-20', 'Masculino', 85.0, 1.75, 80.0, 'Ganhar massa', 'Hipertens√£o leve', 'Nenhuma', 'Pratica muscula√ß√£o 5x/semana', 45),
            ('Maria Fernanda Costa', 'maria.costa@email.com', '(11) 96543-2109', '1995-11-30', 'Feminino', 58.0, 1.60, 58.0, 'Manuten√ß√£o', 'Nenhuma', 'Frutos do mar', 'Alimenta√ß√£o equilibrada', 90),
            ('Pedro Henrique Santos', 'pedro.santos@email.com', '(11) 95432-1098', '1985-03-10', 'Masculino', 92.0, 1.80, 78.0, 'Perder peso', 'Diabetes tipo 2', 'Nenhuma', 'Necessita acompanhamento especial', 30),
        ]
        
        user_id = cursor.lastrowid
        for patient in sample_patients:
            cursor.execute('''
                INSERT INTO patients 
                (user_id, full_name, email, phone, birth_date, gender, weight, height, 
                 target_weight, goal, medical_conditions, allergies, notes, progress, last_visit)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, date('now'))
            ''', (user_id, *patient))
    
    conn.commit()
    conn.close()

# Inicializar banco de dados
init_database()

# ============================================================================
# FUN√á√ïES DE AUTENTICA√á√ÉO
# ============================================================================

def authenticate_user(username, password):
    """Autentica usu√°rio no sistema"""
    try:
        conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
        cursor = conn.cursor()
        
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        cursor.execute('''
            SELECT id, username, full_name, email, role, crn
            FROM users WHERE username = ? AND password = ?
        ''', (username, password_hash))
        
        user = cursor.fetchone()
        
        if user:
            # Atualizar last_login
            cursor.execute('''
                UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?
            ''', (user[0],))
            conn.commit()
            
            conn.close()
            return {
                'id': user[0],
                'username': user[1],
                'full_name': user[2],
                'email': user[3],
                'role': user[4],
                'crn': user[5]
            }
        
        conn.close()
        return None
    except Exception as e:
        st.error(f"Erro na autentica√ß√£o: {e}")
        return None

def login_page():
    """P√°gina de Login"""
    st.markdown("""
        <div style='text-align: center; padding: 3rem 0;'>
            <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        width: 100px; height: 100px; border-radius: 50%;
                        margin: 0 auto 2rem; display: flex; align-items: center;
                        justify-content: center; box-shadow: 0 10px 30px rgba(102,126,234,0.4);'>
                <h1 style='color: white; font-size: 3rem; margin: 0;'>üçΩÔ∏è</h1>
            </div>
            <h1 style='color: #333; margin-bottom: 0.5rem;'>NutriStock 360</h1>
            <p style='color: #666; font-size: 1.2rem;'>Sistema Completo de Gest√£o Nutricional</p>
            <p style='color: #999; font-size: 0.9rem;'>Vers√£o 2.0 - Com IA e LLM Integrado</p>
        </div>
    """, unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        with st.container():
            st.markdown("### üîê Acesso ao Sistema")
            
            with st.form("login_form"):
                username = st.text_input("üë§ Usu√°rio", placeholder="Digite seu usu√°rio")
                password = st.text_input("üîí Senha", type="password", placeholder="Digite sua senha")
                
                col_btn1, col_btn2 = st.columns(2)
                
                with col_btn1:
                    login_btn = st.form_submit_button("üöÄ Entrar no Sistema", use_container_width=True)
                
                with col_btn2:
                    register_btn = st.form_submit_button("üìù Criar Conta", use_container_width=True)
                
                if login_btn:
                    if username and password:
                        with st.spinner("üîÑ Autenticando..."):
                            user = authenticate_user(username, password)
                            if user:
                                st.session_state.user = user
                                st.session_state.logged_in = True
                                st.success("‚úÖ Login realizado com sucesso!")
                                st.rerun()
                            else:
                                st.error("‚ùå Usu√°rio ou senha incorretos!")
                    else:
                        st.warning("‚ö†Ô∏è Preencha todos os campos!")
                
                if register_btn:
                    st.info("üîß Fun√ß√£o em desenvolvimento...")
            
            st.markdown("---")
            st.markdown("""
                <div style='text-align: center; background: #f8f9fa; padding: 1rem; 
                           border-radius: 10px; margin-top: 1rem;'>
                    <strong>üéØ Demonstra√ß√£o:</strong><br>
                    Usu√°rio: <code>admin</code><br>
                    Senha: <code>admin123</code>
                </div>
            """, unsafe_allow_html=True)

# ============================================================================
# SISTEMA DE LLM/IA MELHORADO
# ============================================================================

def get_llm_response(message, context=""):
    """Gera respostas inteligentes do LLM com contexto"""
    lowerMessage = message.lower()
    
    # Respostas contextuais expandidas
    if 'plano' in lowerMessage or 'montar' in lowerMessage or 'alimentar' in lowerMessage:
        return """üìã **Cria√ß√£o de Plano Alimentar Eficaz**

**1. Avalia√ß√£o Inicial Completa:**
‚Ä¢ Calcule TMB (Taxa Metab√≥lica Basal) usando Harris-Benedict
‚Ä¢ Avalie composi√ß√£o corporal (IMC, % gordura, massa magra)
‚Ä¢ Identifique restri√ß√µes alimentares, alergias e intoler√¢ncias
‚Ä¢ Determine n√≠vel de atividade f√≠sica real
‚Ä¢ Analise exames bioqu√≠micos recentes
‚Ä¢ Hist√≥rico alimentar (recordat√≥rio 24h ou QFCA)

**2. Estabele√ßa Objetivos SMART:**
‚Ä¢ **Espec√≠ficos**: Meta de peso/composi√ß√£o corporal clara
‚Ä¢ **Mensur√°veis**: Kg a perder/ganhar por semana (0.5-1kg)
‚Ä¢ **Alcan√ß√°veis**: Metas realistas baseadas em dados cient√≠ficos
‚Ä¢ **Relevantes**: Alinhados com sa√∫de e qualidade de vida
‚Ä¢ **Temporais**: Prazo definido (ex: 12-24 semanas)

**3. Distribui√ß√£o de Macronutrientes:**
‚Ä¢ **Prote√≠nas**: 1.6-2.2g/kg peso corporal (25-30% VCT)
  - Emagrecimento: 2.0-2.2g/kg
  - Manuten√ß√£o: 1.6-1.8g/kg
  - Ganho muscular: 2.0-2.4g/kg
‚Ä¢ **Carboidratos**: 3-5g/kg peso corporal (45-55% VCT)
  - Ajustar conforme objetivo e atividade
‚Ä¢ **Gorduras**: 0.8-1.2g/kg peso corporal (20-30% VCT)
  - M√≠nimo 0.8g/kg para sa√∫de hormonal

**4. Estrutura das Refei√ß√µes:**
‚Ä¢ **Caf√© da manh√£**: 20-25% VCT (prote√≠na + carboidrato)
‚Ä¢ **Lanche manh√£**: 5-10% VCT (opcional)
‚Ä¢ **Almo√ßo**: 30-35% VCT (refei√ß√£o principal)
‚Ä¢ **Lanche tarde**: 10-15% VCT
‚Ä¢ **Jantar**: 20-25% VCT
‚Ä¢ **Ceia**: 5-10% VCT (opcional, prote√≠na lenta)
‚Ä¢ **Pr√©-treino**: 30-60min antes (carboidrato + prote√≠na)
‚Ä¢ **P√≥s-treino**: At√© 2h depois (prote√≠na + carboidrato)

**5. Hidrata√ß√£o:**
‚Ä¢ C√°lculo: 35ml/kg de peso corporal
‚Ä¢ Ajustar conforme clima, atividade e sudorese
‚Ä¢ Monitorar colora√ß√£o da urina

**6. Suplementa√ß√£o (se necess√°rio):**
‚Ä¢ Whey protein (se n√£o atingir prote√≠na na dieta)
‚Ä¢ √îmega-3 (se consumo baixo de peixes)
‚Ä¢ Vitamina D (se n√≠veis baixos)
‚Ä¢ Multivitam√≠nico (dietas restritivas)
‚Ä¢ Creatina (para ganho muscular)

**7. Monitoramento e Ajustes:**
‚Ä¢ **Reavalia√ß√£o**: A cada 15-30 dias
‚Ä¢ **Ajustes**: Baseados em progresso, saciedade e ades√£o
‚Ä¢ **Flexibilidade**: 80/20 (80% plano, 20% flex√≠vel)
‚Ä¢ **Foco em ades√£o**: Plano sustent√°vel a longo prazo

**8. Ferramentas de Apoio:**
‚Ä¢ Aplicativos de contagem cal√≥rica
‚Ä¢ Lista de compras semanal
‚Ä¢ Prepara√ß√£o de refei√ß√µes (meal prep)
‚Ä¢ Receitas variadas e saborosas

üí° **Dicas Profissionais:**
- Individualize sempre (n√£o existe plano universal)
- Considere prefer√™ncias e cultura alimentar
- Ensine educa√ß√£o nutricional (autonomia)
- Acompanhe sa√∫de mental e rela√ß√£o com comida
- Documente todo o processo"""

    elif 'diab√©tico' in lowerMessage or 'diabetes' in lowerMessage or 'glicemia' in lowerMessage:
        return """ü©∫ **Plano Nutricional Completo para Diabetes**

**IMPORTANTE**: Este plano deve ser coordenado com endocrinologista!

**1. Princ√≠pios Fundamentais:**
‚Ä¢ Controle glic√™mico rigoroso
‚Ä¢ Preven√ß√£o de hipoglicemia
‚Ä¢ Perda de peso (se necess√°rio)
‚Ä¢ Controle de comorbidades

**2. Carboidratos - A BASE DO CONTROLE:**

üåæ **Carboidratos Complexos (Baixo IG):**
‚Ä¢ **Cereais integrais**: Aveia, quinoa, arroz integral
‚Ä¢ **Tub√©rculos**: Batata-doce, mandioca, inhame
‚Ä¢ **Leguminosas**: Feij√£o, lentilha, gr√£o-de-bico, ervilha
‚Ä¢ **Frutas baixo IG**: Ma√ß√£, pera, morango, ameixa, kiwi
  - Sempre com casca (fibras)
  - Preferir frutas inteiras (n√£o sucos)
  - Quantidade: 2-4 por√ß√µes/dia

üö´ **Evitar (Alto IG):**
‚Ä¢ A√ß√∫cares simples e refinados
‚Ä¢ Farinhas brancas
‚Ä¢ Arroz branco
‚Ä¢ P√£o franc√™s
‚Ä¢ Refrigerantes e sucos
‚Ä¢ Doces e sobremesas
‚Ä¢ Mel, melado, geleia

**3. Prote√≠nas Magras:**
ü•© **Fontes Recomendadas:**
‚Ä¢ Frango sem pele (100-150g/refei√ß√£o)
‚Ä¢ Peixes (salm√£o, atum, sardinha) 3x/semana
‚Ä¢ Ovos inteiros (1-2 ovos/dia)
‚Ä¢ Cortes magros de carne vermelha (1-2x/semana)
‚Ä¢ Tofu e tempeh
‚Ä¢ Queijos brancos (ricota, cottage)

**4. Gorduras Saud√°veis:**
ü•ë **Fontes Anti-inflamat√≥rias:**
‚Ä¢ Abacate (1/2 unidade/dia)
‚Ä¢ Azeite extra virgem (1-2 colheres/dia)
‚Ä¢ Nozes, castanhas, am√™ndoas (30g/dia)
‚Ä¢ Peixes gordos (√¥mega-3)
‚Ä¢ Sementes (chia, linha√ßa, gergelim)

**5. Fibras - ESSENCIAIS:**
‚Ä¢ Meta: 25-35g/dia
‚Ä¢ Sol√∫veis: Aveia, frutas com casca, leguminosas
‚Ä¢ Insol√∫veis: Vegetais folhosos, cereais integrais
‚Ä¢ Benef√≠cios: Controle glic√™mico, saciedade, sa√∫de intestinal

**6. Distribui√ß√£o de Refei√ß√µes:**
‚è∞ **Frequ√™ncia e Hor√°rios:**
‚Ä¢ 5-6 pequenas refei√ß√µes por dia
‚Ä¢ NUNCA pular refei√ß√µes
‚Ä¢ Intervalos regulares (3-4 horas)
‚Ä¢ Aten√ß√£o ao hor√°rio das medica√ß√µes/insulina
‚Ä¢ Almo√ßo e jantar: M√©todo do prato
  - 50% vegetais
  - 25% prote√≠na
  - 25% carboidrato complexo

**7. M√©todo do √çndice Glic√™mico:**
‚Ä¢ Preferir IG < 55
‚Ä¢ Combinar carboidratos com prote√≠na/gordura
‚Ä¢ Exemplo: P√£o integral + pasta de amendoim

**8. Contagem de Carboidratos:**
‚Ä¢ Aprender a quantificar CHO
‚Ä¢ 15g CHO = 1 por√ß√£o
‚Ä¢ Distribuir uniformemente nas refei√ß√µes

**9. Hidrata√ß√£o:**
‚Ä¢ M√≠nimo 2 litros/dia
‚Ä¢ √Ågua, ch√°s sem a√ß√∫car
‚Ä¢ Evitar bebidas a√ßucaradas

**10. Suplementa√ß√£o:**
‚Ä¢ √îmega-3: 1-2g/dia
‚Ä¢ Vitamina D: Se d√©ficit
‚Ä¢ Cromo: Pode ajudar no controle glic√™mico
‚Ä¢ Magn√©sio: Se d√©ficit

**11. Monitoramento:**
üìä **Exames Regulares:**
‚Ä¢ Glicemia em jejum
‚Ä¢ HbA1c a cada 3 meses (meta < 7%)
‚Ä¢ Perfil lip√≠dico
‚Ä¢ Fun√ß√£o renal
‚Ä¢ Fundo de olho (anual)

**12. Atividade F√≠sica:**
‚Ä¢ 150 min/semana (moderada)
‚Ä¢ Aten√ß√£o √† glicemia pr√© e p√≥s-treino
‚Ä¢ Sempre ter carboidrato de r√°pida absor√ß√£o

**13. SINAIS DE ALERTA:**
üö® **Hipoglicemia** (< 70 mg/dL):
‚Ä¢ Tremores, suor frio, tontura
‚Ä¢ Tratar: 15g carboidrato r√°pido
‚Ä¢ Reavalia√ß√£o: 15 minutos

üö® **Hiperglicemia** (> 250 mg/dL):
‚Ä¢ Sede excessiva, vis√£o turva
‚Ä¢ Contatar m√©dico imediatamente

**14. Dicas Pr√°ticas:**
‚Ä¢ Ler r√≥tulos (carboidratos totais e fibras)
‚Ä¢ Cozinhar em casa (controle total)
‚Ä¢ Planejar refei√ß√µes (evitar improvisos)
‚Ä¢ Levar lanches saud√°veis
‚Ä¢ Usar ado√ßantes com modera√ß√£o

‚ö†Ô∏è **IMPORTANTE:**
- Individualiza√ß√£o √© FUNDAMENTAL
- Cada diabetes √© √∫nico
- Acompanhamento m√©dico regular
- Suporte psicol√≥gico se necess√°rio
- Educa√ß√£o continuada sobre a doen√ßa

üíä **Medicamentos:**
- Seguir rigorosamente prescri√ß√£o m√©dica
- Ajustar alimenta√ß√£o conforme medica√ß√£o
- Nunca alterar doses sem orienta√ß√£o"""

    elif 'motiva√ß√£o' in lowerMessage or 'desmotivado' in lowerMessage or 'desistir' in lowerMessage:
        return """üí™ **Estrat√©gias Avan√ßadas de Motiva√ß√£o para Pacientes**

**ENTENDA: Motiva√ß√£o √© CONSTRU√çDA, n√£o esperada!**

**1. ESTABELE√áA MICRO-METAS:**
‚úÖ **Princ√≠pio dos Pequenos Passos:**
‚Ä¢ Metas semanais em vez de mensais
‚Ä¢ Exemplo: "Esta semana vou comer verduras no almo√ßo"
‚Ä¢ N√£o: "Vou perder 10kg este m√™s"
‚Ä¢ Celebre CADA conquista (por menor que seja)
‚Ä¢ Sistema de recompensas progressivas
‚Ä¢ Di√°rio de vit√≥rias di√°rias

**2. VISUALIZA√á√ÉO DO PROGRESSO:**
üìä **Ferramentas Visuais:**
‚Ä¢ Gr√°ficos de evolu√ß√£o semanal/mensal
‚Ä¢ Fotos comparativas (in√≠cio/atual)
‚Ä¢ Medidas corporais detalhadas (v√°rias partes)
‚Ä¢ App de acompanhamento com notifica√ß√µes
‚Ä¢ Quadro de progresso vis√≠vel (casa/trabalho)
‚Ä¢ Registro de NSV (non-scale victories)
  - Melhor sono, mais energia
  - Roupas mais folgadas
  - Melhora em exames

**3. GAMIFICA√á√ÉO DO PROCESSO:**
üéÆ **Torne Divertido:**
‚Ä¢ Sistema de pontos por bons h√°bitos
‚Ä¢ Badges/Trof√©us por desafios completados
‚Ä¢ N√≠veis de progress√£o (Bronze ‚Üí Diamante)
‚Ä¢ Desafios semanais variados
‚Ä¢ Ranking com outros pacientes (opcional)
‚Ä¢ Recompensas tang√≠veis:
  - N√≠vel 10: Roupa nova
  - N√≠vel 20: Massagem
  - N√≠vel 30: Day spa

**4. COMUNICA√á√ÉO EFETIVA:**
üí¨ **Mantenha Contato:**
‚Ä¢ Check-ins semanais (presencial ou virtual)
‚Ä¢ Mensagens motivacionais di√°rias (WhatsApp)
‚Ä¢ Grupo de apoio entre pacientes
‚Ä¢ Lives mensais com Q&A
‚Ä¢ Newsletter semanal com dicas
‚Ä¢ Responder d√∫vidas em 24h
‚Ä¢ Estar dispon√≠vel em momentos cr√≠ticos

**5. AJUSTE DE EXPECTATIVAS:**
üéØ **Realismo √© Fundamental:**
‚Ä¢ Meta: 0.5-1kg/semana (n√£o 5kg)
‚Ä¢ Explicar plat√¥s (s√£o normais!)
‚Ä¢ Foco no PROCESSO, n√£o s√≥ resultado
‚Ä¢ Valorizar mudan√ßas comportamentais
‚Ä¢ Aceitar "escorregadas" (sem culpa)
‚Ä¢ Perfeccionismo √© INIMIGO
‚Ä¢ Progresso > Perfei√ß√£o

**6. MINDSET DE LONGO PRAZO:**
üß† **Mudan√ßa de Mentalidade:**
‚Ä¢ N√£o √© "dieta", √© estilo de vida
‚Ä¢ N√£o √© "perder" peso (perder √© ruim)
‚Ä¢ √â "conquistar" sa√∫de (positivo)
‚Ä¢ Processo cont√≠nuo, n√£o linear
‚Ä¢ Foco em h√°bitos, n√£o n√∫meros
‚Ä¢ Trabalho com psic√≥logo (se necess√°rio)
‚Ä¢ Melhorar rela√ß√£o com comida

**7. IDENTIFIQUE BARREIRAS:**
üöß **Resolva Obst√°culos:**
‚Ä¢ Mapeie desafios do paciente:
  - Falta de tempo? ‚Üí Meal prep
  - Come por ansiedade? ‚Üí Terapia
  - Fam√≠lia n√£o apoia? ‚Üí Reuni√£o familiar
  - Trabalho dificulta? ‚Üí Marmitas
‚Ä¢ Crie solu√ß√µes espec√≠ficas
‚Ä¢ Antecipe situa√ß√µes de risco

**8. T√âCNICA DO "POR QU√ä?":**
üéØ **Conecte com Prop√≥sito:**
‚Ä¢ Por que quer emagrecer? (resposta 1)
‚Ä¢ Por que isso importa? (resposta 2)
‚Ä¢ Por que ISSO importa? (resposta 3)
‚Ä¢ Continue at√© chegar no "por qu√™" profundo
‚Ä¢ Exemplo:
  1. Quero emagrecer
  2. Para ter sa√∫de
  3. Para estar presente na vida dos filhos
  4. Para n√£o repetir hist√≥ria de familiares doentes
  5. **PROP√ìSITO REAL**: Ser exemplo para fam√≠lia

**9. ACCOUNTABILITY (RESPONSABILIZA√á√ÉO):**
üìù **Crie Compromisso:**
‚Ä¢ Contrato terap√™utico escrito
‚Ä¢ Di√°rio alimentar compartilhado
‚Ä¢ Parceiro de treino/dieta
‚Ä¢ An√∫ncio p√∫blico das metas (redes sociais)
‚Ä¢ Check-ins obrigat√≥rios
‚Ä¢ Penalidades criativas (doa√ß√£o, tarefa)
‚Ä¢ Recompensas por consist√™ncia

**10. QUEBRE A ROTINA:**
üîÑ **Evite Monotonia:**
‚Ä¢ Mude exerc√≠cios a cada 4 semanas
‚Ä¢ Varie prepara√ß√µes de alimentos
‚Ä¢ Novos restaurantes saud√°veis
‚Ä¢ Novas receitas semanalmente
‚Ä¢ Desafios tem√°ticos mensais
‚Ä¢ Eventos sociais fit

**11. COMUNIDADE E APOIO:**
üë• **Conex√£o Social:**
‚Ä¢ Grupos de WhatsApp de pacientes
‚Ä¢ Encontros presenciais mensais
‚Ä¢ Challenges coletivos
‚Ä¢ Compartilhar receitas e dicas
‚Ä¢ Mentorar novos pacientes
‚Ä¢ Celebra√ß√µes coletivas de conquistas

**12. T√âCNICAS DE PSICOLOGIA POSITIVA:**
‚ú® **Gratid√£o e Mindfulness:**
‚Ä¢ Di√°rio de gratid√£o (3 coisas/dia)
‚Ä¢ Medita√ß√£o guiada (10 min/dia)
‚Ä¢ Visualiza√ß√£o criativa (meta alcan√ßada)
‚Ä¢ Afirma√ß√µes positivas di√°rias
‚Ä¢ Pr√°ticas de auto-compaix√£o
‚Ä¢ Celebrar o corpo AGORA

**13. PREPARE PARA RECA√çDAS:**
üõ°Ô∏è **Plano B:**
‚Ä¢ Reca√≠das s√£o NORMAIS
‚Ä¢ Ter plano de conting√™ncia
‚Ä¢ Lista de estrat√©gias para momentos dif√≠ceis
‚Ä¢ Contatos de emerg√™ncia
‚Ä¢ Auto-perd√£o e rein√≠cio imediato
‚Ä¢ Aprender com cada reca√≠da

**14. FOCO NA SA√öDE, N√ÉO EST√âTICA:**
‚ù§Ô∏è **Mude o Paradigma:**
‚Ä¢ Energia aumentando?
‚Ä¢ Sono melhorando?
‚Ä¢ Exames de sangue melhores?
‚Ä¢ Dores diminuindo?
‚Ä¢ Humor mais est√°vel?
‚Ä¢ Mais disposi√ß√£o no dia?
‚Üí ISSO √â SUCESSO!

**15. FERRAMENTAS PR√ÅTICAS:**
üì± **Apps Recomendados:**
‚Ä¢ MyFitnessPal (calorias)
‚Ä¢ Habitica (gamifica√ß√£o)
‚Ä¢ Headspace (medita√ß√£o)
‚Ä¢ Strava (exerc√≠cios)
‚Ä¢ Life360 (accountability)

üéØ **LEMBRE-SE:**
‚Ä¢ Motiva√ß√£o vem DEPOIS da a√ß√£o
‚Ä¢ Disciplina > Motiva√ß√£o
‚Ä¢ 1% melhor todo dia = 37x melhor em 1 ano
‚Ä¢ N√£o espere "segunda-feira" - comece AGORA
‚Ä¢ Voc√™ n√£o precisa ser perfeito, precisa ser CONSISTENTE

üí° **FRASE MOTIVACIONAL:**
"Sucesso √© a soma de pequenos esfor√ßos repetidos dia ap√≥s dia."

**PR√ìXIMOS PASSOS:**
1. Escolha UMA estrat√©gia desta lista
2. Implemente por 21 dias (criar h√°bito)
3. Avalie resultados
4. Adicione outra estrat√©gia
5. Repita o processo"""

    elif 'c√°lculo' in lowerMessage or 'tmb' in lowerMessage or 'cal√≥rico' in lowerMessage or 'macros' in lowerMessage:
        return """üßÆ **C√°lculos Nutricionais Completos e Precisos**

**1. TAXA METAB√ìLICA BASAL (TMB)**

üìä **F√≥rmula de Harris-Benedict REVISADA (1984):**

üë® **HOMENS:**
```
TMB = 88.362 + (13.397 √ó peso kg) + (4.799 √ó altura cm) - (5.677 √ó idade)
```

üë© **MULHERES:**
```
TMB = 447.593 + (9.247 √ó peso kg) + (3.098 √ó altura cm) - (4.330 √ó idade)
```

üìä **F√≥rmula de Mifflin-St Jeor (MAIS PRECISA - 1990):**

üë® **HOMENS:**
```
TMB = (10 √ó peso kg) + (6.25 √ó altura cm) - (5 √ó idade) + 5
```

üë© **MULHERES:**
```
TMB = (10 √ó peso kg) + (6.25 √ó altura cm) - (5 √ó idade) - 161
```

üí° **Qual usar?** Mifflin-St Jeor √© mais precisa para popula√ß√£o moderna!

---

**2. GASTO ENERG√âTICO TOTAL (GET)**

‚ö° **Multiplique TMB pelo Fator de Atividade:**

‚Ä¢ üõãÔ∏è **Sedent√°rio** (0-1x/semana): TMB √ó **1.2**
  - Trabalho de escrit√≥rio, pouco movimento

‚Ä¢ üö∂ **Levemente Ativo** (1-3x/semana): TMB √ó **1.375**
  - Caminhadas leves, exerc√≠cios ocasionais

‚Ä¢ üèÉ **Moderadamente Ativo** (3-5x/semana): TMB √ó **1.55**
  - Exerc√≠cios regulares, trabalho moderado

‚Ä¢ üí™ **Muito Ativo** (6-7x/semana): TMB √ó **1.725**
  - Exerc√≠cios intensos di√°rios

‚Ä¢ üî• **Extremamente Ativo** (2x/dia atleta): TMB √ó **1.9**
  - Treinos intensos 2x/dia, trabalho f√≠sico pesado

---

**3. AJUSTES PARA OBJETIVOS**

üéØ **PERDA DE PESO (D√âFICIT CAL√ìRICO):**
‚Ä¢ **Recomendado**: -300 a -500 kcal/dia
‚Ä¢ **Agressivo**: -500 a -750 kcal/dia
‚Ä¢ **M√°ximo**: -1000 kcal/dia (com acompanhamento)
‚Ä¢ **Taxa de perda**: 0.5-1kg/semana
‚Ä¢ **NUNCA abaixo de**:
  - Mulheres: 1200 kcal/dia
  - Homens: 1500 kcal/dia

**Exemplo:**
```
TMB = 1600 kcal
GET = 1600 √ó 1.55 = 2480 kcal
Para perder peso = 2480 - 500 = 1980 kcal/dia
```

üéØ **GANHO DE PESO (SUPER√ÅVIT CAL√ìRICO):**
‚Ä¢ **Recomendado**: +300 a +500 kcal/dia
‚Ä¢ **Taxa de ganho**: 0.25-0.5kg/semana
‚Ä¢ **Priorizar**: Ganho de massa magra
‚Ä¢ **Combinar**: Treino de for√ßa intenso

**Exemplo:**
```
TMB = 1800 kcal
GET = 1800 √ó 1.725 = 3105 kcal
Para ganhar peso = 3105 + 400 = 3505 kcal/dia
```

üéØ **MANUTEN√á√ÉO:**
‚Ä¢ Calorias = GET
‚Ä¢ Foco na qualidade nutricional
‚Ä¢ Monitorar peso semanalmente

---

**4. DISTRIBUI√á√ÉO DE MACRONUTRIENTES**

ü•© **PROTE√çNAS:**

**Necessidade por objetivo:**
‚Ä¢ Sedent√°rio: 0.8-1.0g/kg
‚Ä¢ Ativo: 1.2-1.6g/kg
‚Ä¢ Hipertrofia: 1.6-2.2g/kg
‚Ä¢ Emagrecimento: 1.8-2.4g/kg (protege massa magra)
‚Ä¢ Atletas: 2.0-2.5g/kg

**Convers√£o cal√≥rica:**
‚Ä¢ 1g prote√≠na = **4 kcal**

**Exemplo (70kg, emagrecimento):**
```
70kg √ó 2.0g = 140g prote√≠nas/dia
140g √ó 4 kcal = 560 kcal de prote√≠nas
```

---

üçö **CARBOIDRATOS:**

**Necessidade por objetivo:**
‚Ä¢ Sedent√°rio: 2-3g/kg
‚Ä¢ Ativo: 3-5g/kg
‚Ä¢ Hipertrofia: 4-6g/kg
‚Ä¢ Emagrecimento: 2-4g/kg
‚Ä¢ Atletas endurance: 6-10g/kg

**Convers√£o cal√≥rica:**
‚Ä¢ 1g carboidrato = **4 kcal**

**Exemplo (70kg, ativo):**
```
70kg √ó 4g = 280g carboidratos/dia
280g √ó 4 kcal = 1120 kcal de carboidratos
```

---

ü•ë **GORDURAS:**

**Necessidade:**
‚Ä¢ M√≠nimo: 0.8g/kg (sa√∫de hormonal)
‚Ä¢ Recomendado: 0.8-1.2g/kg
‚Ä¢ M√°ximo: 1.5g/kg

**Convers√£o cal√≥rica:**
‚Ä¢ 1g gordura = **9 kcal**

**Exemplo (70kg):**
```
70kg √ó 1.0g = 70g gorduras/dia
70g √ó 9 kcal = 630 kcal de gorduras
```

---

**5. M√âTODO DE DISTRIBUI√á√ÉO DE MACROS**

**EXEMPLO COMPLETO: Emagrecimento 2000 kcal/dia, 70kg**

**Passo 1 - Prote√≠na (prioridade):**
```
70kg √ó 2.0g = 140g prote√≠nas
140g √ó 4 = 560 kcal (28%)
```

**Passo 2 - Gordura (m√≠nimo):**
```
70kg √ó 1.0g = 70g gorduras
70g √ó 9 = 630 kcal (31.5%)
```

**Passo 3 - Carboidrato (restante):**
```
2000 - 560 - 630 = 810 kcal
810 √∑ 4 = 202.5g carboidratos (40.5%)
```

**Distribui√ß√£o Final:**
‚Ä¢ Prote√≠nas: 140g (28%)
‚Ä¢ Carboidratos: 202g (40.5%)
‚Ä¢ Gorduras: 70g (31.5%)
‚úÖ Total: 2000 kcal

---

**6. C√ÅLCULO DE POR√á√ïES**

üìè **M√©todo Pr√°tico (M√£o):**
‚Ä¢ Prote√≠na: Palma da m√£o (20-30g)
‚Ä¢ Carboidrato: Punho fechado (30-40g)
‚Ä¢ Gordura: Polegar (7-10g)
‚Ä¢ Vegetais: 2 m√£os em concha

---

**7. NECESSIDADES H√çDRICAS**

üíß **F√≥rmula:**
```
√Ågua (litros) = Peso (kg) √ó 0.035
```

**Exemplo (70kg):**
```
70kg √ó 0.035 = 2.45 litros/dia
```

**Ajustes:**
‚Ä¢ Treino intenso: +500ml a 1L
‚Ä¢ Clima quente: +500ml
‚Ä¢ Gesta√ß√£o: +300ml
‚Ä¢ Amamenta√ß√£o: +700ml

---

**8. √çNDICE DE MASSA CORPORAL (IMC)**

üìä **F√≥rmula:**
```
IMC = Peso (kg) √∑ Altura¬≤ (m)
```

**Classifica√ß√£o:**
‚Ä¢ < 18.5: Abaixo do peso
‚Ä¢ 18.5-24.9: Peso normal
‚Ä¢ 25-29.9: Sobrepeso
‚Ä¢ 30-34.9: Obesidade grau I
‚Ä¢ 35-39.9: Obesidade grau II
‚Ä¢ ‚â• 40: Obesidade grau III

‚ö†Ô∏è **Limita√ß√µes do IMC:**
- N√£o diferencia massa magra de gordura
- N√£o adequado para atletas
- Usar junto com outras medidas

---

**9. PERCENTUAL DE GORDURA CORPORAL**

üìê **F√≥rmulas de Estimativa:**

**F√≥rmula da Marinha (HOMENS):**
```
%G = 495 √∑ (1.0324 - 0.19077√ólog‚ÇÅ‚ÇÄ(cintura-pesco√ßo) + 0.15456√ólog‚ÇÅ‚ÇÄ(altura)) - 450
```

**F√≥rmula da Marinha (MULHERES):**
```
%G = 495 √∑ (1.29579 - 0.35004√ólog‚ÇÅ‚ÇÄ(cintura+quadril-pesco√ßo) + 0.22100√ólog‚ÇÅ‚ÇÄ(altura)) - 450
```

**Classifica√ß√£o %Gordura:**

üë® **HOMENS:**
‚Ä¢ Essencial: 2-5%
‚Ä¢ Atleta: 6-13%
‚Ä¢ Fitness: 14-17%
‚Ä¢ Aceit√°vel: 18-24%
‚Ä¢ Obesidade: ‚â•25%

üë© **MULHERES:**
‚Ä¢ Essencial: 10-13%
‚Ä¢ Atleta: 14-20%
‚Ä¢ Fitness: 21-24%
‚Ä¢ Aceit√°vel: 25-31%
‚Ä¢ Obesidade: ‚â•32%

---

**10. PESO IDEAL (F√≥rmula de Devine)**

üë® **HOMENS:**
```
Peso Ideal = 50kg + 2.3kg √ó (altura cm - 152.4) √∑ 2.54
```

üë© **MULHERES:**
```
Peso Ideal = 45.5kg + 2.3kg √ó (altura cm - 152.4) √∑ 2.54
```

---

**11. FERRAMENTAS RECOMENDADAS**

üì± **Apps para C√°lculos:**
‚Ä¢ MyFitnessPal (macros)
‚Ä¢ FatSecret (banco de dados)
‚Ä¢ Cronometer (precis√£o)
‚Ä¢ My Macros+ (customiza√ß√£o)

üñ© **Calculadoras Online:**
‚Ä¢ Calculator.net (todas as f√≥rmulas)
‚Ä¢ Examine.com (baseado em ci√™ncia)

---

**12. DICAS PR√ÅTICAS**

üí° **Lembre-se:**
‚Ä¢ Reavalie c√°lculos a cada 4-6 semanas
‚Ä¢ Ajuste conforme progresso real
‚Ä¢ F√≥rmulas s√£o ESTIMATIVAS
‚Ä¢ Escute seu corpo
‚Ä¢ Ades√£o > Perfei√ß√£o matem√°tica
‚Ä¢ Use faixas, n√£o n√∫meros absolutos

üéØ **Sequ√™ncia de Ajustes:**
1. Atividade f√≠sica primeiro
2. Carboidratos depois
3. Prote√≠na mant√©m est√°vel
4. Gordura ajusta fino

---

üìä **EXEMPLO PR√ÅTICO COMPLETO:**

**Perfil:** Mulher, 30 anos, 70kg, 1.65m, Moderadamente Ativa, Meta: Emagrecimento

**Passo 1 - TMB (Mifflin):**
```
(10 √ó 70) + (6.25 √ó 165) - (5 √ó 30) - 161
= 700 + 1031.25 - 150 - 161
= 1420 kcal
```

**Passo 2 - GET:**
```
1420 √ó 1.55 = 2201 kcal
```

**Passo 3 - D√©ficit:**
```
2201 - 500 = 1701 kcal/dia
```

**Passo 4 - Macros:**
```
Prote√≠na: 70 √ó 2.0 = 140g (560 kcal) = 33%
Gordura: 70 √ó 1.0 = 70g (630 kcal) = 37%
Carboidrato: (1701-1190)√∑4 = 128g (512 kcal) = 30%
```

**Resultado:**
‚Ä¢ Calorias: 1701 kcal/dia
‚Ä¢ Prote√≠na: 140g (33%)
‚Ä¢ Carboidrato: 128g (30%)
‚Ä¢ Gordura: 70g (37%)
‚Ä¢ √Ågua: 2.45 litros/dia
‚Ä¢ Perda esperada: 0.5kg/semana

---

üéì **QUER SABER MAIS?**
Posso detalhar qualquer t√≥pico espec√≠fico ou fazer c√°lculos personalizados!"""

    elif 'receita' in lowerMessage or 'prato' in lowerMessage or 'comida' in lowerMessage:
        return """üç≥ **Receitas Saud√°veis e Pr√°ticas - Menu Completo**

**CAF√â DA MANH√É (400-500 kcal)**

**1. Bowl Proteico Completo**
```
ü•£ Ingredientes:
‚Ä¢ 1 x√≠cara de aveia em flocos
‚Ä¢ 1 scoop whey protein (baunilha/chocolate)
‚Ä¢ 200ml leite desnatado ou vegetal
‚Ä¢ 1 banana fatiada
‚Ä¢ 1 col. sopa pasta de amendoim
‚Ä¢ 1 col. ch√° mel
‚Ä¢ Canela a gosto

üìä Macros: 480 kcal | 35g P | 60g C | 12g G

üë®‚Äçüç≥ Preparo:
1. Misture aveia + whey + leite
2. Leve ao microondas 2-3 min
3. Adicione banana fatiada
4. Finalize com pasta amendoim e mel
```

**2. Omelete Fitness**
```
üç≥ Ingredientes:
‚Ä¢ 3 claras + 1 ovo inteiro
‚Ä¢ 50g queijo cottage
‚Ä¢ Tomate, cebola, piment√£o picados
‚Ä¢ Espinafre √† vontade
‚Ä¢ Azeite spray

üìä Macros: 320 kcal | 32g P | 12g C | 16g G

üë®‚Äçüç≥ Preparo:
1. Bata ovos + cottage
2. Refogue legumes
3. Adicione ovos
4. Cozinhe em fogo baixo
```

---

**ALMO√áO/JANTAR (500-600 kcal)**

**3. Bowl de Quinoa Proteico**
```
ü•ó Ingredientes:
‚Ä¢ 1 x√≠cara quinoa cozida
‚Ä¢ 150g peito de frango grelhado
‚Ä¢ 1 ovo poch√™
‚Ä¢ Mix de folhas verdes
‚Ä¢ 1/2 abacate
‚Ä¢ Tomate cereja
‚Ä¢ Azeite + lim√£o

üìä Macros: 580 kcal | 48g P | 52g C | 18g G

üë®‚Äçüç≥ Preparo:
1. Monte a base: quinoa + folhas
2. Adicione frango em cubos
3. Ovo poch√™ no centro
4. Fatias de abacate
5. Tempere: azeite + lim√£o + sal
```

**4. Salm√£o ao Molho de Ervas**
```
üêü Ingredientes:
‚Ä¢ 200g salm√£o
‚Ä¢ 1 batata-doce m√©dia assada
‚Ä¢ Br√≥colis vapor (200g)
‚Ä¢ Molho: azeite, lim√£o, alho, salsa

üìä Macros: 520 kcal | 42g P | 45g C | 20g G

üë®‚Äçüç≥ Preparo:
1. Tempere salm√£o: sal, pimenta, lim√£o
2. Asse 15-20min (180¬∞C)
3. Batata: corte cubos, tempere, asse
4. Br√≥colis: vapor 5-7min
5. Molho: bata tudo no liquidificador
```

**5. Strogonoff Fit de Carne**
```
ü•© Ingredientes:
‚Ä¢ 300g patinho em tiras
‚Ä¢ 1 cebola
‚Ä¢ Champignon 200g
‚Ä¢ 2 col. molho tomate
‚Ä¢ 200ml iogurte natural
‚Ä¢ Temperos: alho, mostarda, or√©gano

üìä Macros: 420 kcal | 52g P | 28g C | 12g G

üë®‚Äçüç≥ Preparo:
1. Refogue carne + temperos
2. Adicione cebola + champignon
3. Molho tomate + √°gua
4. Cozinhe 20min
5. Iogurte no final (n√£o ferver)
```

---

**LANCHES (200-300 kcal)**

**6. Smoothie P√≥s-Treino**
```
ü•§ Ingredientes:
‚Ä¢ 1 banana congelada
‚Ä¢ 1 scoop whey protein
‚Ä¢ 200ml leite desnatado
‚Ä¢ 1 col. sopa aveia
‚Ä¢ 1 col. ch√° cacau
‚Ä¢ Gelo

üìä Macros: 320 kcal | 35g P | 42g C | 5g G

üë®‚Äçüç≥ Preparo:
1. Bata tudo no liquidificador
2. Adicione gelo
3. Bata at√© cremoso
```

**7. Panqueca de Banana Fit**
```
ü•û Ingredientes:
‚Ä¢ 1 banana amassada
‚Ä¢ 2 ovos
‚Ä¢ 2 col. sopa aveia
‚Ä¢ 1 col. ch√° canela
‚Ä¢ Mel para finalizar

üìä Macros: 280 kcal | 18g P | 38g C | 10g G

üë®‚Äçüç≥ Preparo:
1. Misture banana + ovos + aveia
2. Adicione canela
3. Frite em frigideira antiaderente
4. 2-3min cada lado
```

---

**JANTAR LEVE (350-450 kcal)**

**8. Frango Teriyaki com Legumes**
```
üçó Ingredientes:
‚Ä¢ 150g peito de frango
‚Ä¢ Br√≥colis, cenoura, piment√£o
‚Ä¢ Molho: shoyu, gengibre, alho, mel

üìä Macros: 380 kcal | 45g P | 32g C | 8g G

üë®‚Äçüç≥ Preparo:
1. Corte frango em cubos
2. Refogue com molho
3. Adicione legumes
4. Cozinhe 10-15min
```

**9. Atum Selado com Salada**
```
üêü Ingredientes:
‚Ä¢ 150g atum fresco
‚Ä¢ Mix de folhas
‚Ä¢ Tomate, pepino
‚Ä¢ Quinoa 50g cozida
‚Ä¢ Molho: mostarda + lim√£o

üìä Macros: 320 kcal | 40g P | 25g C | 8g G

üë®‚Äçüç≥ Preparo:
1. Atum: grelhe 2min cada lado
2. Monte salada
3. Atum em fatias
4. Regue com molho
```

---

**RECEITAS VEGETARIANAS**

**10. Buddha Bowl Vegano**
```
üå± Ingredientes:
‚Ä¢ 150g gr√£o-de-bico assado
‚Ä¢ 1 x√≠cara quinoa
‚Ä¢ Ab√≥bora assada
‚Ä¢ Espinafre
‚Ä¢ Tahine (pasta gergelim)

üìä Macros: 460 kcal | 22g P | 68g C | 14g G

üë®‚Äçüç≥ Preparo:
1. Gr√£o-de-bico: tempere, asse
2. Ab√≥bora: cubos, tempere, asse
3. Monte bowl com quinoa
4. Tahine por cima
```

---

**SOBREMESAS FIT (150-200 kcal)**

**11. Mousse Proteico de Chocolate**
```
üç´ Ingredientes:
‚Ä¢ 1 abacate pequeno
‚Ä¢ 2 col. sopa cacau em p√≥
‚Ä¢ 1 scoop whey chocolate
‚Ä¢ Ado√ßante a gosto
‚Ä¢ Leite para consist√™ncia

üìä Macros: 180 kcal | 25g P | 12g C | 6g G

üë®‚Äçüç≥ Preparo:
1. Bata tudo no processador
2. Refrigere 2h
3. Sirva gelado
```

---

**DICAS DE MEAL PREP:**

üìÖ **Domingo para Semana:**
1. Cozinhe 1kg frango (varia√ß√µes)
2. Prepare 5 por√ß√µes arroz integral
3. Batata-doce assada (1kg)
4. Vegetais higienizados
5. Por√ß√µes em potes vidro

ü•° **Organize Potes:**
‚Ä¢ Prote√≠na + Carboidrato + Vegetais
‚Ä¢ Etiquete com dia da semana
‚Ä¢ Refrigere at√© 5 dias
‚Ä¢ Congele se necess√°rio

‚è∞ **Tempo de Preparo:**
‚Ä¢ Domingo: 2-3h prepara semana toda
‚Ä¢ Economiza 1h/dia durante semana

---

üí° **DICAS PARA SUCESSO:**

**Temperos Fitness:**
‚Ä¢ Alho, cebola, gengibre
‚Ä¢ Ervas: salsa, coentro, manjeric√£o
‚Ä¢ Especiarias: p√°prica, cominho, c√∫rcuma
‚Ä¢ Lim√£o, vinagre bals√¢mico
‚Ä¢ Pimenta (acelera metabolismo)

**Substitui√ß√µes Inteligentes:**
‚Ä¢ Creme leite ‚Üí Iogurte grego
‚Ä¢ √ìleo ‚Üí Azeite spray
‚Ä¢ Farinha branca ‚Üí Aveia triturada
‚Ä¢ A√ß√∫car ‚Üí Ado√ßante/Mel moderado
‚Ä¢ Macarr√£o ‚Üí Abobrinha espiral

**Armazenamento:**
‚Ä¢ Potes vidro (melhor conserva√ß√£o)
‚Ä¢ Separar prote√≠na de salada
‚Ä¢ Molhos separados
‚Ä¢ Congelar por√ß√µes extras

---

üéØ **PLANEJAMENTO SEMANAL EXEMPLO:**

**Segunda:**
- Caf√©: Bowl Proteico
- Almo√ßo: Frango + Batata-doce + Br√≥colis
- Lanche: Smoothie
- Jantar: Atum Selado + Salada

**Ter√ßa:**
- Caf√©: Omelete Fitness
- Almo√ßo: Bowl Quinoa
- Lanche: Panqueca Banana
- Jantar: Frango Teriyaki

**Quarta:**
- Caf√©: Bowl Proteico
- Almo√ßo: Strogonoff Fit
- Lanche: Smoothie
- Jantar: Salm√£o + Legumes

**Quinta:**
- Caf√©: Omelete + P√£o Integral
- Almo√ßo: Buddha Bowl
- Lanche: Panqueca
- Jantar: Frango + Salada

**Sexta:**
- Caf√©: Bowl Proteico
- Almo√ßo: Bowl Quinoa
- Lanche: Mousse Proteico
- Jantar: Livre (social)

**Final de semana:**
- Flexibilidade 80/20
- Aproveite socialmente
- Volte ao plano segunda

---

üì± **APPS RECOMENDADOS:**
‚Ä¢ Mealime (planejamento refei√ß√µes)
‚Ä¢ Yummly (milhares receitas)
‚Ä¢ Tasty (v√≠deos passo a passo)

üéì **QUER MAIS RECEITAS?**
Posso detalhar qualquer categoria:
- Low carb
- Vegetariano/Vegano
- Sem gl√∫ten/lactose
- Alta prote√≠na
- Crian√ßas
- Idosos"""

    elif 'suplemento' in lowerMessage or 'vitamina' in lowerMessage or 'whey' in lowerMessage:
        return """üíä **Guia Completo de Suplementa√ß√£o Nutricional**

‚ö†Ô∏è **IMPORTANTE:** Suplementos COMPLEMENTAM, nunca substituem alimenta√ß√£o adequada!

---

**SUPLEMENTOS ESSENCIAIS**

**1. PROTE√çNA WHEY**
ü•õ **O que √©:** Prote√≠na do soro do leite, absor√ß√£o r√°pida

**Tipos:**
‚Ä¢ **Concentrado (WPC)**: 70-80% prote√≠na, mais barato
‚Ä¢ **Isolado (WPI)**: 90%+ prote√≠na, sem lactose
‚Ä¢ **Hidrolisado (WPH)**: Pr√©-digerido, mais r√°pido

**Dosagem:**
‚Ä¢ 20-40g por dose
‚Ä¢ 1-3x ao dia conforme necessidade

**Quando tomar:**
‚Ä¢ ‚òÄÔ∏è Caf√© da manh√£ (quebra jejum)
‚Ä¢ üí™ P√≥s-treino (janela anab√≥lica)
‚Ä¢ üåô Antes dormir (case√≠na melhor)

**Indica√ß√£o:**
‚Ä¢ Atletas e praticantes muscula√ß√£o
‚Ä¢ Quem n√£o atinge prote√≠na na dieta
‚Ä¢ Ganho/manuten√ß√£o massa magra

**Pre√ßo m√©dio:** R$ 80-150/kg

**Melhor hor√°rio:** At√© 2h p√≥s-treino

---

**2. CREATINA**
üí™ **O que √©:** Amino√°cido que aumenta energia (ATP)

**Benef√≠cios:**
‚Ä¢ +5-15% for√ßa muscular
‚Ä¢ Ganho massa magra
‚Ä¢ Melhora recupera√ß√£o
‚Ä¢ Pode ajudar cogni√ß√£o

**Dosagem:**
‚Ä¢ **3-5g por dia** (qualquer hora)
‚Ä¢ N√£o precisa satura√ß√£o
‚Ä¢ N√£o precisa ciclar
‚Ä¢ Com ou sem treino

**Melhor tipo:** Creatina Monohidratada (mais estudada)

**Quando tomar:**
‚Ä¢ Qualquer hora do dia
‚Ä¢ Pode misturar com whey

**Mitos desmistificados:**
‚Ä¢ ‚ùå N√£o causa queda cabelo
‚Ä¢ ‚ùå N√£o prejudica rins (se saud√°veis)
‚Ä¢ ‚ùå N√£o ret√©m l√≠quido subcut√¢neo
‚Ä¢ ‚úÖ Funciona (+ estudada do mundo)

**Pre√ßo m√©dio:** R$ 40-80 (300g = 100 doses)

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

---

**3. √îMEGA-3**
üêü **O que √©:** Gordura essencial EPA e DHA

**Benef√≠cios:**
‚Ä¢ Anti-inflamat√≥rio potente
‚Ä¢ Sa√∫de cardiovascular
‚Ä¢ Melhora humor/cogni√ß√£o
‚Ä¢ Auxilia composi√ß√£o corporal

**Dosagem:**
‚Ä¢ **1-3g EPA+DHA por dia**
‚Ä¢ Ler r√≥tulo (n√£o √© peso c√°psula)
‚Ä¢ Dividir em 2 doses

**Quando tomar:**
‚Ä¢ Com refei√ß√£o gordurosa
‚Ä¢ Manh√£ e noite

**Melhor fonte:** Peixe selvagem > Suplemento

**Quem precisa:**
‚Ä¢ Todos (defici√™ncia comum)
‚Ä¢ Especialmente quem n√£o come peixe

**Pre√ßo m√©dio:** R$ 50-100/m√™s

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

---

**4. VITAMINA D3**
‚òÄÔ∏è **O que √©:** Horm√¥nio esteroide, n√£o vitamina

**Benef√≠cios:**
‚Ä¢ Sa√∫de √≥ssea
‚Ä¢ Imunidade
‚Ä¢ Testosterona
‚Ä¢ Humor

**Dosagem:**
‚Ä¢ **2.000-5.000 UI/dia**
‚Ä¢ Dose exames: 10.000 UI tempor√°rio

**Quando tomar:**
‚Ä¢ Manh√£ com gordura

**Quem precisa:**
‚Ä¢ 70%+ popula√ß√£o deficiente
‚Ä¢ Teste antes (25-OH-vitamina D)

**Ideal no sangue:** 40-60 ng/mL

**Pre√ßo m√©dio:** R$ 20-40/m√™s

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê

---

**5. MULTIVITAM√çNICO**
üíä **O que √©:** Mix vitaminas e minerais

**Indica√ß√£o:**
‚Ä¢ Dietas restritivas
‚Ä¢ Idosos
‚Ä¢ Veganos/Vegetarianos
‚Ä¢ Atletas intenso

**Dosagem:**
‚Ä¢ Conforme r√≥tulo (1-2x dia)

**Quando tomar:**
‚Ä¢ Com refei√ß√£o

**Escolha:**
‚Ä¢ Preferir doses modestas
‚Ä¢ Evitar mega doses
‚Ä¢ Formas de melhor absor√ß√£o

**Pre√ßo m√©dio:** R$ 40-80/m√™s

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê

---

**SUPLEMENTOS PARA OBJETIVOS**

**üî• EMAGRECIMENTO:**

**6. CAFE√çNA**
‚òï **Benef√≠cios:**
‚Ä¢ Acelera metabolismo 3-11%
‚Ä¢ Aumenta energia treino
‚Ä¢ Melhora foco

**Dosagem:**
‚Ä¢ 200-400mg/dia
‚Ä¢ At√© 6h antes dormir

**Fonte:** Caf√©, ch√° verde, suplemento

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê

---

**7. TERMOG√äNICOS**
üî• **Ingredientes:** Cafe√≠na + ch√° verde + pimenta

**Dosagem:**
‚Ä¢ Conforme r√≥tulo
‚Ä¢ Ciclar 8 semanas ON / 2 OFF

**Aten√ß√£o:**
‚Ä¢ Pode causar ansiedade
‚Ä¢ N√£o usar se hipertenso

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê

---

**üí™ GANHO DE MASSA:**

**8. HIPERCAL√ìRICO (MASS GAINER)**
üçº **O que √©:** Prote√≠na + carboidrato + gordura

**Quando usar:**
‚Ä¢ Dificuldade ganhar peso
‚Ä¢ N√£o consegue comer suficiente

**Dosagem:**
‚Ä¢ 500-1000 kcal extras/dia

**Melhor:** Fazer em casa (aveia + whey + pasta amendoim + banana)

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê

---

**9. BCAA**
üî∏ **O que √©:** 3 amino√°cidos essenciais

**Benef√≠cios:**
‚Ä¢ Recupera√ß√£o muscular
‚Ä¢ Reduz fadiga
‚Ä¢ (Evid√™ncias fracas)

**Dosagem:**
‚Ä¢ 5-10g durante treino

**Opini√£o:** Desnecess√°rio se come prote√≠na suficiente

**Efic√°cia:** ‚≠ê‚≠ê

---

**10. GLUTAMINA**
‚ö™ **O que √©:** Amino√°cido para recupera√ß√£o

**Benef√≠cios:**
‚Ä¢ Sa√∫de intestinal
‚Ä¢ Sistema imune
‚Ä¢ Recupera√ß√£o

**Dosagem:**
‚Ä¢ 5-10g/dia

**Opini√£o:** √ötil em overtraining

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê

---

**üèÉ PERFORMANCE ESPORTIVA:**

**11. BETA-ALANINA**
üîµ **O que √©:** Amino√°cido que reduz fadiga

**Benef√≠cios:**
‚Ä¢ Aumenta resist√™ncia
‚Ä¢ Retarda fadiga muscular

**Dosagem:**
‚Ä¢ 3-6g/dia
‚Ä¢ Causa formigamento (normal)

**Melhor para:** Treinos 60-240 segundos

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê

---

**12. CITRULINA MALATO**
üî¥ **O que √©:** Precursor √≥xido n√≠trico

**Benef√≠cios:**
‚Ä¢ Mais pump
‚Ä¢ Melhora fluxo sangu√≠neo
‚Ä¢ Reduz fadiga

**Dosagem:**
‚Ä¢ 6-8g pr√©-treino

**Efic√°cia:** ‚≠ê‚≠ê‚≠ê‚≠ê

---

**üìä TABELA RESUMO:**

| Suplemento | Evid√™ncia | Custo | Prioridade |
|-----------|-----------|-------|------------|
| Whey | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | $$$ | Alta |
| Creatina | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | $ | Alta |
| √îmega-3 | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | $$ | Alta |
| Vitamina D | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | $ | Alta |
| Cafe√≠na | ‚≠ê‚≠ê‚≠ê‚≠ê | $ | M√©dia |
| Beta-Alanina | ‚≠ê‚≠ê‚≠ê‚≠ê | $$ | M√©dia |
| Citrulina | ‚≠ê‚≠ê‚≠ê‚≠ê | $$ | M√©dia |
| Multivitam√≠nico | ‚≠ê‚≠ê‚≠ê | $$ | Baixa |
| BCAA | ‚≠ê‚≠ê | $$$ | Baixa |
| Glutamina | ‚≠ê‚≠ê | $$ | Baixa |

---

**üö´ SUPLEMENTOS QUESTION√ÅVEIS:**

**N√ÉO RECOMENDADOS:**
‚Ä¢ Shakes detox (n√£o existem)
‚Ä¢ Ch√°s emagrecedores milagrosos
‚Ä¢ Termog√™nicos extremos
‚Ä¢ √Åcido linol√©ico (CLA) - pouco eficaz
‚Ä¢ Tribulus terrestris - n√£o aumenta testosterona
‚Ä¢ Col√°geno - n√£o serve pele (degradado)

---

**üí° DICAS PR√ÅTICAS:**

**Como escolher marca:**
‚Ä¢ Certifica√ß√£o ANVISA
‚Ä¢ Selo GMP (Good Manufacturing)
‚Ä¢ Reviews reais
‚Ä¢ Evitar promessas milagrosas

**Economize:**
‚Ä¢ Compre em p√≥ (n√£o c√°psula)
‚Ä¢ Marcas nacionais s√£o boas
‚Ä¢ Aproveite promo√ß√µes
‚Ä¢ Fa√ßa c√°lculo por dose

**Ordem de prioridade:**
1. **Dieta adequada primeiro**
2. Treino consistente
3. Sono 7-9h
4. Depois suplementos

---

**‚ö†Ô∏è CONTRAINDICA√á√ïES:**

**Consulte m√©dico se:**
‚Ä¢ Gestante/Lactante
‚Ä¢ Doen√ßa renal
‚Ä¢ Doen√ßa hep√°tica
‚Ä¢ Hipertens√£o
‚Ä¢ Medicamentos controlados

---

**üî¨ EXAMES RECOMENDADOS:**

**Antes de suplementar, teste:**
‚Ä¢ Vitamina D (25-OH)
‚Ä¢ Ferritina (ferro)
‚Ä¢ B12
‚Ä¢ Zinco
‚Ä¢ Magn√©sio
‚Ä¢ Perfil lip√≠dico

---

**üì± APPS RECOMENDADOS:**
‚Ä¢ Labdoor (rankings qualidade)
‚Ä¢ Examine.com (ci√™ncia)
‚Ä¢ ConsumerLab (testes)

---

**üéØ PLANO DE SUPLEMENTA√á√ÉO B√ÅSICO:**

**Iniciante (M√™s 1-3):**
‚Ä¢ Whey protein
‚Ä¢ Creatina
‚Ä¢ Multivitam√≠nico

**Intermedi√°rio (M√™s 4-6):**
‚Ä¢ Adicionar √îmega-3
‚Ä¢ Vitamina D
‚Ä¢ Cafe√≠na pr√©-treino

**Avan√ßado (6+ meses):**
‚Ä¢ Beta-Alanina
‚Ä¢ Citrulina
‚Ä¢ ZMA (sono)

---

üí° **LEMBRE-SE:**
Suplementos s√£o apenas **5% do resultado**:
‚Ä¢ 50% - Dieta
‚Ä¢ 30% - Treino
‚Ä¢ 15% - Descanso
‚Ä¢ 5% - Suplementos

üéì **D√∫vidas espec√≠ficas?** Pergunte sobre qualquer suplemento!"""

    else:
        # Resposta padr√£o melhorada
        return """ü§ñ **Assistente Nutricional NutriStock 360 - Vers√£o 2.0**

Ol√°! Sou seu assistente especializado em nutri√ß√£o cl√≠nica, esportiva e funcional!

**üìã POSSO AJUDAR COM:**

**1. üçΩÔ∏è Planejamento Alimentar:**
‚Ä¢ Elabora√ß√£o de planos personalizados completos
‚Ä¢ C√°lculo de necessidades cal√≥ricas (TMB e GET)
‚Ä¢ Distribui√ß√£o ideal de macronutrientes
‚Ä¢ Estrat√©gias de meal prep
‚Ä¢ Card√°pios para diferentes objetivos

**2. ü©∫ Nutri√ß√£o Cl√≠nica:**
‚Ä¢ Diabetes tipo 1 e 2
‚Ä¢ Hipertens√£o arterial
‚Ä¢ Doen√ßas renais
‚Ä¢ Doen√ßas cardiovasculares
‚Ä¢ Dist√∫rbios gastrointestinais
‚Ä¢ Alergias e intoler√¢ncias
‚Ä¢ Nutri√ß√£o em gesta√ß√£o e lacta√ß√£o

**3. üí™ Nutri√ß√£o Esportiva:**
‚Ä¢ Ganho de massa muscular
‚Ä¢ Perda de gordura corporal
‚Ä¢ Performance atl√©tica
‚Ä¢ Periodiza√ß√£o nutricional
‚Ä¢ Estrat√©gias pr√©/p√≥s-treino
‚Ä¢ Hidrata√ß√£o para atletas

**4. üßÆ C√°lculos e Avalia√ß√µes:**
‚Ä¢ Taxa Metab√≥lica Basal (TMB)
‚Ä¢ Gasto Energ√©tico Total (GET)
‚Ä¢ IMC e classifica√ß√£o
‚Ä¢ Percentual de gordura corporal
‚Ä¢ Necessidades h√≠dricas
‚Ä¢ Distribui√ß√£o de macronutrientes

**5. üç≥ Receitas e Prepara√ß√µes:**
‚Ä¢ Receitas saud√°veis e pr√°ticas
‚Ä¢ Substitui√ß√µes inteligentes
‚Ä¢ Meal prep (preparo de refei√ß√µes)
‚Ä¢ Card√°pios semanais
‚Ä¢ Receitas para diferentes dietas:
  - Low carb
  - Cetog√™nica
  - Vegetariana/Vegana
  - Sem gl√∫ten
  - Sem lactose

**6. üíä Suplementa√ß√£o:**
‚Ä¢ Suplementos baseados em evid√™ncias
‚Ä¢ Dosagens corretas
‚Ä¢ Timing de suplementos
‚Ä¢ Intera√ß√µes medicamentosas
‚Ä¢ Custo-benef√≠cio
‚Ä¢ Marcas confi√°veis

**7. üéØ Estrat√©gias de Ades√£o:**
‚Ä¢ Motiva√ß√£o de pacientes
‚Ä¢ Gatilhos comportamentais
‚Ä¢ Gamifica√ß√£o do processo
‚Ä¢ Supera√ß√£o de plat√¥s
‚Ä¢ Preven√ß√£o de reca√≠das
‚Ä¢ Psicologia nutricional

**8. üìö Educa√ß√£o Nutricional:**
‚Ä¢ Leitura de r√≥tulos
‚Ä¢ Escolhas inteligentes no supermercado
‚Ä¢ Comer fora de casa
‚Ä¢ Viagens e eventos
‚Ä¢ Alimenta√ß√£o para fam√≠lia
‚Ä¢ Mitos e verdades

**9. üéì Orienta√ß√µes Profissionais:**
‚Ä¢ Abordagem com pacientes dif√≠ceis
‚Ä¢ Casos cl√≠nicos complexos
‚Ä¢ Interpreta√ß√£o de exames laboratoriais
‚Ä¢ Conduta em situa√ß√µes espec√≠ficas
‚Ä¢ √âtica nutricional

---

**üí° EXEMPLOS DE PERGUNTAS QUE POSSO RESPONDER:**

‚Ä¢ "Como montar um plano alimentar para ganho de massa muscular?"
‚Ä¢ "Qual estrat√©gia para paciente diab√©tico com obesidade?"
‚Ä¢ "Como calcular as necessidades cal√≥ricas do meu paciente?"
‚Ä¢ "Me d√™ receitas pr√°ticas para a semana"
‚Ä¢ "Como motivar um paciente desmotivado?"
‚Ä¢ "Qual a melhor suplementa√ß√£o para hipertrofia?"
‚Ä¢ "Como fazer meal prep eficiente?"
‚Ä¢ "Estrat√©gias para paciente que n√£o emagrece?"

---

**üî• FUNCIONALIDADES ESPECIAIS:**

‚úÖ Respostas baseadas em evid√™ncias cient√≠ficas
‚úÖ Detalhamento completo e did√°tico
‚úÖ Exemplos pr√°ticos do dia a dia
‚úÖ Linguagem acess√≠vel
‚úÖ Foco em resultados reais
‚úÖ Considera√ß√£o individual de cada caso

---

**üéØ COMO POSSO AJUDAR VOC√ä HOJE?**

Fa√ßa sua pergunta espec√≠fica e receberei uma resposta completa e personalizada!

Exemplos:
‚Ä¢ Digite: "plano alimentar para hipertrofia"
‚Ä¢ Digite: "dieta para diab√©tico"
‚Ä¢ Digite: "receitas pr√°ticas"
‚Ä¢ Digite: "como motivar pacientes"
‚Ä¢ Digite: "c√°lculo de macros"

Estou aqui para te ajudar! üí™"""

def save_llm_conversation(user_id, patient_id, conv_type, user_msg, llm_resp):
    """Salva conversa no banco de dados"""
    try:
        conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO llm_conversations (user_id, patient_id, conversation_type, user_message, llm_response)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, patient_id, conv_type, user_msg, llm_resp))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar conversa: {e}")
        return False

# ============================================================================
# DASHBOARD PRINCIPAL
# ============================================================================

def show_dashboard():
    """Dashboard Geral com M√©tricas e Gr√°ficos"""
    st.markdown('<div class="main-header"><h1>üìä Dashboard Geral</h1><p>Vis√£o completa do seu consult√≥rio nutricional</p></div>', unsafe_allow_html=True)
    
    try:
        # Buscar dados
        conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
        
        total_patients = pd.read_sql_query("SELECT COUNT(*) as total FROM patients WHERE active = 1", conn).iloc[0]['total']
        today = datetime.now().strftime('%Y-%m-%d')
        consultations_today = pd.read_sql_query(f"SELECT COUNT(*) as total FROM appointments WHERE date = '{today}'", conn).iloc[0]['total']
        
        # Cards de M√©tricas
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üë• Total de Pacientes</h3>
                <h1 style="color: #4CAF50;">{total_patients}</h1>
                <p style="color: #4CAF50; font-weight: bold;">‚Üë +12% este m√™s</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üìÖ Consultas Hoje</h3>
                <h1 style="color: #2196F3;">{consultations_today}</h1>
                <p style="color: #2196F3; font-weight: bold;">3 pendentes</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üí∞ Receita Mensal</h3>
                <h1 style="color: #FF9800;">R$ 26.100</h1>
                <p style="color: #4CAF50; font-weight: bold;">‚Üë +18% vs m√™s anterior</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown(f"""
            <div class="metric-card">
                <h3>üéØ Taxa de Sucesso</h3>
                <h1 style="color: #9C27B0;">87%</h1>
                <p style="color: #4CAF50; font-weight: bold;">‚Üë +3% este trimestre</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìà Evolu√ß√£o de Pacientes e Receita")
            
            # Dados de evolu√ß√£o
            months = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set']
            patients_data = [10, 15, 18, 25, 32, 38, 45, 52, total_patients]
            revenue_data = [4500, 6750, 8100, 11250, 14400, 17100, 20250, 23400, 26100]
            
            df_progress = pd.DataFrame({
                'M√™s': months,
                'Pacientes': patients_data,
                'Receita (R$)': revenue_data
            })
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=df_progress['M√™s'], 
                y=df_progress['Pacientes'],
                name='Pacientes',
                line=dict(color='#4CAF50', width=3),
                fill='tonexty'
            ))
            fig.add_trace(go.Scatter(
                x=df_progress['M√™s'], 
                y=df_progress['Receita (R$)'],
                name='Receita (R$)',
                line=dict(color='#2196F3', width=3),
                yaxis='y2'
            ))
            
            fig.update_layout(
                yaxis=dict(title='Pacientes'),
                yaxis2=dict(title='Receita (R$)', overlaying='y', side='right'),
                hovermode='x unified',
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.markdown("### üìä Distribui√ß√£o de Objetivos")
            
            df_goals = pd.DataFrame({
                'Objetivo': ['Perder Peso', 'Ganhar Massa', 'Manuten√ß√£o', 'Sa√∫de'],
                'Quantidade': [45, 30, 15, 10]
            })
            
            fig = px.pie(df_goals, values='Quantidade', names='Objetivo',
                         color_discrete_sequence=['#4CAF50', '#2196F3', '#FF9800', '#9C27B0'])
            fig.update_traces(textposition='inside', textinfo='percent+label')
            fig.update_layout(height=400)
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Pr√≥ximas Consultas
        st.markdown("### üìÖ Pr√≥ximas Consultas")
        
        appointments_df = pd.read_sql_query("""
            SELECT a.id, p.full_name, a.date, a.time, a.type, a.status
            FROM appointments a
            JOIN patients p ON a.patient_id = p.id
            WHERE a.date >= date('now')
            ORDER BY a.date, a.time
            LIMIT 5
        """, conn)
        
        if not appointments_df.empty:
            for _, apt in appointments_df.iterrows():
                status_color = '#4CAF50' if apt['status'] == 'confirmed' else '#FF9800'
                st.markdown(f"""
                <div class="patient-card">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <h4>{apt['full_name']}</h4>
                            <p>üìÖ {apt['date']} √†s {apt['time']}</p>
                        </div>
                        <span style="background: {status_color}20; color: {status_color}; 
                                    padding: 0.5rem 1rem; border-radius: 20px; font-weight: bold;">
                            {apt['type']}
                        </span>
                    </div>
                </div>
                """, unsafe_allow_html=True)
        else:
            st.info("üìÜ Nenhuma consulta agendada para os pr√≥ximos dias.")
        
        conn.close()
        
    except Exception as e:
        st.error(f"Erro ao carregar dashboard: {e}")

# ============================================================================
# GEST√ÉO COMPLETA DE PACIENTES (CRUD COMPLETO)
# ============================================================================

def show_patients():
    """Gest√£o Completa de Pacientes com CRUD"""
    st.markdown('<div class="main-header"><h1>üë• Gest√£o de Pacientes</h1><p>CRUD Completo - Criar, Ler, Atualizar, Deletar</p></div>', unsafe_allow_html=True)
    
    # Inicializar estados
    if 'show_new_patient_form' not in st.session_state:
        st.session_state.show_new_patient_form = False
    
    if 'selected_patient_id' not in st.session_state:
        st.session_state.selected_patient_id = None
    
    try:
        # Buscar pacientes
        conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
        patients_df = pd.read_sql_query("""
            SELECT id, full_name, birth_date, weight, height, goal, progress, last_visit, phone, email, gender
            FROM patients 
            WHERE active = 1
            ORDER BY full_name
        """, conn)
        conn.close()
        
        # Bot√µes de a√ß√£o
        col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
        with col1:
            search = st.text_input("üîç Buscar paciente", placeholder="Digite o nome do paciente...")
        with col2:
            if st.button("‚ûï Novo Paciente", use_container_width=True):
                st.session_state.show_new_patient_form = True
                st.session_state.selected_patient_id = None
                st.rerun()
        with col3:
            filter_goal = st.selectbox("Filtrar", ["Todos", "Perder peso", "Ganhar massa", "Manuten√ß√£o", "Sa√∫de"])
        with col4:
            if st.button("üîÑ Atualizar", use_container_width=True):
                st.rerun()
        
        # Formul√°rio de novo/editar paciente
        if st.session_state.show_new_patient_form or st.session_state.selected_patient_id:
            # Se est√° editando, buscar dados do paciente
            patient_data = None
            if st.session_state.selected_patient_id:
                conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
                patient_data = pd.read_sql_query("""
                    SELECT * FROM patients WHERE id = ?
                """, conn, params=(st.session_state.selected_patient_id,)).iloc[0]
                conn.close()
            
            title = "üìù Editar Paciente" if patient_data is not None else "üìù Cadastrar Novo Paciente"
            
            with st.expander(title, expanded=True):
                with st.form("patient_form", clear_on_submit=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        name = st.text_input("Nome Completo *", 
                                           value=patient_data['full_name'] if patient_data is not None else "")
                        email = st.text_input("Email", 
                                            value=patient_data['email'] if patient_data is not None else "")
                        birth_date = st.date_input("Data de Nascimento", 
                                                  value=datetime.strptime(str(patient_data['birth_date']), '%Y-%m-%d').date() if patient_data is not None and patient_data['birth_date'] else datetime.now())
                        weight = st.number_input("Peso (kg)", min_value=0.0, max_value=300.0, 
                                               value=float(patient_data['weight']) if patient_data is not None and patient_data['weight'] else 70.0)
                        goal = st.selectbox("Objetivo", ["Perder peso", "Ganhar massa", "Manuten√ß√£o", "Sa√∫de"],
                                          index=["Perder peso", "Ganhar massa", "Manuten√ß√£o", "Sa√∫de"].index(patient_data['goal']) if patient_data is not None and patient_data['goal'] else 0)
                    
                    with col2:
                        phone = st.text_input("Telefone", 
                                            value=patient_data['phone'] if patient_data is not None else "")
                        gender = st.selectbox("G√™nero", ["Masculino", "Feminino", "Outro"],
                                            index=["Masculino", "Feminino", "Outro"].index(patient_data['gender']) if patient_data is not None and patient_data['gender'] else 0)
                        height = st.number_input("Altura (m)", min_value=0.0, max_value=3.0, 
                                               value=float(patient_data['height']) if patient_data is not None and patient_data['height'] else 1.70, step=0.01)
                        target_weight = st.number_input("Peso Meta (kg)", min_value=0.0, max_value=300.0, 
                                                       value=float(patient_data['target_weight']) if patient_data is not None and patient_data['target_weight'] else 65.0)
                        progress = st.slider("Progresso (%)", 0, 100, 
                                           value=int(patient_data['progress']) if patient_data is not None else 0)
                    
                    medical_conditions = st.text_area("Condi√ß√µes M√©dicas", 
                                                     value=patient_data['medical_conditions'] if patient_data is not None and patient_data['medical_conditions'] else "")
                    allergies = st.text_area("Alergias Alimentares", 
                                            value=patient_data['allergies'] if patient_data is not None and patient_data['allergies'] else "")
                    notes = st.text_area("Observa√ß√µes", 
                                       value=patient_data['notes'] if patient_data is not None and patient_data['notes'] else "")
                    
                    col1, col2 = st.columns([3, 1])
                    
                    with col1:
                        submitted = st.form_submit_button("üíæ Salvar Paciente", use_container_width=True)
                    
                    with col2:
                        cancel = st.form_submit_button("‚ùå Cancelar", use_container_width=True)
                    
                    if cancel:
                        st.session_state.show_new_patient_form = False
                        st.session_state.selected_patient_id = None
                        st.rerun()
                    
                    if submitted:
                        if name:
                            try:
                                conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
                                cursor = conn.cursor()
                                
                                if patient_data is not None:
                                    # Atualizar paciente existente
                                    cursor.execute('''
                                        UPDATE patients SET
                                        full_name = ?, email = ?, phone = ?, birth_date = ?, gender = ?,
                                        weight = ?, height = ?, target_weight = ?, goal = ?,
                                        medical_conditions = ?, allergies = ?, notes = ?, progress = ?,
                                        updated_at = CURRENT_TIMESTAMP
                                        WHERE id = ?
                                    ''', (name, email, phone, birth_date, gender, weight, height, 
                                          target_weight, goal, medical_conditions, allergies, notes, progress,
                                          st.session_state.selected_patient_id))
                                    
                                    st.success("‚úÖ Paciente atualizado com sucesso!")
                                else:
                                    # Inserir novo paciente
                                    cursor.execute('''
                                        INSERT INTO patients 
                                        (user_id, full_name, email, phone, birth_date, gender, weight, height, 
                                         target_weight, goal, medical_conditions, allergies, notes, progress, last_visit)
                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                                    ''', (st.session_state.user['id'], name, email, phone, birth_date, gender,
                                          weight, height, target_weight, goal, medical_conditions, allergies, 
                                          notes, progress, datetime.now().strftime('%Y-%m-%d')))
                                    
                                    st.success("‚úÖ Paciente cadastrado com sucesso!")
                                
                                conn.commit()
                                conn.close()
                                
                                st.session_state.show_new_patient_form = False
                                st.session_state.selected_patient_id = None
                                st.rerun()
                            except Exception as e:
                                st.error(f"‚ùå Erro ao salvar paciente: {e}")
                        else:
                            st.error("‚ö†Ô∏è Nome √© obrigat√≥rio!")
        
        st.markdown("<br>", unsafe_allow_html=True)
        
        # Filtrar pacientes
        if not patients_df.empty:
            if search:
                patients_df = patients_df[patients_df['full_name'].str.contains(search, case=False, na=False)]
            
            if filter_goal != "Todos":
                patients_df = patients_df[patients_df['goal'] == filter_goal]
            
            st.markdown(f"### üìã {len(patients_df)} Pacientes Encontrados")
            
            # Exibir pacientes em cards
            cols = st.columns(2)
            for idx, patient in patients_df.iterrows():
                col_idx = idx % 2
                
                with cols[col_idx]:
                    # Calcular IMC
                    imc = patient['weight'] / (patient['height'] ** 2) if patient['height'] > 0 else 0
                    
                    # Calcular idade
                    if patient['birth_date']:
                        try:
                            birth = datetime.strptime(str(patient['birth_date']), '%Y-%m-%d')
                            age = (datetime.now() - birth).days // 365
                        except:
                            age = "N/A"
                    else:
                        age = "N/A"
                    
                    # Card do paciente
                    with st.container():
                        st.markdown(f"""
                        <div class="patient-card">
                            <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem;">
                                <div>
                                    <h3 style="margin: 0; color: #333;">{patient['full_name']}</h3>
                                    <p style="margin: 0.3rem 0; color: #666;">{age} anos ‚Ä¢ IMC: {imc:.1f}</p>
                                </div>
                                <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                                            width: 50px; height: 50px; border-radius: 50%;
                                            display: flex; align-items: center; justify-content: center;
                                            color: white; font-weight: bold; font-size: 1.2rem;">
                                    {patient['full_name'][:2].upper()}
                                </div>
                            </div>
                            
                            <div style="margin-bottom: 1rem;">
                                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
                                    <span style="color: #666;">Progresso:</span>
                                    <span style="color: #667eea; font-weight: bold;">{patient['progress']}%</span>
                                </div>
                                <div style="background: #e0e0e0; height: 10px; border-radius: 5px; overflow: hidden;">
                                    <div style="background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
                                                width: {patient['progress']}%; height: 100%;"></div>
                                </div>
                            </div>
                            
                            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; margin-bottom: 1rem;">
                                <div><small style="color: #666;">Peso:</small> <strong>{patient['weight']} kg</strong></div>
                                <div><small style="color: #666;">Altura:</small> <strong>{patient['height']} m</strong></div>
                                <div style="grid-column: 1 / -1;">
                                    <small style="color: #666;">Objetivo:</small> 
                                    <strong style="color: #667eea;">{patient['goal']}</strong>
                                </div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Bot√µes de a√ß√£o
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            if st.button("üìã Ver Ficha", key=f"view_{patient['id']}", use_container_width=True):
                                st.session_state.viewing_patient = patient['id']
                                st.rerun()
                        
                        with col2:
                            if st.button("‚úèÔ∏è Editar", key=f"edit_{patient['id']}", use_container_width=True):
                                st.session_state.selected_patient_id = patient['id']
                                st.session_state.show_new_patient_form = False
                                st.rerun()
                        
                        with col3:
                            if st.button("üóëÔ∏è Excluir", key=f"delete_{patient['id']}", use_container_width=True):
                                if st.session_state.get(f"confirm_delete_{patient['id']}", False):
                                    # Deletar paciente (soft delete)
                                    conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
                                    cursor = conn.cursor()
                                    cursor.execute("UPDATE patients SET active = 0 WHERE id = ?", (patient['id'],))
                                    conn.commit()
                                    conn.close()
                                    st.success("‚úÖ Paciente removido!")
                                    st.rerun()
                                else:
                                    st.session_state[f"confirm_delete_{patient['id']}"] = True
                                    st.warning("‚ö†Ô∏è Clique novamente para confirmar exclus√£o!")
        else:
            st.info("üë• Nenhum paciente cadastrado ainda. Cadastre o primeiro!")
    
    except Exception as e:
        st.error(f"Erro ao carregar pacientes: {e}")

# ============================================================================
# CHAT COM IA MELHORADO E PERSISTENTE
# ============================================================================

def show_chat_ia():
    """Chat Inteligente com IA/LLM com hist√≥rico persistente"""
    st.markdown('<div class="main-header"><h1>ü§ñ Assistente Nutricional IA</h1><p>Chat avan√ßado com hist√≥rico persistente e respostas contextuais</p></div>', unsafe_allow_html=True)
    
    # Inicializar hist√≥rico
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
        
        # Carregar √∫ltimas conversas do banco
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            last_conversations = pd.read_sql_query("""
                SELECT user_message, llm_response, created_at
                FROM llm_conversations
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT 10
            """, conn, params=(st.session_state.user['id'],))
            
            # Reverter ordem para mostrar mais antigas primeiro
            last_conversations = last_conversations.iloc[::-1]
            
            for _, conv in last_conversations.iterrows():
                time_str = datetime.strptime(str(conv['created_at']), '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
                st.session_state.chat_history.append({
                    'sender': 'user',
                    'message': conv['user_message'],
                    'time': time_str
                })
                st.session_state.chat_history.append({
                    'sender': 'ai',
                    'message': conv['llm_response'],
                    'time': time_str
                })
            
            conn.close()
        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel carregar hist√≥rico anterior: {e}")
    
    # Sugest√µes r√°pidas
    if len(st.session_state.chat_history) == 0:
        st.markdown("### üí° Sugest√µes R√°pidas:")
        col1, col2, col3, col4 = st.columns(4)
        
        suggestions = [
            ("üìã Como montar um plano alimentar completo?", col1),
            ("ü©∫ Dieta para diab√©tico tipo 2", col2),
            ("üí™ Estrat√©gias de motiva√ß√£o de pacientes", col3),
            ("üßÆ C√°lculos nutricionais detalhados", col4),
            ("üç≥ Receitas pr√°ticas e saud√°veis", col1),
            ("üíä Guia de suplementa√ß√£o", col2),
            ("üìä Interpreta√ß√£o de exames", col3),
            ("üéØ Como quebrar plat√¥s", col4)
        ]
        
        for suggestion, col in suggestions:
            with col:
                if st.button(suggestion, use_container_width=True, key=f"suggest_{suggestion[:20]}"):
                    user_msg = suggestion.replace("üìã ", "").replace("ü©∫ ", "").replace("üí™ ", "").replace("üßÆ ", "").replace("üç≥ ", "").replace("üíä ", "").replace("üìä ", "").replace("üéØ ", "")
                    
                    with st.spinner("ü§ñ Gerando resposta..."):
                        ai_response = get_llm_response(user_msg)
                        
                        st.session_state.chat_history.append({
                            'sender': 'user',
                            'message': user_msg,
                            'time': datetime.now().strftime('%H:%M')
                        })
                        
                        st.session_state.chat_history.append({
                            'sender': 'ai',
                            'message': ai_response,
                            'time': datetime.now().strftime('%H:%M')
                        })
                        
                        save_llm_conversation(
                            st.session_state.user['id'],
                            None,
                            'general_chat',
                            user_msg,
                            ai_response
                        )
                    
                    st.rerun()
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Container de chat com altura fixa
    chat_container = st.container()
    
    with chat_container:
        # Exibir hist√≥rico
        for msg in st.session_state.chat_history:
            if msg['sender'] == 'user':
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>Voc√™:</strong> {msg['message']}<br>
                    <small style="opacity: 0.7;">{msg['time']}</small>
                </div>
                """, unsafe_allow_html=True)
            else:
                # Processar markdown da resposta
                response_formatted = msg['message'].replace('\n', '<br>')
                st.markdown(f"""
                <div class="chat-message ai-message">
                    <strong>ü§ñ NutriAssist AI:</strong><br>
                    {response_formatted}<br>
                    <small style="opacity: 0.7;">{msg['time']}</small>
                </div>
                """, unsafe_allow_html=True)
    
    # Input de mensagem
    st.markdown("<br>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([5, 1])
    
    with col1:
        user_input = st.text_input("üí¨ Digite sua pergunta...", key="chat_input", 
                                    placeholder="Ex: Como aumentar a ades√£o dos pacientes?")
    
    with col2:
        send_btn = st.button("üì§ Enviar", use_container_width=True)
    
    if send_btn and user_input:
        with st.spinner("ü§ñ IA est√° pensando..."):
            ai_response = get_llm_response(user_input)
            
            st.session_state.chat_history.append({
                'sender': 'user',
                'message': user_input,
                'time': datetime.now().strftime('%H:%M')
            })
            
            st.session_state.chat_history.append({
                'sender': 'ai',
                'message': ai_response,
                'time': datetime.now().strftime('%H:%M')
            })
            
            save_llm_conversation(
                st.session_state.user['id'],
                None,
                'general_chat',
                user_input,
                ai_response
            )
        
        st.rerun()
    
    # Bot√µes de controle
    st.markdown("<br>", unsafe_allow_html=True)
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ Limpar Chat", use_container_width=True):
            st.session_state.chat_history = []
            st.rerun()
    
    with col2:
        if st.button("üíæ Salvar Conversa", use_container_width=True):
            st.success("‚úÖ Conversa j√° est√° sendo salva automaticamente!")
    
    with col3:
        if st.button("üì§ Exportar Hist√≥rico", use_container_width=True):
            # Criar arquivo de texto com hist√≥rico
            export_text = f"# HIST√ìRICO DE CONVERSAS - NutriStock 360\n"
            export_text += f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n"
            export_text += f"Nutricionista: {st.session_state.user['full_name']}\n\n"
            export_text += "="*80 + "\n\n"
            
            for msg in st.session_state.chat_history:
                sender = "VOC√ä" if msg['sender'] == 'user' else "IA NUTRIASSIST"
                export_text += f"[{msg['time']}] {sender}:\n{msg['message']}\n\n"
                export_text += "-"*80 + "\n\n"
            
            st.download_button(
                label="üíæ Baixar Hist√≥rico (.txt)",
                data=export_text,
                file_name=f"historico_chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt",
                mime="text/plain"
            )
    
    with col4:
        if st.button("üìä Ver Estat√≠sticas", use_container_width=True):
            total_msgs = len(st.session_state.chat_history)
            user_msgs = len([m for m in st.session_state.chat_history if m['sender'] == 'user'])
            ai_msgs = len([m for m in st.session_state.chat_history if m['sender'] == 'ai'])
            
            st.info(f"üìä **Estat√≠sticas da Conversa:**\n\n"
                   f"- Total de mensagens: {total_msgs}\n"
                   f"- Suas perguntas: {user_msgs}\n"
                   f"- Respostas da IA: {ai_msgs}")

# ============================================================================
# CALCULADORAS NUTRICIONAIS AVAN√áADAS
# ============================================================================

def show_calculators():
    """Calculadoras Nutricionais Completas e Avan√ßadas"""
    st.markdown('<div class="main-header"><h1>üßÆ Calculadoras Nutricionais</h1><p>Ferramentas profissionais para c√°lculos precisos</p></div>', unsafe_allow_html=True)
    
    tab1, tab2, tab3 = st.tabs(["‚öñÔ∏è IMC e Gasto Energ√©tico", "üçΩÔ∏è Macronutrientes", "üìä Avalia√ß√£o Completa"])
    
    with tab1:
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("### üìä Dados do Paciente")
            
            weight = st.number_input("Peso (kg)", min_value=30.0, max_value=300.0, value=70.0, step=0.1)
            height = st.number_input("Altura (m)", min_value=1.0, max_value=2.5, value=1.70, step=0.01)
            age = st.number_input("Idade (anos)", min_value=1, max_value=120, value=30)
            gender = st.selectbox("G√™nero", ["Masculino", "Feminino"])
            activity = st.selectbox("N√≠vel de Atividade", [
                "Sedent√°rio (pouco exerc√≠cio)",
                "Levemente Ativo (1-3 dias/semana)",
                "Moderadamente Ativo (3-5 dias/semana)",
                "Muito Ativo (6-7 dias/semana)",
                "Extremamente Ativo (atleta)"
            ])
            
            activity_factors = {
                "Sedent√°rio (pouco exerc√≠cio)": 1.2,
                "Levemente Ativo (1-3 dias/semana)": 1.375,
                "Moderadamente Ativo (3-5 dias/semana)": 1.55,
                "Muito Ativo (6-7 dias/semana)": 1.725,
                "Extremamente Ativo (atleta)": 1.9
            }
            
            activity_factor = activity_factors[activity]
            
            # Salvar valores na sess√£o para usar em outras abas
            st.session_state.calc_weight = weight
            st.session_state.calc_height = height
            st.session_state.calc_age = age
            st.session_state.calc_gender = gender
            st.session_state.calc_activity_factor = activity_factor
        
        with col2:
            st.markdown("### üìà Resultados")
            
            # C√°lculo IMC
            imc = weight / (height ** 2)
            
            if imc < 18.5:
                imc_class = "Abaixo do peso"
                imc_color = "#2196F3"
                imc_desc = "Considere aumento cal√≥rico"
            elif imc < 25:
                imc_class = "Peso normal"
                imc_color = "#4CAF50"
                imc_desc = "Manter peso atual"
            elif imc < 30:
                imc_class = "Sobrepeso"
                imc_color = "#FF9800"
                imc_desc = "D√©ficit cal√≥rico leve"
            else:
                imc_class = "Obesidade"
                imc_color = "#F44336"
                imc_desc = "D√©ficit cal√≥rico moderado"
            
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: {imc_color};">
                <h4>√çndice de Massa Corporal (IMC)</h4>
                <h1 style="color: {imc_color}; margin: 0.5rem 0;">{imc:.1f}</h1>
                <span style="background: {imc_color}20; color: {imc_color}; 
                            padding: 0.5rem 1rem; border-radius: 20px; font-weight: bold;">
                    {imc_class}
                </span>
                <p style="margin-top: 0.5rem; color: #666;">{imc_desc}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # C√°lculo TMB (Mifflin-St Jeor - mais precisa)
            if gender == "Masculino":
                tmb = (10 * weight) + (6.25 * height * 100) - (5 * age) + 5
            else:
                tmb = (10 * weight) + (6.25 * height * 100) - (5 * age) - 161
            
            # Salvar TMB na sess√£o
            st.session_state.calc_tmb = tmb
            
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: #2196F3;">
                <h4>Taxa Metab√≥lica Basal (TMB)</h4>
                <h1 style="color: #2196F3; margin: 0.5rem 0;">{tmb:.0f}</h1>
                <p>kcal/dia em repouso absoluto</p>
                <small style="color: #666;">F√≥rmula: Mifflin-St Jeor (mais precisa)</small>
            </div>
            """, unsafe_allow_html=True)
            
            # C√°lculo GET
            get_calories = tmb * activity_factor
            st.session_state.calc_get = get_calories
            
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: #4CAF50;">
                <h4>Gasto Energ√©tico Total (GET)</h4>
                <h1 style="color: #4CAF50; margin: 0.5rem 0;">{get_calories:.0f}</h1>
                <p>kcal/dia com atividade f√≠sica</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Recomenda√ß√µes
            st.markdown(f"""
            <div class="info-box">
                <h4>üìã Recomenda√ß√µes por Objetivo:</h4>
                <ul>
                    <li>üîª <strong>Perda de peso:</strong> {(get_calories - 500):.0f} kcal/dia (-500 kcal)</li>
                    <li>‚öñÔ∏è <strong>Manuten√ß√£o:</strong> {get_calories:.0f} kcal/dia</li>
                    <li>üî∫ <strong>Ganho de peso:</strong> {(get_calories + 500):.0f} kcal/dia (+500 kcal)</li>
                </ul>
                <small>Ajuste conforme progresso real do paciente</small>
            </div>
            """, unsafe_allow_html=True)
    
    with tab2:
        st.markdown("### üçΩÔ∏è Distribui√ß√£o de Macronutrientes")
        
        # Usar valores da sess√£o ou padr√£o
        if 'calc_get' not in st.session_state:
            st.warning("‚ö†Ô∏è Primeiro calcule o GET na aba anterior!")
            get_calories = 2000
        else:
            get_calories = st.session_state.calc_get
        
        weight = st.session_state.get('calc_weight', 70)
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("#### üéØ Escolha o Objetivo:")
            objetivo = st.selectbox("Objetivo", [
                "Emagrecimento",
                "Ganho de Massa Muscular",
                "Manuten√ß√£o",
                "Defini√ß√£o Muscular"
            ])
            
            # Ajustar calorias baseado no objetivo
            if objetivo == "Emagrecimento":
                target_calories = get_calories - 500
                protein_percent = 35
                carbs_percent = 35
                fats_percent = 30
            elif objetivo == "Ganho de Massa Muscular":
                target_calories = get_calories + 500
                protein_percent = 30
                carbs_percent = 50
                fats_percent = 20
            elif objetivo == "Defini√ß√£o Muscular":
                target_calories = get_calories - 300
                protein_percent = 40
                carbs_percent = 30
                fats_percent = 30
            else:  # Manuten√ß√£o
                target_calories = get_calories
                protein_percent = 30
                carbs_percent = 45
                fats_percent = 25
            
            st.markdown(f"""
            <div class="info-box">
                <h4>Calorias Alvo:</h4>
                <h2 style="color: #667eea; margin: 0;">{target_calories:.0f} kcal/dia</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("#### üìä Distribui√ß√£o Calculada:")
            
            # Calcular gramas de macros
            protein_kcal = target_calories * (protein_percent / 100)
            protein_grams = protein_kcal / 4
            
            carbs_kcal = target_calories * (carbs_percent / 100)
            carbs_grams = carbs_kcal / 4
            
            fats_kcal = target_calories * (fats_percent / 100)
            fats_grams = fats_kcal / 9
            
            # Criar gr√°fico de distribui√ß√£o
            df_macros = pd.DataFrame({
                'Macronutriente': ['Prote√≠nas', 'Carboidratos', 'Gorduras'],
                'Porcentagem': [protein_percent, carbs_percent, fats_percent],
                'Gramas': [protein_grams, carbs_grams, fats_grams]
            })
            
            fig = px.pie(df_macros, values='Porcentagem', names='Macronutriente',
                         color_discrete_sequence=['#E91E63', '#2196F3', '#FF9800'])
            fig.update_traces(textposition='inside', textinfo='percent+label')
            fig.update_layout(height=300)
            
            st.plotly_chart(fig, use_container_width=True)
        
        # Cards detalhados de macros
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: #E91E63;">
                <h3 style="color: #E91E63;">ü•© Prote√≠nas</h3>
                <h1>{protein_percent}%</h1>
                <h3 style="color: #E91E63; margin: 0;">{protein_grams:.0f}g/dia</h3>
                <p style="margin-top: 0.5rem; color: #666;">
                    {(protein_grams/weight):.1f}g/kg de peso<br>
                    {protein_kcal:.0f} kcal
                </p>
                <small style="color: #888;">
                    <strong>Fontes:</strong> Frango, peixe, ovos, whey
                </small>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: #2196F3;">
                <h3 style="color: #2196F3;">üçö Carboidratos</h3>
                <h1>{carbs_percent}%</h1>
                <h3 style="color: #2196F3; margin: 0;">{carbs_grams:.0f}g/dia</h3>
                <p style="margin-top: 0.5rem; color: #666;">
                    {(carbs_grams/weight):.1f}g/kg de peso<br>
                    {carbs_kcal:.0f} kcal
                </p>
                <small style="color: #888;">
                    <strong>Fontes:</strong> Arroz, batata-doce, aveia
                </small>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="metric-card" style="border-left-color: #FF9800;">
                <h3 style="color: #FF9800;">ü•ë Gorduras</h3>
                <h1>{fats_percent}%</h1>
                <h3 style="color: #FF9800; margin: 0;">{fats_grams:.0f}g/dia</h3>
                <p style="margin-top: 0.5rem; color: #666;">
                    {(fats_grams/weight):.1f}g/kg de peso<br>
                    {fats_kcal:.0f} kcal
                </p>
                <small style="color: #888;">
                    <strong>Fontes:</strong> Abacate, azeite, nozes
                </small>
            </div>
            """, unsafe_allow_html=True)
        
        # Distribui√ß√£o por refei√ß√£o
        st.markdown("### üçΩÔ∏è Distribui√ß√£o por Refei√ß√£o (exemplo)")
        
        meal_distribution = pd.DataFrame({
            'Refei√ß√£o': ['Caf√© da Manh√£', 'Lanche Manh√£', 'Almo√ßo', 'Lanche Tarde', 'Jantar', 'Ceia'],
            'Calorias': [
                target_calories * 0.25,
                target_calories * 0.10,
                target_calories * 0.30,
                target_calories * 0.10,
                target_calories * 0.20,
                target_calories * 0.05
            ],
            'Prote√≠nas (g)': [
                protein_grams * 0.25,
                protein_grams * 0.10,
                protein_grams * 0.30,
                protein_grams * 0.10,
                protein_grams * 0.20,
                protein_grams * 0.05
            ]
        })
        
        st.dataframe(meal_distribution, use_container_width=True)
    
    with tab3:
        st.markdown("### üìä Avalia√ß√£o Nutricional Completa")
        
        # Usar valores salvos
        if 'calc_weight' not in st.session_state:
            st.warning("‚ö†Ô∏è Primeiro preencha os dados na aba IMC!")
        else:
            weight = st.session_state.calc_weight
            height = st.session_state.calc_height
            age = st.session_state.calc_age
            gender = st.session_state.calc_gender
            
            # Dados adicionais
            col1, col2 = st.columns(2)
            
            with col1:
                waist = st.number_input("Circunfer√™ncia da Cintura (cm)", min_value=40.0, max_value=200.0, value=80.0)
                hip = st.number_input("Circunfer√™ncia do Quadril (cm)", min_value=40.0, max_value=200.0, value=95.0)
            
            with col2:
                neck = st.number_input("Circunfer√™ncia do Pesco√ßo (cm)", min_value=20.0, max_value=80.0, value=35.0)
                body_fat = st.slider("% Gordura Corporal (opcional)", 5.0, 50.0, 20.0, 0.1)
            
            if st.button("üî¨ Gerar Avalia√ß√£o Completa", use_container_width=True):
                # IMC
                imc = weight / (height ** 2)
                
                # RCQ (Rela√ß√£o Cintura-Quadril)
                rcq = waist / hip
                
                # Classifica√ß√£o RCQ
                if gender == "Masculino":
                    if rcq < 0.90:
                        rcq_risk = "Baixo risco"
                        rcq_color = "#4CAF50"
                    elif rcq < 0.99:
                        rcq_risk = "Risco moderado"
                        rcq_color = "#FF9800"
                    else:
                        rcq_risk = "Alto risco"
                        rcq_color = "#F44336"
                else:
                    if rcq < 0.80:
                        rcq_risk = "Baixo risco"
                        rcq_color = "#4CAF50"
                    elif rcq < 0.84:
                        rcq_risk = "Risco moderado"
                        rcq_color = "#FF9800"
                    else:
                        rcq_risk = "Alto risco"
                        rcq_color = "#F44336"
                
                # Peso ideal
                if gender == "Masculino":
                    peso_ideal = 50 + (2.3 * ((height * 100 - 152.4) / 2.54))
                else:
                    peso_ideal = 45.5 + (2.3 * ((height * 100 - 152.4) / 2.54))
                
                # Massa magra e massa gorda
                massa_gorda = weight * (body_fat / 100)
                massa_magra = weight - massa_gorda
                
                # Exibir resultados
                st.success("‚úÖ Avalia√ß√£o Completa Gerada!")
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üìè Medidas Antropom√©tricas</h4>
                        <p><strong>IMC:</strong> {imc:.1f}</p>
                        <p><strong>RCQ:</strong> {rcq:.2f} ({rcq_risk})</p>
                        <p><strong>Cintura:</strong> {waist} cm</p>
                        <p><strong>Quadril:</strong> {hip} cm</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>‚öñÔ∏è Composi√ß√£o Corporal</h4>
                        <p><strong>Peso Atual:</strong> {weight:.1f} kg</p>
                        <p><strong>Peso Ideal:</strong> {peso_ideal:.1f} kg</p>
                        <p><strong>Massa Gorda:</strong> {massa_gorda:.1f} kg</p>
                        <p><strong>Massa Magra:</strong> {massa_magra:.1f} kg</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üéØ Recomenda√ß√µes</h4>
                        <p><strong>% Gordura:</strong> {body_fat:.1f}%</p>
                        <p><strong>Meta:</strong> {(peso_ideal - weight):.1f} kg</p>
                        <p><strong>Tempo Estimado:</strong> {abs(peso_ideal - weight) / 0.5:.0f} semanas</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Gr√°fico de composi√ß√£o corporal
                fig = go.Figure(data=[go.Pie(
                    labels=['Massa Magra', 'Massa Gorda'],
                    values=[massa_magra, massa_gorda],
                    marker_colors=['#4CAF50', '#F44336'],
                    hole=.4
                )])
                fig.update_layout(
                    title="Composi√ß√£o Corporal",
                    annotations=[dict(text=f'{weight:.1f}kg', x=0.5, y=0.5, font_size=20, showarrow=False)]
                )
                st.plotly_chart(fig, use_container_width=True)

# ============================================================================
# SISTEMA DE AGENDAMENTOS
# ============================================================================

def show_appointments():
    """Sistema Completo de Agendamentos"""
    st.markdown('<div class="main-header"><h1>üìÖ Sistema de Agendamentos</h1><p>Gerencie consultas e hor√°rios</p></div>', unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üìã Pr√≥ximas Consultas", "‚ûï Nova Consulta"])
    
    with tab1:
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            
            # Filtros
            col1, col2, col3 = st.columns(3)
            
            with col1:
                filter_date = st.date_input("Filtrar por data", datetime.now())
            
            with col2:
                filter_status = st.selectbox("Status", ["Todos", "pending", "confirmed", "completed", "cancelled"])
            
            with col3:
                if st.button("üîÑ Atualizar", use_container_width=True):
                    st.rerun()
            
            # Buscar consultas
            query = """
                SELECT a.id, p.full_name, a.date, a.time, a.type, a.status, a.notes
                FROM appointments a
                JOIN patients p ON a.patient_id = p.id
                WHERE a.date >= ?
            """
            params = [str(filter_date)]
            
            if filter_status != "Todos":
                query += " AND a.status = ?"
                params.append(filter_status)
            
            query += " ORDER BY a.date, a.time"
            
            appointments_df = pd.read_sql_query(query, conn, params=params)
            
            if not appointments_df.empty:
                st.markdown(f"### üìã {len(appointments_df)} Consultas Encontradas")
                
                for _, apt in appointments_df.iterrows():
                    status_colors = {
                        'pending': '#FF9800',
                        'confirmed': '#4CAF50',
                        'completed': '#2196F3',
                        'cancelled': '#F44336'
                    }
                    
                    status_labels = {
                        'pending': 'Pendente',
                        'confirmed': 'Confirmada',
                        'completed': 'Realizada',
                        'cancelled': 'Cancelada'
                    }
                    
                    status_color = status_colors.get(apt['status'], '#999')
                    status_label = status_labels.get(apt['status'], apt['status'])
                    
                    with st.container():
                        st.markdown(f"""
                        <div class="patient-card" style="border-left-color: {status_color};">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <h4>{apt['full_name']}</h4>
                                    <p>üìÖ {apt['date']} √†s {apt['time']} | Tipo: {apt['type']}</p>
                                    {f"<p><small>üìù {apt['notes']}</small></p>" if apt['notes'] else ""}
                                </div>
                                <span style="background: {status_color}20; color: {status_color}; 
                                            padding: 0.5rem 1rem; border-radius: 20px; font-weight: bold;">
                                    {status_label}
                                </span>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # Bot√µes de a√ß√£o
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            if st.button("‚úÖ Confirmar", key=f"confirm_{apt['id']}", use_container_width=True):
                                cursor = conn.cursor()
                                cursor.execute("UPDATE appointments SET status = 'confirmed' WHERE id = ?", (apt['id'],))
                                conn.commit()
                                st.success("Consulta confirmada!")
                                st.rerun()
                        
                        with col2:
                            if st.button("‚úîÔ∏è Concluir", key=f"complete_{apt['id']}", use_container_width=True):
                                cursor = conn.cursor()
                                cursor.execute("UPDATE appointments SET status = 'completed' WHERE id = ?", (apt['id'],))
                                conn.commit()
                                st.success("Consulta conclu√≠da!")
                                st.rerun()
                        
                        with col3:
                            if st.button("‚ùå Cancelar", key=f"cancel_{apt['id']}", use_container_width=True):
                                cursor = conn.cursor()
                                cursor.execute("UPDATE appointments SET status = 'cancelled' WHERE id = ?", (apt['id'],))
                                conn.commit()
                                st.warning("Consulta cancelada!")
                                st.rerun()
                        
                        with col4:
                            if st.button("üóëÔ∏è Excluir", key=f"delete_apt_{apt['id']}", use_container_width=True):
                                cursor = conn.cursor()
                                cursor.execute("DELETE FROM appointments WHERE id = ?", (apt['id'],))
                                conn.commit()
                                st.success("Consulta exclu√≠da!")
                                st.rerun()
            else:
                st.info("üìÖ Nenhuma consulta encontrada para os filtros selecionados.")
            
            conn.close()
        
        except Exception as e:
            st.error(f"Erro ao carregar consultas: {e}")
    
    with tab2:
        st.markdown("### ‚ûï Agendar Nova Consulta")
        
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            patients = pd.read_sql_query("SELECT id, full_name FROM patients WHERE active = 1 ORDER BY full_name", conn)
            
            if not patients.empty:
                with st.form("new_appointment_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        patient_id = st.selectbox(
                            "Paciente *",
                            patients['id'].tolist(),
                            format_func=lambda x: patients[patients['id'] == x]['full_name'].iloc[0]
                        )
                        
                        apt_date = st.date_input("Data *", datetime.now())
                        apt_type = st.selectbox("Tipo de Consulta", [
                            "Primeira Consulta",
                            "Retorno",
                            "Avalia√ß√£o",
                            "Reavalia√ß√£o",
                            "Orienta√ß√£o"
                        ])
                    
                    with col2:
                        apt_time = st.time_input("Hor√°rio *", datetime.now().replace(hour=9, minute=0))
                        apt_status = st.selectbox("Status", ["pending", "confirmed"])
                        apt_notes = st.text_area("Observa√ß√µes")
                    
                    submitted = st.form_submit_button("üìÖ Agendar Consulta", use_container_width=True)
                    
                    if submitted:
                        try:
                            cursor = conn.cursor()
                            cursor.execute('''
                                INSERT INTO appointments (patient_id, user_id, date, time, type, status, notes)
                                VALUES (?, ?, ?, ?, ?, ?, ?)
                            ''', (patient_id, st.session_state.user['id'], str(apt_date), 
                                  str(apt_time), apt_type, apt_status, apt_notes))
                            conn.commit()
                            st.success("‚úÖ Consulta agendada com sucesso!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao agendar consulta: {e}")
            else:
                st.warning("‚ö†Ô∏è Nenhum paciente cadastrado. Cadastre um paciente primeiro!")
            
            conn.close()
        
        except Exception as e:
            st.error(f"Erro: {e}")

# ============================================================================
# PLANOS ALIMENTARES
# ============================================================================

def show_meal_plans():
    """Sistema de Cria√ß√£o de Planos Alimentares"""
    st.markdown('<div class="main-header"><h1>üìã Planos Alimentares</h1><p>Crie e gerencie planos personalizados</p></div>', unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs(["üìã Planos Existentes", "‚ûï Novo Plano"])
    
    with tab1:
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            
            plans_df = pd.read_sql_query("""
                SELECT mp.id, p.full_name, mp.title, mp.calories, mp.proteins, mp.carbs, mp.fats, 
                       mp.active, mp.created_at
                FROM meal_plans mp
                JOIN patients p ON mp.patient_id = p.id
                WHERE mp.active = 1
                ORDER BY mp.created_at DESC
            """, conn)
            
            if not plans_df.empty:
                st.markdown(f"### üìã {len(plans_df)} Planos Ativos")
                
                for _, plan in plans_df.iterrows():
                    with st.container():
                        st.markdown(f"""
                        <div class="patient-card">
                            <h4>üìã {plan['title']}</h4>
                            <p><strong>Paciente:</strong> {plan['full_name']}</p>
                            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; gap: 1rem; margin: 1rem 0;">
                                <div><small>Calorias:</small><br><strong>{plan['calories']} kcal</strong></div>
                                <div><small>Prote√≠nas:</small><br><strong>{plan['proteins']:.0f}g</strong></div>
                                <div><small>Carboidratos:</small><br><strong>{plan['carbs']:.0f}g</strong></div>
                                <div><small>Gorduras:</small><br><strong>{plan['fats']:.0f}g</strong></div>
                            </div>
                            <small>Criado em: {plan['created_at']}</small>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            if st.button("üëÅÔ∏è Ver Detalhes", key=f"view_plan_{plan['id']}", use_container_width=True):
                                st.info("üîß Visualiza√ß√£o detalhada em desenvolvimento...")
                        
                        with col2:
                            if st.button("üìÑ Gerar PDF", key=f"pdf_plan_{plan['id']}", use_container_width=True):
                                st.info("üîß Gera√ß√£o de PDF em desenvolvimento...")
                        
                        with col3:
                            if st.button("üóëÔ∏è Excluir", key=f"delete_plan_{plan['id']}", use_container_width=True):
                                cursor = conn.cursor()
                                cursor.execute("UPDATE meal_plans SET active = 0 WHERE id = ?", (plan['id'],))
                                conn.commit()
                                st.success("Plano exclu√≠do!")
                                st.rerun()
            else:
                st.info("üìã Nenhum plano alimentar criado ainda.")
            
            conn.close()
        
        except Exception as e:
            st.error(f"Erro ao carregar planos: {e}")
    
    with tab2:
        st.markdown("### ‚ûï Criar Novo Plano Alimentar")
        
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            patients = pd.read_sql_query("SELECT id, full_name FROM patients WHERE active = 1 ORDER BY full_name", conn)
            
            if not patients.empty:
                with st.form("new_meal_plan_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        patient_id = st.selectbox(
                            "Paciente *",
                            patients['id'].tolist(),
                            format_func=lambda x: patients[patients['id'] == x]['full_name'].iloc[0]
                        )
                        
                        plan_title = st.text_input("T√≠tulo do Plano *", "Plano Alimentar Personalizado")
                        plan_desc = st.text_area("Descri√ß√£o")
                        plan_calories = st.number_input("Calorias Totais (kcal)", min_value=800, max_value=5000, value=2000, step=100)
                    
                    with col2:
                        plan_proteins = st.number_input("Prote√≠nas (g)", min_value=0.0, max_value=500.0, value=150.0, step=5.0)
                        plan_carbs = st.number_input("Carboidratos (g)", min_value=0.0, max_value=800.0, value=200.0, step=10.0)
                        plan_fats = st.number_input("Gorduras (g)", min_value=0.0, max_value=200.0, value=70.0, step=5.0)
                    
                    # √Årea para refei√ß√µes
                    st.markdown("#### üçΩÔ∏è Refei√ß√µes do Dia")
                    
                    meals_data = {}
                    meals = ["Caf√© da Manh√£", "Lanche Manh√£", "Almo√ßo", "Lanche Tarde", "Jantar", "Ceia"]
                    
                    for meal in meals:
                        with st.expander(meal):
                            meals_data[meal] = st.text_area(f"Alimentos - {meal}", key=f"meal_{meal}",
                                                           placeholder="Ex: 2 fatias de p√£o integral, 2 ovos mexidos, 1 banana")
                    
                    submitted = st.form_submit_button("üíæ Criar Plano Alimentar", use_container_width=True)
                    
                    if submitted:
                        if plan_title:
                            try:
                                cursor = conn.cursor()
                                cursor.execute('''
                                    INSERT INTO meal_plans 
                                    (patient_id, user_id, title, description, calories, proteins, carbs, fats, meals_data)
                                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                                ''', (patient_id, st.session_state.user['id'], plan_title, plan_desc,
                                      plan_calories, plan_proteins, plan_carbs, plan_fats, json.dumps(meals_data)))
                                conn.commit()
                                st.success("‚úÖ Plano alimentar criado com sucesso!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"Erro ao criar plano: {e}")
                        else:
                            st.error("‚ö†Ô∏è T√≠tulo √© obrigat√≥rio!")
            else:
                st.warning("‚ö†Ô∏è Nenhum paciente cadastrado. Cadastre um paciente primeiro!")
            
            conn.close()
        
        except Exception as e:
            st.error(f"Erro: {e}")

# ============================================================================
# APLICA√á√ÉO PRINCIPAL
# ============================================================================

def main():
    """Fun√ß√£o Principal da Aplica√ß√£o"""
    
    # Verificar login
    if 'logged_in' not in st.session_state or not st.session_state.logged_in:
        login_page()
        return
    
    # Sidebar
    with st.sidebar:
        st.markdown("""
            <div style='text-align: center; padding: 1rem 0;'>
                <div style='background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            width: 80px; height: 80px; border-radius: 50%;
                            margin: 0 auto 1rem; display: flex; align-items: center;
                            justify-content: center; box-shadow: 0 4px 15px rgba(102,126,234,0.4);'>
                    <h1 style='color: white; font-size: 2.5rem; margin: 0;'>üçΩÔ∏è</h1>
                </div>
                <h2 style='color: #333; margin: 0;'>NutriStock 360</h2>
                <p style='color: #666; font-size: 0.9rem;'>Vers√£o 2.0 Completa</p>
            </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Perfil do usu√°rio
        st.markdown(f"""
        <div class="info-box">
            <h4>üë§ {st.session_state.user['full_name']}</h4>
            <p><strong>{st.session_state.user['crn']}</strong></p>
            <small>{st.session_state.user['email'] or 'email@nutristock.com'}</small>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Menu
        page = st.radio(
            "üìã Menu Principal",
            ["üìä Dashboard", "üë• Pacientes", "üìÖ Agendamentos", "üìã Planos Alimentares",
             "ü§ñ Chat IA", "üßÆ Calculadoras", "üìä Relat√≥rios", "‚öôÔ∏è Configura√ß√µes"],
            key="main_menu"
        )
        
        st.markdown("---")
        
        # Estat√≠sticas r√°pidas
        try:
            conn = sqlite3.connect('nutristock360.db', check_same_thread=False)
            total_patients = pd.read_sql_query("SELECT COUNT(*) as total FROM patients WHERE active = 1", conn).iloc[0]['total']
            total_appointments = pd.read_sql_query("SELECT COUNT(*) as total FROM appointments WHERE date >= date('now')", conn).iloc[0]['total']
            conn.close()
            
            st.markdown(f"""
            <div style='background: #f8f9fa; padding: 1rem; border-radius: 10px;'>
                <h4 style='margin: 0 0 0.5rem 0;'>üìä Estat√≠sticas</h4>
                <p style='margin: 0.3rem 0;'>üë• Pacientes: <strong>{total_patients}</strong></p>
                <p style='margin: 0.3rem 0;'>üìÖ Consultas: <strong>{total_appointments}</strong></p>
            </div>
            """, unsafe_allow_html=True)
        except:
            pass
        
        st.markdown("---")
        
        if st.button("üö™ Sair do Sistema", use_container_width=True):
            st.session_state.logged_in = False
            st.session_state.clear()
            st.rerun()
    
    # Renderizar p√°gina
    if page == "üìä Dashboard":
        show_dashboard()
    elif page == "üë• Pacientes":
        show_patients()
    elif page == "üìÖ Agendamentos":
        show_appointments()
    elif page == "üìã Planos Alimentares":
        show_meal_plans()
    elif page == "ü§ñ Chat IA":
        show_chat_ia()
    elif page == "üßÆ Calculadoras":
        show_calculators()
    elif page == "üìä Relat√≥rios":
        st.info("üöß M√≥dulo de Relat√≥rios em desenvolvimento...")
    elif page == "‚öôÔ∏è Configura√ß√µes":
        st.info("üöß M√≥dulo de Configura√ß√µes em desenvolvimento...")

if __name__ == "__main__":
    main()
